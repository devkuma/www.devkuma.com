<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>Vue.js 예제</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.4/vue.js"></script>
</head>
<body>
  
<h1>app</h1>
<div id="app">
  <div class="box">
    <h3>여기는 부모 범위</h3>
    <p>{{ childMessage }}</p>
    <child-component
      :parent-message="parentMessage"
      @send-message="getChildMessage"></child-component>
  </div>
</div>

<script>
  // 자식 컴포넌트
  var childComp = Vue.extend({
    // 부모로 부터 parentMessage을 받는다.
    props: { parentMessage: String },
    template: '<div class="box"><h3>여기는 자식 범위</h3>' +
      '<p>{{ parentMessage }}</p></div>',

    // 컴포넌트 데이터는 객체를 반환하는 함수로 한다
    data: function() {
      return {
        childMessage: '이것은 자식 데이터이다'
      }
    },
    created: function() {

      this.$emit('send-message', this.childMessage)
 
      // 전달 후에 변경된다면 다시 emit하지 않으면 반영되지 않는다
      // 객체라면 참조가 되어 버리기 때문에 좋지 않다
      // 이런 관리가 힘들어진 경우는 상태 관리를 사용하자!		
      this.childMessage = '자식이 데이터를 변경했다'
    }
  })

  // 부모 루트
  new Vue({
    el: '#app',
    data: {
      // 부모가 갖은 데이터
      parentMessage: '이것은 부모 데이터이다',
      // 자식으로 부터 받은 데이터를 보존하기 위해서 있는 빈 데이터
      childMessage: ''
    },
    components: {
       // 자식 컴포넌트를 등록한다
      'child-component': childComp
    },
    methods: {
      // 자식이 이벤트를 발생하면 실행 처리
      getChildMessage: function(text) {
        this.childMessage = text
      }
    }
  })
</script>
  
</body>
</html>