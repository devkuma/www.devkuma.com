<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – DevOps</title>
    <link>https://www.devkuma.com/tags/devops/</link>
    <image>
      <url>https://www.devkuma.com/tags/devops/logo/180x180.jpg</url>
      <title>DevOps</title>
      <link>https://www.devkuma.com/tags/devops/</link>
    </image>
    <description>Recent content in DevOps on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>kc@example.com (kc kim)</managingEditor>
    <webMaster>kc@example.com (kc kim)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>DevOps란? 기초 지식과 민첩한 개발과의 차이점, 이점을 설명</title>
      <link>https://www.devkuma.com/docs/dev-ops/overview/</link>
      <pubDate>Thu, 29 Dec 2022 10:59:53 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/dev-ops/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;devops란&#34;&gt;DevOps란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/dev-ops/dev-ops-structure.png&#34; alt=&#34;DevOps 구조&#34;&gt;&lt;/p&gt;
&lt;p&gt;DevOps(데브옵스)란 &amp;lsquo;개발&amp;rsquo;을 의미하는 Development와 &amp;lsquo;운용&amp;rsquo;을 의미하는 Operations를 조합한 합성어이다. 개발 담당자와 운용 담당자가 같이 협력함으로써 원활하게 개발, 운용을 진행시켜 제품의 가치를 지속적으로 향상시킨다는 것이 목적이다.&lt;/p&gt;
&lt;h3 id=&#34;devops의-탄생-배경&#34;&gt;DevOps의 탄생 배경&lt;/h3&gt;
&lt;p&gt;DevOps가 태어난 배경에는 개발 현장에서 팀 간의 대립 구조가 생기는 문제가 있다. 많은 소프트웨어 개발 현장에서는 시스템 개발을 담당하는 개발(Dev) 팀과 서비스 운영을 담당하는 운영(Ops) 팀으로 나누어 작업한다. 개발 팀의 목표는 &amp;ldquo;새로운 기능을 추가하고 더 빨리 출시&amp;quot;하는 반면, 운영 팀의 목표는 &amp;ldquo;시스템의 안정적인 가동과 서비스의 안정적인 공급&amp;quot;이다. 이와 같이, 양쪽의 목적의 차이에 의해 입장상의 대립 관계가 생겨 버리는 일이 있다. 그리고 이러한 의견의 대립이 쌓여 팀 간의 홈이 깊어지는 &amp;ldquo;사일로(silos)화&amp;quot;으로 연결될 수 있다. 그러나 양쪽의 목적 앞에는 &amp;ldquo;가치적인 서비스를 보다 신속하게 고객에게 전달하기&amp;quot;라는 공통의 목적이 존재하고 있다. 이 궁극적인 목적이 동일하다면, 기본적으로 대립할 필요는 없다.&lt;/p&gt;
&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;&lt;div class=&#34;h4 alert-heading&#34; role=&#34;heading&#34;&gt;사일로란?&lt;/div&gt;


IT 영역에서의 사일로(silos)란? 업무 프로세스, 업무 애플리케이션, 각종 시스템이 고립되어 정보가 연계되지 않은 모습을 말한다. 사일로화가 되는 이유로는 기업 내의 각 부문에서 개별 최적으로 시스템을 구축하고, 타 부문의 시스템과의 제휴가 고려되지 않고 개발되어 버리는 것 등을 들 수 있다.

사일로화 되는 동일한 기능이 각 부서의 업무 프로세스 및 시스템에 흩어져 있을 수 있으며, 기업 전체의 관점에서 볼 때 많은 낭비가 발생할 수 있다. 또한, 각 부서가 가지는 정보를 횡단적으로 파악할 수 없기 때문에, 비즈니스의 현상을 파악하는 것이 어렵다는 것이다. 또한 시스템이 사일로화되어 있으면 빅데이터나 AI 활용의 대처 중 데이터를 수집할 때 필요한 데이터가 어디에 있는지 파악할 수 없는 부서에 따라 데이터 포맷이 다르다는 문제가 생기는 것도 생각된다.
&lt;/div&gt;

&lt;p&gt;또한 디지털화가 급속히 진행되는 현대에서는 고객이 요구하는 가치도 유동적이다. 그 변화에 대응하기 위해서, 보다 신속한 소프트웨어 개발을 할 수 있는 개발 프로세스나 조직 만들기가 요구된다.&lt;br&gt;
이런 배경에서 DevOps가 중요시되게 된 것이다.&lt;/p&gt;
&lt;h3 id=&#34;애자일-개발과의-차이&#34;&gt;애자일 개발과의 차이&lt;/h3&gt;
&lt;p&gt;DevOps와 애자일 개발은 지속적으로 사이클을 돌리는 것과 작은 단위마다 나누어 개발 사이클을 돌리는 등의 공통점이 있는 것으로 혼동될 수 있다만, 별개이다. DevOps는 조직의 협력 체제에 관한 조직론이며 광범위한 개념이지만, 민첩한 개발 중 하나는 구체적인 개발 방법론을 의미한다. 다만, 양쪽의 친화력이 높고, DevOps를 실현하기 위한 개발 방법에 애자일 개발이 채용되는 경우도 있다.&lt;br&gt;
원래 애자일 개발이란, &amp;ldquo;요건 정의 → 설계 → 개발 → 테스트 → 릴리스&amp;quot;라고 하는 개발 공정을 1개의 기능 단위로 작은 사이클로 반복한다고 하는 방식이다. 이는 기존에 주류였던 워터폴 개발이라는 개발의 일련의 흐름을 차례로 실행해 가는 수법보다 유연성이 높고, 릴리스까지의 기간이 짧다고 하는 특징이 있다. DevOps의 조직론 하에서 애자일 개발을 통해 더욱 효율적으로 유연한 개발이 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;devops의-장점&#34;&gt;DevOps의 장점&lt;/h2&gt;
&lt;p&gt;DevOps의 본질은 개발 담당자와 운영 담당자 간의 충돌을 해소하여 부드러운 개발 및 운영을 수행하는 것이다. DevOps를 구현하려면 각 단계마다 다양한 도구를 도입해야 한다. 그 대표적인 것에 관리 파일의 변경 이력을 기록하는 &amp;ldquo;버전 관리 시스템&amp;quot;이나 작업을 자동화하는 &amp;ldquo;CI/CD 툴&amp;rdquo; 등이 있는데, 이러한 툴을 활용하는 것으로 생산성의 향상으로 연결된다. 그리고 생산성이 향상됨으로써 그만큼의 시간을 품질 향상이나 신서비스 개발 등에 사용할 수 있기 때문에 보다 제품과 서비스의 가치가 높아진다. 이러한 툴에 의한 자동화는 그 밖에도 작업의 고속화가 가능하게 된다고 하는 메리트도 있다. 고속화는 DevOps의 라이프사이클을 돌리는 속도가 빨라짐으로써 고객으로부터 받은 요구나 피드백을 순간에 도입하기 쉬워져, 급속하게 변화하는 시장 요구에 신속하게 대응할 수 있게 된다.&lt;/p&gt;
&lt;h2 id=&#34;devops-프로세스&#34;&gt;DevOps 프로세스&lt;/h2&gt;
&lt;p&gt;DevOps의 개발은 다음과 같은 6가지 프로세스로 구성된다.&lt;br&gt;
이 프로세스로 지속적으로 돌아가 가는 것으로 DevOps를 수행할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;계획plan&#34;&gt;계획(Plan)&lt;/h3&gt;
&lt;p&gt;프로젝트 전체의 요건 정의를 하고, 구현하는 기능이나 태스크 관리, 진척 관리등을 결정해 간다. 프로젝트 관리 도구로 유명한 것은 JIRA와 Azure DevOps 등이 있다.&lt;/p&gt;
&lt;h3 id=&#34;개발code&#34;&gt;개발(code)&lt;/h3&gt;
&lt;p&gt;계획에 따라 프로그래머가 코딩하는 것과 같은 개발 작업을 수행한다.&lt;br&gt;
소프트웨어의 설계·구현 단계에서는 과거의 편집 이력을 즉시 확인할 수 있도록 버전 관리 시스템이나 빌드 자동화 툴을 이용한다. 프로그램 테스트를 자동화하는 작업 실행 기능이 있는 GitHub 및 GitLab과 같은 도구를 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;테스트test&#34;&gt;테스트(Test)&lt;/h3&gt;
&lt;p&gt;개발한 아티팩트에 버그 등의 결함이 있는지 테스트해 간다.&lt;br&gt;
여기에 사용되는 대표적인 도구로 JUnit, Selenium, BlazeMeter 등이 있다.&lt;/p&gt;
&lt;h3 id=&#34;배포deploy&#34;&gt;배포(Deploy)&lt;/h3&gt;
&lt;p&gt;개발 공정이 한번 끝나고 테스트에 문제가 없었을 경우는 실제 환경에서 정상적으로 작동하도록 정비해 나갈 것이다. 여기에서 사용되는 도구로는 Ansible, Puppet, Docker, Kubernetes 등을 들 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;운영operate&#34;&gt;운영(Operate)&lt;/h3&gt;
&lt;p&gt;릴리스 후, 지속적으로 제품, 서비스를 제공하기 위한 유지 보수 관리이다.&lt;br&gt;
서버나 어플리케이션 소프트웨어의 감시, 트러블이 발생시에 대응 등을 실행한다.&lt;/p&gt;
&lt;h3 id=&#34;감시monitor&#34;&gt;감시(Monitor)&lt;/h3&gt;
&lt;p&gt;운용으로 얻은 데이터나 고객의 요구, 피드백 등을 지속적으로 받아 개발에 반영시키는 것이다.
이를 위해 모니터링 및 사고 관리 도구를 사용한다. 유명한 것은 New Relic, Datadog, Grafana, Wireshark 등이 있다.&lt;/p&gt;

      </description>
      
      <category>DevOps</category>
      
    </item>
    
    <item>
      <title>Kubernetes 개요</title>
      <link>https://www.devkuma.com/docs/kubernetes/overview/</link>
      <pubDate>Sun, 04 Sep 2022 12:54:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/kubernetes/overview/</guid>
      <description>
        
        
        &lt;p&gt;쿠버네티스(Kubernetes)를 배우기 전에 먼저 도커에 대해서 알아야 하기 때문에 도커에 대해서 모른다면, &lt;a href=&#34;https://www.devkuma.com/docs/docker/quick-start/&#34;&gt;Docker&lt;/a&gt;에 대해 먼저 학습을 하고 오길 바란다.&lt;/p&gt;
&lt;h2 id=&#34;쿠버네티스란&#34;&gt;쿠버네티스란?&lt;/h2&gt;
&lt;p&gt;쿠버네티스(Kubernetes, 약어로 k8s)의 &lt;a href=&#34;https://kubernetes.io/ko/docs/home/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;에 따르면, 오픈소스 시스템으로 &amp;ldquo;컨테이너를 관리하는 기반 도구&amp;rdquo; 이다.&lt;br&gt;
여러 호스트에서 컨테이너를 다루려는 경우에 편리하고, 어플리케이션의 개발 및 관리가 편하고 안전할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;Google이 2014년 6월에 시작한 Go으로 만든 오픈 소스 소프트웨어(Open source software; OSS)이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;과 &lt;code&gt;docker-compose&lt;/code&gt;의 차이점은 동일한 호스트에서 여러 컨테이너 관리 또는 단일 컨테이너 관리인지에 대한 차이이다. 이렇게 구성하면 호스트가 중지되면 컨테이너도 같이 중지가 되어 버린다. 따라서, 호스트를 여러 개 만들고 여러 컨테이너를 이러한 생성된 호스트 그룹에 할당해는 것이 &amp;ldquo;컨테이너 오케스트레이션(Container Orchestration) 도구&amp;quot;이다. 이런 도구로 Kubernetes가 가장 많이 사용되고 있다.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes의-특징&#34;&gt;Kubernetes의 특징&lt;/h2&gt;
&lt;p&gt;K8s라고도 알려진 Kubernetes의 기본 기능으로는 컨테이너으로 된 애플리케이션을 배포, 확장, 로드 균형 조정, 로깅, 모니터링 등이 있다.&lt;/p&gt;
&lt;p&gt;또, 어플리케이션의 운영에는 신경을 많이 써야 하는 문제로서, 고부하 등으로 이상이 발생했을 조치해야 하거나, 스케일 아웃 하거나, 자동 장애 조치(Failover) 등이 필요하다.&lt;/p&gt;
&lt;p&gt;VM을 사용하는 구성에서는 결국에는 관리는 그 VM 단위로 해야 되서 스케일 아웃, 자동 장애 조치의 설정도 VM 단위로 할 수 밖에 없다.&lt;br&gt;
Kubernetes를 사용하면 컨테이너 단위 또는 어플리케이션 단위로 관리 할 수 있고(실제로 VM을 사용하고 있으며 어플리케이션 단위로 관리하는 것 처럼 다를 수 있고), 스케일 아웃, 장애 ​​조치도 응용 프로그램 단위로 설정 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;왜-쿠버네티스를-사용하는가&#34;&gt;왜 쿠버네티스를 사용하는가?&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처를 하기 위해서는 쿠버네티스가 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/microservices.png&#34; alt=&#34;Monoliths and Microservices&#34;&gt;&lt;br&gt;
&lt;em&gt;Figure 1: Monoliths and Microservices&lt;/em&gt; - &lt;a href=&#34;https://martinfowler.com/articles/microservices.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://martinfowler.com/articles/microservices.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;&lt;div class=&#34;h4 alert-heading&#34; role=&#34;heading&#34;&gt;마이크로서비스 아키텍처이란?&lt;/div&gt;


- 어플리케이션의 기능을 세분화하고 각각을 별도의 프로세스로 동작한다. (cf. 모놀리식 아키텍처: Monolithic Architecture)
- 구성 가능하고 확장 가능하며 유연하고 탄력적이다.
- 개발 체제도 스케일하게 동작한다.
&lt;/div&gt;

&lt;p&gt;좀 더 구체적으로 시스템에 변화되는 구조를 보면서 보도록 하겠다.&lt;/p&gt;
&lt;p&gt;예전에는 대부분의 시스템들이 다기능인 프로세스으로 구성된 모놀리식 아키텍처로 구성되었다.&lt;br&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/service-architecture-1.png&#34; alt=&#34;Monolithic&#34;&gt;&lt;/p&gt;
&lt;p&gt;그러다가, 아래와 같은 마이크로서비스 아키텍처가 도입이 되었다.
&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/service-architecture-2.png&#34; alt=&#34;Microservice&#34;&gt;&lt;/p&gt;
&lt;p&gt;그러고 다시, 다시 마이크로서비스가 컨테이너 아키텍처로 변경이 되었다.&lt;br&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/service-architecture-3.png&#34; alt=&#34;Container&#34;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 되므로써, 배포 단위가 세분화 되고 업데이트, 기능 추가가 용이해 졌다.
&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/service-architecture-4.png&#34; alt=&#34;Container&#34;&gt;&lt;/p&gt;
&lt;p&gt;이것만 보면 장점만 있는 것처럼 보이겠지만, 다른 한편으로 구조는 복잡해져서 관리는 더 어려워졌다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너의 기동이 번거롭다.&lt;/li&gt;
&lt;li&gt;컨테이너간 통신의 제어가 복잡하다.&lt;/li&gt;
&lt;li&gt;컨테이너의 데이터 지속성은 관리는 어떻게 해야 하는가?&lt;/li&gt;
&lt;li&gt;컨테이너가 장애가 발생하였거나, 정지가 되었을때 복구는 어떻게 해야 할 것인가?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런걸 불편한 점을 해결해 주는 것이 쿠버네티스이다. 이런 마이크로서비스 아키텍처에서 Kubernetes를 사용하게 되었을 때에 이점은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 호스트의 여러 컨테이너에 로드 밸런싱/워크로드를 분산할 수 있다.&lt;/li&gt;
&lt;li&gt;1개의 Pod(컨테이너)가 정지했을 경우에도 자동으로 회복할 수 있다.&lt;/li&gt;
&lt;li&gt;무정지 갱신(롤링, 업데이트)을 할 수 있다.&lt;/li&gt;
&lt;li&gt;어플리케이션 가동 중에 Scale-up, Scale-down을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-기능&#34;&gt;Kubernetes 기능&lt;/h2&gt;
&lt;p&gt;쿠버네트스의 기능을 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클러스터링(Clustering)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 시스템을 클러스터링하고 리소스 풀링 할 수 있다.&lt;/li&gt;
&lt;li&gt;클러스터를 구성하는 머신을 노드(Node)라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매니페스트(manifest)를 통한 선언적 자원 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션과 관련된 다양한 요소를 리소스로 관리한다.&lt;/li&gt;
&lt;li&gt;자원(resource)의 정의를 YAML로 기술한다.
&lt;ul&gt;
&lt;li&gt;이를 매니페스트라고 한다.&lt;/li&gt;
&lt;li&gt;자원의 조작이 아니라, 정의만을 기술한다. 그래서 선언적이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리소스 종류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너 : 단일 컨테이너. 직접 정의할 수 없다.&lt;/li&gt;
&lt;li&gt;Pod : 컨테이너를 통합 관리하는 것. VM과 같은 개념. 배포의 최소 단위.&lt;/li&gt;
&lt;li&gt;Deployment : Pod의 스케일링을 하는 것을 말한다.&lt;/li&gt;
&lt;li&gt;Service : 가상 라우터 및 로드 밸런서와 같은 것을 말한다.&lt;/li&gt;
&lt;li&gt;ConfigMap, Secret : 컨테이너 내의 설정 파일 등을 나타내는 것. Secret는 암호화된다.&lt;/li&gt;
&lt;li&gt;PersistentVolume : 지속성 볼륨. 호스트 디렉터리 및 NFS 공유 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선언적 자원 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리소스 정의가 등록되면 Kubernetes는 실제 리소스의 상태가 정의대로 작동한다.&lt;/li&gt;
&lt;li&gt;Pod의 컨테이너 이미지를 바꾸고 싶다면,
&lt;ul&gt;
&lt;li&gt;그렇기 위해서는, 오래된 컨테이너를 지우고, 새로운 컨테이너의 기동을 지시한다.&lt;/li&gt;
&lt;li&gt;그렇기 하기 힘들다면, 컨테이너 이미지 이름을 다시 작성된 Pod 정의로 덮어 쓴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상 플랫 네트워크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 Pod는 여러 노드 분포되어 배포되는데, 모든 Pod는 가상 네트워크의 동일한 세그먼트에 있다.&lt;/li&gt;
&lt;li&gt;가상 네트워크를 Kubernetes에서 Container간 통신을 하는 인터페이스는 CNI(Contaniner Network Interface)로 표준화되어 있다.&lt;/li&gt;
&lt;li&gt;다양한 종류의 플러그인 존재한다.
&lt;ul&gt;
&lt;li&gt;위브넷(Weave Net): VXLAN&lt;/li&gt;
&lt;li&gt;칼리코(calico): BGP&lt;/li&gt;
&lt;li&gt;플란넬(flannel)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상 네트워크 내 DNS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로드 밸런서의 기능을 하는 Service에는 DNS명이 붙는다.&lt;/li&gt;
&lt;li&gt;이 DNS 이름은 가상 네트워크 내의 DNS로 IP 주소로 해석할 수 있다.&lt;/li&gt;
&lt;li&gt;즉, Pod를 Service의 뒤에 위에하여, Pod에 DNS명으로 액세스 할 수 있다.
&lt;ul&gt;
&lt;li&gt;Pod의 IP 주소는 동적으로 흔들리기 때문에 Service 경로의 액세스가 기본이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자원의 논리적 분할(그룹화)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace라는 리소스로, Pod나 Service등의 리소스를 그룹핑할 수 있다.&lt;/li&gt;
&lt;li&gt;Namespace마다 액세스를 격리하거나 하는 것은 아니기 때문에, 관리 목적으로 사용하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너 생사 감시 및 오토 힐링(Auto Healing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너의 생사 감시를 정의할 수 있다.&lt;/li&gt;
&lt;li&gt;다음 중 하나를 주기적으로 수행하여 결과로 생사를 확인한다.
&lt;ul&gt;
&lt;li&gt;HTTP 폴링&lt;/li&gt;
&lt;li&gt;TCP 핑&lt;/li&gt;
&lt;li&gt;모든 명령&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너가 정지되었다고 판단되면, Kubernetes가 재기동해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그밖에&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 복제&lt;/li&gt;
&lt;li&gt;Pod 롤링 업데이트&lt;/li&gt;
&lt;li&gt;원샷 작업 (Job)&lt;/li&gt;
&lt;li&gt;정기 실행 태스크(CronJob)&lt;/li&gt;
&lt;li&gt;Pod당 네임스페이스당 리소스(CPU, 메모리) 제한&lt;/li&gt;
&lt;li&gt;가상 네트워크 액세스 정책(NetworkPolicy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/ko/docs/home/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;쿠버테티스 공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLApuRlvrZKohaBHvXAOhUD-RxD0uQ3z0c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;동영상 강좌 | [따배쿠] 쿠버네티스 시리즈&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bcho.tistory.com/1255?category=731548&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;쿠버네티스 #1 - 소개 | 조대협의 블로그&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>Kubernetes</category>
      
      <category>DevOps</category>
      
    </item>
    
    <item>
      <title>Kubernetes 아키텍처</title>
      <link>https://www.devkuma.com/docs/kubernetes/architecture/</link>
      <pubDate>Sun, 04 Sep 2022 12:54:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/kubernetes/architecture/</guid>
      <description>
        
        
        &lt;h2 id=&#34;아키텍처-이해&#34;&gt;아키텍처 이해&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/kubernetes-architecture-diagram.png&#34; alt=&#34;쿠버네티스 아키텍처 다이어그램&#34;&gt;&lt;br&gt;
&lt;em&gt;쿠버네티스 아키텍처 다이어그램 - 출처 : Wikipedia&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes를 배포하면 클러스터가 배포된다. 이 Kubernetes 클러스터는 컨테이너으로 된 애플리케이션을 실행하는 노드(Node)라고 하는 작업자 머신의 집합이다. 애플리케이션의 컴포넌트를 Pod라고 하며, 위에 다이어그램과 같이 이 Pod가 하나 이상의 노드에 포함되어 배포된다. 노드 제어는 &lt;code&gt;kubelet&lt;/code&gt;이라는 에이전트에서 수행되며, 노드에 대한 액세스는 &lt;code&gt;kube-proxy&lt;/code&gt;라는 프록시를 통해 이루어 진다.&lt;/p&gt;
&lt;p&gt;컨트롤 플레인(Control plane)이라는 구성 요소는 클러스터를 제어하는 ​​기능을 갖는다.&lt;/p&gt;
&lt;h2 id=&#34;kubernetes의-노드&#34;&gt;Kubernetes의 노드&lt;/h2&gt;
&lt;p&gt;Kubernetes에서는 클러스터 전체를 관리하는 컨트롤러로써 &lt;strong&gt;마스터 노드(Master Node)&lt;/strong&gt; 가 존재하고, 컨테이너가 배포되는 머신 (가상머신이나 물리적인 서버머신)인 &lt;strong&gt;워커 노드(Worker Node)&lt;/strong&gt; 가 존재한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/kubernetes-master-worker.png&#34; alt=&#34;마스터 노드와 워커 노드&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;마스터 노드(Master Node)&lt;/strong&gt; 라고 하는 Docker에서 말하는 Daemon과 같은 역할을 가진 노드에 클라이언트로부터 커멘드를 보내고, 그것을 받은 마스터 노드가 &lt;strong&gt;워커 노드(Worker Node)&lt;/strong&gt; 라고 하는 노드에 커멘드를 보내는 구조로 되어 있다.&lt;/p&gt;
&lt;p&gt;마스터 노드(Master node, Control plane)의 역할은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클러스터 제어&lt;/li&gt;
&lt;li&gt;워커 노드들의 상태를 관리하고 제어&lt;/li&gt;
&lt;li&gt;스케줄링, 라이프사이클 모니터링&lt;/li&gt;
&lt;li&gt;부하 분산, 자동 복구&lt;/li&gt;
&lt;li&gt;single master&lt;/li&gt;
&lt;li&gt;multi master(3, 5개의 master nodes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;워커 노드(Worker node)의 역할은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컨테이너가 실행되는 서버&lt;/li&gt;
&lt;li&gt;도커 플랫폼을 통해 컨테이너를 동작하며 실제 서비스 제공&lt;/li&gt;
&lt;li&gt;다중 노드로 클러스터 형성&lt;/li&gt;
&lt;li&gt;마스터 노드의 명령에 따라 Pod 생성, 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 구성 요소는 HTTPS를 통해 통신하여 클러스터를 형성한다.&lt;/p&gt;
&lt;p&gt;클라이언트는 실행 커멘드를 입력하는 것은 콘솔이지만, Kubernetes의 경우는 &lt;code&gt;kubectl&lt;/code&gt; 커멘드를 통하여 매니페스트(manifest)라고 하는 각종 설정을 작성한 파일을 생성하거나, 매니페스트 파일에 근거해 마스터 노드에 자원의 조작을 실행되도록 명령한다.&lt;/p&gt;
&lt;h2 id=&#34;컨트롤-플레인-컨포넌트-control-plane-component-마스터-컴포넌트&#34;&gt;컨트롤 플레인 컨포넌트 (Control plane component, 마스터 컴포넌트)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver
&lt;ul&gt;
&lt;li&gt;Kubernetes 자원 정의를 조작하기 위한 REST API 외부에 제공한다.&lt;/li&gt;
&lt;li&gt;Kubernetes 컨트롤 플레인의 프런트 엔드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;etcd
&lt;ul&gt;
&lt;li&gt;kube-apiserver가 자원 정의 등을 저장하는 DB이다.&lt;/li&gt;
&lt;li&gt;분산 DB이므로 보통을 클러스터로 구성한다.&lt;/li&gt;
&lt;li&gt;일관성, 고가용성을 가진 Key-value 저장소&lt;/li&gt;
&lt;li&gt;Kubernetes의 모든 클러스터 정보의 저장소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kube-scheduler
&lt;ul&gt;
&lt;li&gt;Pod에 노드가 할당되어 있는지 확인하고 할당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kube-controller-manager
&lt;ul&gt;
&lt;li&gt;kube-apiserver의 API를 사용하여 Pod 정의 작성을 모니터링하여 Pod를 배포할 위치를 결정한다.&lt;/li&gt;
&lt;li&gt;알림 및 포드 수를 모니터링하는 여러 컨트롤러 프로세스 실행한다.&lt;/li&gt;
&lt;li&gt;Pod를 관찰하며 개수를 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cloud-controller-manager
&lt;ul&gt;
&lt;li&gt;kube-apiserver의 API에서 다양한 리소스 정의를 모니터링하여 실제 리소스의 상태를 정의와 동일하게 만든다.&lt;/li&gt;
&lt;li&gt;기반인 클라우드 제공업체와 상호작용하는 컨트롤러 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;워커-노드-컴포넌트&#34;&gt;워커 노드 컴포넌트&lt;/h2&gt;
&lt;p&gt;워커 노드 컴포넌트는 Pod나 컨테이너를 관리 및 모니터링한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubelet
&lt;ul&gt;
&lt;li&gt;클러스터의 각 노드에서 실행되는 에이전트.&lt;/li&gt;
&lt;li&gt;kube-apiserver의 API로 Pod 정의를 감시하고, 컨테이너의 기동 및 정지를 하기 위해서 Docker과 연결된다.&lt;/li&gt;
&lt;li&gt;kube-apiserver로부터의 API 호출을 받는 HTTPS 포트를 가지고 있어 컨테이너의 로그를 반환하기도 한다.&lt;/li&gt;
&lt;li&gt;각 컨테이너가 Pod에서 실행 중임을 보장한다.&lt;/li&gt;
&lt;li&gt;데몬 형태로 동작&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kube-proxy
&lt;ul&gt;
&lt;li&gt;클러스터의 각 노드에서 실행되는 네트워크 프록시&lt;/li&gt;
&lt;li&gt;kube-apiserver의 API에서 Service 정의를 감시하고, 호스트 OS에 대해 Service에 통신을 전송하는 설정을 한다.&lt;/li&gt;
&lt;li&gt;iptables rule을 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 런타임
&lt;ul&gt;
&lt;li&gt;컨테이너의 실하는 엔진&lt;/li&gt;
&lt;li&gt;docker, containerd, runc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;쿠버네티스-클러스터를-직업-구성하는-도구&#34;&gt;쿠버네티스 클러스터를 직업 구성하는 도구&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kubeadm
&lt;ul&gt;
&lt;li&gt;쿠버네티스에서 공식 제공하는 클러스터 생성/관리 도구&lt;/li&gt;
&lt;li&gt;쿠버네티스 공식 설치 도구 (Kubernetes admin)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kubespray
&lt;ul&gt;
&lt;li&gt;쿠버네티스 클러스터를 배포하는 오픈 프로젝트&lt;/li&gt;
&lt;li&gt;다양한 형식으로 쿠버네티스 클러스터 구성 가능&lt;/li&gt;
&lt;li&gt;온프레미스에서 사용 서비스 클러스터 운영시 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;오브젝트&#34;&gt;오브젝트&lt;/h2&gt;
&lt;p&gt;쿠버네티스를 이해하기 위해서 가장 중요한 부분이 오브젝트이다. 가장 기본적인 구성 단위가 되는 기본 오브젝트(Basic object)와, 이 기본 오브젝트(Basic object) 를 생성하고 관리하는 추가적인 기능을 가진 컨트롤러(Controller) 로 이루어진다. 그리고 이러한 오브젝트의 스펙(설정)이외에 추가정보인 메타 정보들로 구성이 된다고 보면 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running app on Kubernetes&lt;/strong&gt;&lt;br&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/running-app-on-kubernetes-image-20200923101415547.png&#34; alt=&#34;Running app on Kubernetes&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;오브젝트-스펙-object-spec&#34;&gt;오브젝트 스펙 (Object Spec)&lt;/h3&gt;
&lt;p&gt;오브젝트들은 모두 오브젝트의 특성(설정 정보)을 기술한 오브젝트 스펙(Object Spec)으로 정의가 되고, 커맨드 라인을 통해서 오브젝트 생성시 인자로 전달하여 정의를 하거나 또는 yaml이나 json 파일로 스펙을 정의할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;기본-오브젝트-basic-object&#34;&gt;기본 오브젝트 (Basic Object)&lt;/h3&gt;
&lt;p&gt;쿠버네티스에 의해서 배포 및 관리되는 가장 기본적인 오브젝트는 컨테이너화되어 배포되는 애플리케이션의 워크로드를 기술하는 오브젝트로 Pod, Service, Volume, Namespace 4가지가 있다. 간단하게 설명 하자면 Pod는 컨테이너화된 애플리케이션, Volume은 디스크, Service는 로드밸런서 그리고 Namespace는 패키지명 정도로 생각하면 된다. 그러면 각각을 자세하게 살펴보도록 하자.&lt;/p&gt;
&lt;h3 id=&#34;라벨&#34;&gt;라벨&lt;/h3&gt;
&lt;p&gt;&amp;hellip; 작성중 &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;컨트롤러&#34;&gt;컨트롤러&lt;/h3&gt;
&lt;p&gt;&amp;hellip; 작성중 &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;애드온&#34;&gt;애드온&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 애드온
&lt;ul&gt;
&lt;li&gt;CNI - weave, calico, faneld, kube-route &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dns 애드온
&lt;ul&gt;
&lt;li&gt;coreDNS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대시보드 애드온&lt;/li&gt;
&lt;li&gt;컨테이너 자원 모니터링
&lt;ul&gt;
&lt;li&gt;cAdvisor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클러스티 로깅
&lt;ul&gt;
&lt;li&gt;컨테이너 로그, k8s 운영 로그들을 수집해서 중앙화&lt;/li&gt;
&lt;li&gt;ELK(ElasticSeach, Logstash, Kibana), EFK(ElasticSeach, Fluented, Kibana), DataDog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;쿠버네티스 | Wikipedia&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bcho.tistory.com/1256?category=731548&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;쿠버네티스 #2 개념 이해 (1/2) | 조대엽의 블로그&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>Kubernetes</category>
      
      <category>DevOps</category>
      
    </item>
    
    <item>
      <title>Kubernetes 로컬 개발 환경 만들기 - minikube 설치 및 사용</title>
      <link>https://www.devkuma.com/docs/kubernetes/minikube/</link>
      <pubDate>Wed, 07 Sep 2022 14:03:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/kubernetes/minikube/</guid>
      <description>
        
        
        &lt;h2 id=&#34;로컬-개발-환경-만들기-어플리케이션-동작시키기&#34;&gt;로컬 개발 환경 만들기, 어플리케이션 동작시키기&lt;/h2&gt;
&lt;p&gt;이번에는 웹 어플리케이션의 컨테이너를 로컬 Kubernetes에 세우는 것을 목표로 한다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;참고로, 여기서는 macOS 중심으로 설치를 진행하였다. 환경이 달라 방법이 다를 수 있으니 참고 바란다.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;minikube-설치-및-사용&#34;&gt;Minikube 설치 및 사용&lt;/h2&gt;
&lt;p&gt;이번에는 Minikube라는 로컬 환경에서 Kubernetes를 쉽게 실행할 수 있는 도구를 사용한다. 이 도구를 사용하면 단일 노드 Kubernetes 클러스터를 만들 수 있다.&lt;br&gt;
Minikube의 사용법은 &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/#specifying-the-vm-driver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;
&lt;h3 id=&#34;설치-전-사전-준비&#34;&gt;설치 전 사전 준비&lt;/h3&gt;
&lt;h4 id=&#34;docker-설치&#34;&gt;docker 설치&lt;/h4&gt;
&lt;p&gt;minikube 설치 전에 Docker를 반드시 설치하여 사용하는 것이 좋다.&lt;/p&gt;
&lt;h4 id=&#34;kubectl-설치&#34;&gt;kubectl 설치&lt;/h4&gt;
&lt;p&gt;kubectl은 Kubernetes의 Cluster와 통신하여 다양한 Object들의 상태 확인 또는 CRUD 작업 등을 위해 사용되는 CLI 도구이다.&lt;br&gt;
minikube 설치를 하고 Kubernetes Cluster와의 작업을 위해 필요하다.&lt;/p&gt;
&lt;p&gt;여기서는 macOS에서 Homebrew를 사용하여 설치할 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install kubectl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다른 시스템에서는 &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;를 참고하면서 진행한다.&lt;/p&gt;
&lt;h3 id=&#34;minikube-macos에-설치&#34;&gt;Minikube macOS에 설치&lt;/h3&gt;
&lt;p&gt;여기에서는 Homebrew를 사용해서 설치를 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% brew install minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Running &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;brew update --auto-update&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Auto-updated Homebrew!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Updated &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; tap &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;homebrew/core&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; New Formulae
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agg            echidna        kalign         libplacebo     shaderc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c              gator          kubesess       licenseplist   taplo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;distrobox      hof            libff          popeye         vineyard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You have &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; outdated formulae installed.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can upgrade them with brew upgrade
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;or list them with brew outdated.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Downloading https://ghcr.io/v2/homebrew/core/kubernetes-cli/manifests/1.25.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... 중간 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Summary
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🍺  /opt/homebrew/Cellar/minikube/1.26.1: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt; files, 70.6MB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; Running &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;brew cleanup minikube&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hide these hints with HOMEBREW_NO_ENV_HINTS &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;see &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;man brew&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#000&#34;&gt;Caveats&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt;&amp;gt; minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zsh completions have been installed to:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  /opt/homebrew/share/zsh/site-functions
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;minikube-사용하기&#34;&gt;Minikube 사용하기&lt;/h3&gt;
&lt;h4 id=&#34;minikube-cluster-시작&#34;&gt;Minikube cluster 시작&lt;/h4&gt;
&lt;p&gt;설치가 성공했는지 아래의 Kubernetes 클러스터를 시작하는 명령으로 확인하면 된다.&lt;/p&gt;
&lt;p&gt;아래와 같이 쿠버네티스 버전을 입력해서 기동하는 방법이 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube start --kubernetes-version &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;기동하려는 버전&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래와 같이 지정하지 않으면 신규 버전이 기동된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% minikube start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;😄  Darwin 12.5.1 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;arm64&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 의 minikube v1.26.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🆕  이제 1.24.3 버전의 쿠버네티스를 사용할 수 있습니다. 업그레이드를 원하신다면 다음과 같이 지정하세요: --kubernetes-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1.24.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✨  기존 프로필에 기반하여 docker 드라이버를 사용하는 중
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;👍  minikube 클러스터의 minikube 컨트롤 플레인 노드를 시작하는 중
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🚜  베이스 이미지를 다운받는 중 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; gcr.io/k8s-minikube/kicbase:  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; B &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;______________________&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; ?% ? p/s 1m11s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🔥  Creating docker container &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CPUs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;2, &lt;span style=&#34;color:#000&#34;&gt;Memory&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;4000MB&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubectl.sha1:  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B / &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;---------------------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% ? p/s 0s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubeadm.sha1:  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B / &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;---------------------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% ? p/s 0s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubelet.sha1:  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B / &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41&lt;/span&gt; B &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;---------------------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% ? p/s 0s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubectl:  42.64 MiB / 42.64 MiB &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% 4.04 MiB p/s 11s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubeadm:  40.36 MiB / 40.36 MiB &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;--------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% 2.69 MiB p/s 15s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;gt; kubelet:  111.81 MiB / 111.81 MiB &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;------------&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; 100.00% 6.37 MiB p/s 18s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ▪ 인증서 및 키를 생성하는 중 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ▪ 컨트롤 플레인이 부팅...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;💢  initialization failed, will try again: wait: /bin/bash -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sudo env PATH=&amp;#34;&lt;/span&gt;/var/lib/minikube/binaries/v1.16.1:&lt;span style=&#34;color:#000&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables&amp;#34;&lt;/span&gt;: Process exited with status &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stdout:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;init&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Using Kubernetes version: v1.16.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Running pre-flight checks
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... 중간 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stderr:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;WARNING Swap&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: running with swap on is not supported. Please disable swap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;WARNING SystemVerification&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: this Docker version is not on the list of validated versions: 20.10.17. Latest validated version: 18.09
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;WARNING Service-Kubelet&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;: kubelet service is not enabled, please run &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;systemctl enable kubelet.service&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error execution phase wait-control-plane: couldn&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t initialize a Kubernetes cluster
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;To see the stack trace of this error execute with --v=5 or higher
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;💡  권장: Check output of &amp;#39;&lt;/span&gt;journalctl -xeu kubelet&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;, try passing --extra-config&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;kubelet.cgroup-driver&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;systemd to minikube start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🍿  관련 이슈: https://github.com/kubernetes/minikube/issues/4172
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minikube-cluster-시작-후에-확인&#34;&gt;Minikube cluster 시작 후에 확인&lt;/h4&gt;
&lt;p&gt;minikube는 Docker image를 다운받고 실행하여, Kubernetes Cluster를 생성하고, &lt;code&gt;kubectl&lt;/code&gt;과의 연결을 위해 &lt;code&gt;~/.kube/config&lt;/code&gt; 파일 설정까지 완료해 준다.
하나씩 살펴보도록 하자.&lt;/p&gt;
&lt;p&gt;minikube 시작 시 download 되는 docker image는 아래와 같이 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% docker images
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcr.io/k8s-minikube/kicbase   v0.0.33   f7ba2bce4549   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; weeks ago    1.06GB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다운받은 docker image로 minikube container를 실행하여 kubernetes cluster 생성된 것을 확인 할수 잇다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER ID   IMAGE                                 COMMAND                  CREATED             STATUS             PORTS                                                                                                                        NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d9391f64eba5   gcr.io/k8s-minikube/kicbase:v0.0.33   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr...&amp;#34;&lt;/span&gt;   About an hour ago   Up About an hour   0.0.0.0:49463-&amp;gt;22/tcp, 0.0.0.0:49464-&amp;gt;2376/tcp, 0.0.0.0:49466-&amp;gt;5000/tcp, 0.0.0.0:49467-&amp;gt;8443/tcp, 0.0.0.0:49465-&amp;gt;32443/tcp   minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kubernetes Cluster와 Kubectl의 연결을 위한 정보가 담긴 config 파일 생성되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% cat ~/.kube/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clusters:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- cluster:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    certificate-authority: /Users/user/.minikube/ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extensions:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - extension:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        last-update: Wed, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt; Sep &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2022&lt;/span&gt; 11:56:39 KST
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        provider: minikube.sigs.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        version: v1.26.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name: cluster_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    server: https://127.0.0.1:50472
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;contexts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- context:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cluster: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current-context: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kind: Config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;preferences: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;users:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- name: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client-certificate: /Users/user/.minikube/profiles/minikube/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client-key: /Users/user/.minikube/profiles/minikube/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minikube-cluster-상태-확인&#34;&gt;Minikube cluster 상태 확인&lt;/h4&gt;
&lt;p&gt;클러스터에 상태 확인하는 명령어는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% minikube status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type: Control Plane
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;host: Running
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubelet: Stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiserver: Stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeconfig: Configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minikube-cluster-일시정지재가동&#34;&gt;Minikube cluster 일시정지/재가동&lt;/h4&gt;
&lt;p&gt;kubernetes cluster를 일시정지하는 명령어는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube pause
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;일시정지 후에는 kubectl을 통한 Cluster의 접근이나 추가적인 명령어는 timeout이 발생하며 사용이 불가능하다.&lt;br&gt;
단, 이미 배포된 application에는 영향을 미치지 않기 때문에 계속 동작한다.&lt;/p&gt;
&lt;p&gt;일시정지 상태에서 다시 Cluster를 재가동 하고자 할때는 아래와 같은 명령어를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube unpause
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minikube-cluster-종료&#34;&gt;Minikube cluster 종료&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube stop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% minikube stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;✋  Stopping node &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🛑  Powering off &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; via SSH ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🛑  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; node stopped.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;minikube-cluster-삭제&#34;&gt;Minikube cluster 삭제&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube delete
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;모든 내용 삭제하는 초기화 명령은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% minikube delete --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🔥  docker 의 &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; 를 삭제하는 중 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🔥  /Users/user/.minikube/machines/minikube 제거 중 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;💀  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; 클러스터 관련 정보가 모두 삭제되었습니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;🔥  모든 프로필이 성공적으로 삭제되었습니다
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kubernetes로-웹-서버-설정하여-기동하기&#34;&gt;Kubernetes로 웹 서버 설정하여 기동하기&lt;/h2&gt;
&lt;p&gt;minikube를 설치하였으니, Kubernetes 환경을 만들고 컨테이너를 실행해 보도록 하자.&lt;/p&gt;
&lt;p&gt;웹 서버는 Minikube에 해당하는 간단한 응답만 반환하는 echo-server를 사용하도록 하겠다.&lt;/p&gt;
&lt;h3 id=&#34;minikube-클러스터-생성&#34;&gt;minikube 클러스터 생성&lt;/h3&gt;
&lt;p&gt;그럼 minikube를 기동하여 클러스터를 생성한다. 이미 기동이 되어 있다면 다시 기동하지 않아도 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때 도커 컨테이너의 기동되어 상태를 확인 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER ID   IMAGE                                 COMMAND                  CREATED              STATUS              PORTS                                                                                                                        NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;39b6898f6256   gcr.io/k8s-minikube/kicbase:v0.0.33   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr...&amp;#34;&lt;/span&gt;   About a minute ago   Up About a minute   0.0.0.0:51435-&amp;gt;22/tcp, 0.0.0.0:51436-&amp;gt;2376/tcp, 0.0.0.0:51438-&amp;gt;5000/tcp, 0.0.0.0:51439-&amp;gt;8443/tcp, 0.0.0.0:51437-&amp;gt;32443/tcp   minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;minikube의 컨테이너가 동작하고 있는 것을 확인 할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;kubectl-사용하여-생성-배포&#34;&gt;kubectl 사용하여 생성 배포&lt;/h3&gt;
&lt;p&gt;다음 kubectl에서 Kubernetes Deployment라는 것을 만든다. 이 Kubernetes Deployment 객체를 작성하는 것으로 어플리케이션을 실행할 수 있게 되었다. 이것은 YAML 파일로 작성할 수 있다. 이것 자체는 서비스라고 하는 것보다, Pod를 만들기 위한 Deployment의 앱인 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl create deployment hello-minikube --image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;k8s.gcr.io/echoserver:1.10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/hello-minikube created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;혹시, M1 맥북이라면 &amp;ldquo;echoserver:1.10&amp;quot;가 아닌 &amp;ldquo;echoserver-arm:1.8&amp;quot;를 사용해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create deploy hello-minikube --image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;k8s.gcr.io/echoserver-arm:1.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생성된 hello-minikube Deployment를 사용하여 서비스로 노출시킨다. 여기가 실제 앱과 거의 동등한 것 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl expose deployment hello-minikube --type&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;NodePort --port&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service/hello-minikube exposed
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pod에-배포된-생성-컨테이너-확인&#34;&gt;Pod에 배포된 생성 컨테이너 확인&lt;/h3&gt;
&lt;p&gt;이 시점에서 docker 컨테이너의 작동 상태를 확인해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER ID   IMAGE                                 COMMAND                  CREATED         STATUS         PORTS                                                                                                                        NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;24733d0fd443   gcr.io/k8s-minikube/kicbase:v0.0.33   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; minutes   0.0.0.0:54248-&amp;gt;22/tcp, 0.0.0.0:54249-&amp;gt;2376/tcp, 0.0.0.0:54251-&amp;gt;5000/tcp, 0.0.0.0:54247-&amp;gt;8443/tcp, 0.0.0.0:54250-&amp;gt;32443/tcp   minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;분명히 hello-minikube라는 컨테이너는 별도로 움직이지 않았으며, minikube의 컨테이너 위에 동작하는거 같다. 아마도 이 minikube 컨테이너 자체에 kubernetes의 단일 노드와 Pod, Deployment가 만들어진 것 같다.&lt;/p&gt;
&lt;p&gt;그럼 Pod에 생겼는지 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                              READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello-minikube-5d44b6b577-l99jz   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          4m59s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;STATUS가 Running이 되어 있고, 기동하고 있는 것을 확인할 수 있다. 또 &amp;ldquo;1/1&amp;quot;이라는 것으로 부터 Pod의 수는 1개라는 것도 알 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;서비스-동작-확인&#34;&gt;서비스 동작 확인&lt;/h3&gt;
&lt;p&gt;서비스 URL은 아래와 같이 명령어로 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% minikube service hello-minikube --url
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http://127.0.0.1:54612
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;브라우저에서 확인해 보면, 어플리케이션이 실행 중인 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/kubernetes/echoserver.png&#34; alt=&#34;echoserver&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;삭제&#34;&gt;삭제&lt;/h3&gt;
&lt;p&gt;다음은 삭제 절차이다.&lt;/p&gt;
&lt;p&gt;서비스 삭제는 아래와 같은 명령어로 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl delete services hello-minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello-minikube&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hello-minikube Deployment 삭제는 아래와 같은 명령어로 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl delete deployment hello-minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello-minikube&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;부록-컨테이너-안을-들여다-보기&#34;&gt;부록: 컨테이너 안을 들여다 보기&lt;/h2&gt;
&lt;p&gt;공식 문서에 있던 로컬 개발 환경을 만드는 튜토리얼은 이 정도로 끝이지만, 컨테이너 안을 들여다 보려고 한다.&lt;/p&gt;
&lt;p&gt;아래 명령으로 minikube에 들어가 본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% docker &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -itu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; minikube /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;컨테이너에 들어가면 루트 디렉터리에 들어가서 뭐가 있는지, 루트 디렉터리에서 &lt;code&gt;ll&lt;/code&gt; 명령어를 실행해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/# ll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 ./
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 ../
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 .dockerenv*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r--   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1093&lt;/span&gt; Jul &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;29&lt;/span&gt; 17:41 Release.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 bin -&amp;gt; usr/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Apr &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt; boot/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 data/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2820&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 dev/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r--   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3817&lt;/span&gt; Jul &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;29&lt;/span&gt; 17:36 docker.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 etc/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Jul &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;29&lt;/span&gt; 17:43 home/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r--   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;96&lt;/span&gt; Jul &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;29&lt;/span&gt; 17:43 kic.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 kind/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 lib -&amp;gt; usr/lib/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 media/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 mnt/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 opt/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dr-xr-xr-x &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;231&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 proc/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwx------   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 root/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;13&lt;/span&gt; root root  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;360&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 run/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 sbin -&amp;gt; usr/sbin/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; May &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt; 15:55 srv/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dr-xr-xr-x  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;13&lt;/span&gt; root root    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 sys/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxrwxrwt   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; root root  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;140&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 tmp/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Jul &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;29&lt;/span&gt; 17:37 usr/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;14&lt;/span&gt; root root &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; 06:33 var/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;top&lt;/code&gt; 명령어로 프로세스도 확인해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/# top
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top - 07:23:51 up 18:40,  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; users,  load average: 0.69, 0.44, 0.37
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tasks:  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;38&lt;/span&gt; total,   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; running,  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;37&lt;/span&gt; sleeping,   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; stopped,   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; zombie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%Cpu&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;:  2.5 us,  2.7 sy,  0.0 ni, 94.6 id,  0.1 wa,  0.0 hi,  0.1 si,  0.0 st
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MiB Mem :   7851.4 total,   1617.5 free,    972.4 used,   5261.4 buff/cache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MiB Swap:   1024.0 total,   1024.0 free,      0.0 used.   6346.6 avail Mem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1855&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1998680&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100428&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64300&lt;/span&gt; S   7.6   1.2   3:17.60 kubelet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1675&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1171496&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;360280&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;72324&lt;/span&gt; S   7.3   4.5   5:20.97 kube-apiserver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;588&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2028192&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;91008&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;44340&lt;/span&gt; S   5.3   1.1   1:24.24 dockerd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;106&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1565148&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;57832&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31212&lt;/span&gt; S   3.7   0.7   1:02.06 containerd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;760&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;740472&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;40728&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24740&lt;/span&gt; S   3.7   0.5   1:13.45 cri-dockerd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1615&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;815700&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;99604&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;61428&lt;/span&gt; S   3.7   1.2   2:37.76 kube-controller
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1662&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;   10.7g  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50516&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20972&lt;/span&gt; S   3.3   0.6   2:20.11 etcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1669&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;751044&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;47684&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;34416&lt;/span&gt; S   1.0   0.6   0:21.92 kube-scheduler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1586&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;712636&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10432&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7852&lt;/span&gt; S   0.7   0.1   0:02.20 containerd-shim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1549&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;712636&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9956&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7340&lt;/span&gt; S   0.3   0.1   0:02.04 containerd-shim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1583&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;712380&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10312&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7596&lt;/span&gt; S   0.3   0.1   0:02.08 containerd-shim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1634&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;712380&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10328&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7404&lt;/span&gt; S   0.3   0.1   0:02.10 containerd-shim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2162&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;712636&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10304&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7532&lt;/span&gt; S   0.3   0.1   0:03.02 containerd-shim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2182&lt;/span&gt; root      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;750988&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;44096&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;32876&lt;/span&gt; S   0.3   0.5   0:15.10 coredns
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ... 이하 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;콘솔 내용을 보면 상위에 &lt;code&gt;kubelet&lt;/code&gt;과 &lt;code&gt;kube-apiserver&lt;/code&gt;의 프로세스가 실행되고 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-apiserver&lt;/code&gt;는 개발자로부터의 작업을 수락하는 API를 제공하며, &lt;code&gt;kubelet&lt;/code&gt;은 에이전트로 각 노드(이번에는 단일 노드)에 있으며, Pod 실행을 보장한다.&lt;br&gt;
&lt;code&gt;containered*&lt;/code&gt;로 작성된 많은 프로세스가 있는데, 여러 컨테이너가 올라가 있음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이제 또 &lt;code&gt;docker ps&lt;/code&gt; 명령어로 실행되고 있느 도커 컨테이너 목록 조회해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/# docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS     NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;20094df9033f   ba04bb24b957           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/storage-provisioner&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_storage-provisioner_storage-provisioner_kube-system_514497a4-deaf-4755-a600-73f796f6be9e_1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a9368295b1f7   7a75aeb869dc           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/kube...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_kube-proxy_kube-proxy-52hmm_kube-system_d0ed4ddc-0ccc-4f06-aeb9-cc18d5184e77_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9b1f9ed7a6c1   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_kube-proxy-52hmm_kube-system_d0ed4ddc-0ccc-4f06-aeb9-cc18d5184e77_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a7bd350916bd   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_storage-provisioner_kube-system_514497a4-deaf-4755-a600-73f796f6be9e_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d96748e31b07   edaa71f2aee8           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/coredns -conf /etc...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_coredns_coredns-6d4b75cb6d-8kr7r_kube-system_9c240144-c6cc-4d22-984b-3ea3c0756ea2_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;15ad9748eb82   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_coredns-6d4b75cb6d-8kr7r_kube-system_9c240144-c6cc-4d22-984b-3ea3c0756ea2_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8ffe4e9bf3b5   531fdfc5fea6           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kube-apiserver --ad...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_kube-apiserver_kube-apiserver-minikube_kube-system_af8a252bb89a737e9c95199d01283487_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ff7b78b958a0   8f1507b1a173           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kube-scheduler --au...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_kube-scheduler_kube-scheduler-minikube_kube-system_2e95d5efbc70e877d20097c03ba4ff89_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d7366714e112   a9a710bb96df           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;etcd --advertise-cl...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_etcd_etcd-minikube_kube-system_906edd533192a4db2396a938662a5271_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2beb89ca5127   f98535efcd55           &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kube-controller-man...&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_kube-controller-manager_kube-controller-manager-minikube_kube-system_76444121a189d8a30add20fb32ab6d4e_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;24a244ecac48   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_etcd-minikube_kube-system_906edd533192a4db2396a938662a5271_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5ee0a82c5478   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_kube-controller-manager-minikube_kube-system_76444121a189d8a30add20fb32ab6d4e_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bea7e607e058   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_kube-apiserver-minikube_kube-system_af8a252bb89a737e9c95199d01283487_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c126a82b0d93   k8s.gcr.io/pause:3.6   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/pause&amp;#34;&lt;/span&gt;                 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes ago   Up &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;59&lt;/span&gt; minutes             k8s_POD_kube-scheduler-minikube_kube-system_2e95d5efbc70e877d20097c03ba4ff89_0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@minikube:/#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;컨테이너 내에서 컨테이너의 가동을 처음해 봤는데, 이것으로 echoserver의 이미지를 사용한 컨테이너가 움직이고 있는 것을 알았다.&lt;/p&gt;
&lt;p&gt;가설이지만 &lt;code&gt;NAMES&lt;/code&gt;를 보면, &lt;code&gt;POD&lt;/code&gt;라는 문자가 쓰여 있는 컨테이너가 있고, Pod를 컨테이너로 표현하고 있는 것으로 생각된다.&lt;br&gt;
&lt;code&gt;kube-proxy&lt;/code&gt;의 컨테이너도 있는 것 같고, 이 녀석이 Service의 프록시로서 움직이고 있는 것 같다.&lt;/p&gt;
&lt;p&gt;이번은 여기까지 이지만, 다음번은 좀 더 Kubernetes의 아키텍처와 설정을 바꾸어 가면서 어떻게 동작하는지 보도록 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/ko/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minikube&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inflearn.com/chats/624565&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;M1 맥북에서 minikube에 echoserver 실행 실패시 echoserver-arm 사용 - 인프런 | 자유주제&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>Kubernetes</category>
      
      <category>DevOps</category>
      
    </item>
    
    <item>
      <title>Kubernetes namespace</title>
      <link>https://www.devkuma.com/docs/kubernetes/namespace/</link>
      <pubDate>Sat, 10 Sep 2022 09:16:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/kubernetes/namespace/</guid>
      <description>
        
        
        &lt;h2 id=&#34;namespace&#34;&gt;Namespace&lt;/h2&gt;
&lt;p&gt;namespace는 k8s 자원에 대한 영역으로 클러스터 하나를 여러 개의 논리적인 단위로 나눠서 사용하며, 권한과 정책을 cluster의 하위 section에 적용하는 메커니즘 제공한다.
즉, 자원을 그룹화해 관리할 수 있는 기회 제공한다.&lt;/p&gt;
&lt;h2 id=&#34;namespace-사용&#34;&gt;namespace 사용&lt;/h2&gt;
&lt;p&gt;namespace는 용도에 따라 실행해야 하는 앱을 구분할 때 사용한다.&lt;/p&gt;
&lt;p&gt;정리하자면 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클러스터 하나를 여러 팀이나 사용자가 함께 공유 영역 구분&lt;/li&gt;
&lt;li&gt;개발 환경, 테스트 환경, 운영 환경 같은 소프트웨어 환경 구분&lt;/li&gt;
&lt;li&gt;인프라팀이 볼 수 있는 구역과 개발팀이 볼 수 있는 구역 구분
&lt;ul&gt;
&lt;li&gt;권한의 boundary&lt;/li&gt;
&lt;li&gt;자원의 boundary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네임스테이스-사용하기&#34;&gt;네임스테이스 사용하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;namespace 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create namespace blue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;yaml
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create namespace green --dry-run&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;client -o yaml &amp;gt; green-ns.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create -f greem-ns.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;namespace 관리&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl delete namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;namespaces-조회&#34;&gt;namespaces 조회&lt;/h3&gt;
&lt;p&gt;등록된 namespaces 조회는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;처음 설치하고 바로 namespaces 목록을 조회해 보면 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME              STATUS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default           Active   5m30s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-node-lease   Active   5m31s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-public       Active   5m31s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system       Active   5m31s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기본으로 네이스페이스는 4개가 존재한다.&lt;/p&gt;
&lt;h4 id=&#34;cluster-생성-시-다음의-기본적인-namespace-사용&#34;&gt;Cluster 생성 시 다음의 기본적인 namespace 사용&lt;/h4&gt;
&lt;p&gt;default&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 namespace가 없는 object를 위한 기본 namespace&lt;/li&gt;
&lt;li&gt;container, pod, service, replicaset 등의 자원에 대한 영역을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kube-system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes system에서 생성한 object를 위한 namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kube-public&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자동으로 생성되며 모든 사용자 (인증되지 않은 사용자 포함)가 읽기 권한으로 접근할 수 있다&lt;/li&gt;
&lt;li&gt;주로 전체 cluster 중에 공개적으로 드러나서 읽을 수 있는 resource를 위해 예약되어 있다&lt;/li&gt;
&lt;li&gt;공개적인 성격은 단지 관례이지 요구사항은 아니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;default-namespace&#34;&gt;default namespace&lt;/h3&gt;
&lt;p&gt;아무 것도 없는 상태에서 Pod를 조회해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No resources found in default namespace.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 내용을 보면 default namespace에 없다는 것으로 보와, namespace를 지정하지 않으면 default를 기본으로 사용하고 있다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;아래 명령는 다 동일한 동작을 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl get pod
kubectl get pod --namespace default
kubectl get pod -n default
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;특정-namespace에서-pod-조회&#34;&gt;특정 namespace에서 Pod 조회&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods -n &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;조회할 네이스테이스명&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래 명령을 &lt;code&gt;kube-system&lt;/code&gt; namespace에 있는 Pod를 조회한 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pods -n kube-system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                               READY   STATUS    RESTARTS        AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;coredns-6d4b75cb6d-7shzf           1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m13s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd-minikube                      1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m28s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-apiserver-minikube            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m26s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-controller-manager-minikube   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m26s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-proxy-dbd6p                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m13s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-scheduler-minikube            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;               6m26s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;모든-namespace에서-pod-조회&#34;&gt;모든 namespace에서 Pod 조회&lt;/h3&gt;
&lt;p&gt;모든 namespace에서 Pod 조회 명령은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods --all-namespaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실제 실행해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pods --all-namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   coredns-6d4b75cb6d-7shzf           1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             10m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   etcd-minikube                      1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             11m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   kube-apiserver-minikube            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             11m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   kube-controller-manager-minikube   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             11m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   kube-proxy-dbd6p                   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             10m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   kube-scheduler-minikube            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;             11m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   storage-provisioner                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;10m ago&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;   11m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;여기에서는 &lt;code&gt;kube-system&lt;/code&gt; 밖에 없는데, 이는 따로 Pod를 생성하지 않았기 때문이다.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;namespace-생성하기&#34;&gt;namespace 생성하기&lt;/h3&gt;
&lt;h4 id=&#34;cli로-namespace-생성하기&#34;&gt;CLI로 namespace 생성하기&lt;/h4&gt;
&lt;p&gt;-CLI에서 namespace를 생성하는 명령은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create namespace &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;생성할 네이스페이스명&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실제 &lt;code&gt;blue&lt;/code&gt;라는 네이스페이스를 생성해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% kubectl create namespace blue
namespace/blue created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성되었는지 확인 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME              STATUS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blue              Active   10s &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt;&amp;lt; 생성된 blue namespace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;default           Active   27m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-node-lease   Active   27m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-public       Active   27m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system       Active   27m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;yaml로-namespace-생성하기&#34;&gt;yaml로 namespace 생성하기&lt;/h4&gt;
&lt;p&gt;yaml로 namespace를 생성해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create namespace [생성할 네이스페이스명] --dry-run=client -o yaml
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% kubectl create namespace green --dry-run=client -o yaml
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: green
spec: {}
status: {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;green-ns.yaml&lt;/code&gt; 파일로 생성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl create namespace green --dry-run -o yaml &amp;gt; green-ns.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;green-ns.yaml를 필요한 것만 남겨 두기 위해 아래와 같이 수정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kind: Namespace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: green
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생성한 &lt;code&gt;green-ns.yaml&lt;/code&gt;로 namespace를 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% kubectl create -f green-ns.yaml
namespace/green created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성되었는지 확인 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% kubectl get namespaces
NAME              STATUS   AGE
blue              Active   11m
default           Active   27m
green             Active   43s &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 생성된 green namespace
kube-node-lease   Active   27m
kube-public       Active   27m
kube-system       Active   27m
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;특정-namespace에-pod-생성하기&#34;&gt;특정 namespace에 Pod 생성하기&lt;/h3&gt;
&lt;h4 id=&#34;특정-namespace에-cli에서-pod-생성하기&#34;&gt;특정 namespace에 CLI에서 Pod 생성하기&lt;/h4&gt;
&lt;p&gt;아래 명령어로 namespace 플래그(&lt;code&gt;--namespace&lt;/code&gt;)를 &lt;code&gt;green&lt;/code&gt;으로 지정해서 Pod를 생성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl run nginx --image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;nginx:1.14 --port &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt; --namespace green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pod/nginx created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;green namespace에 있는 Pod를 조회해 보면, 정상적으로 생성된 것을 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pods -n green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME        READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;webserver   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          48s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;특정-namespace-삭제&#34;&gt;특정 namespace 삭제&lt;/h4&gt;
&lt;p&gt;grean namespace에 생성한 Pod를 삭제한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl delete pod nginx -n green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pod &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;주의할 점 : namespace를 삭제하면 안에 들어가 있던 Pod도 모두 삭제 된다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;특정-namespace에-yaml에서-pod-생성하기&#34;&gt;특정 namespace에 yaml에서 Pod 생성하기&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nginx.yaml&lt;/code&gt; 파일을 생성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl run nginx --image&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;nginx:1.14 --port &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt; --dry-run&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;client -o yaml &amp;gt; nginx.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생성된 &lt;code&gt;nginx.yaml&lt;/code&gt; 파일을 아래와 같이 수정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx:1.14&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번에는 namespace 플래그를 지정하여 생성해 본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create -f nginx.yaml -n green
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;특정-namespace에-yaml에-namespace-지정하여-pod-생성하기&#34;&gt;특정 namespace에 yaml에 namespace 지정하여 Pod 생성하기&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nginx.yaml&lt;/code&gt; 파일에서 &lt;code&gt;metadata&amp;gt;namespace&lt;/code&gt; 아래와 같이 &lt;code&gt;green&lt;/code&gt;을 지정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;green&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# namespace 지정&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx:1.14&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이번에는 namespace 플래그(&lt;code&gt;-n green&lt;/code&gt;) 지정 없이 생성해 본다. (&lt;em&gt;기존에 동일한 Pod명이 있다면 삭제를 먼저 진행해야 한다.&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl create -f nginx.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pod/nginx created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;green namespace에 있는 Pod를 조회해 보면, 정상적으로 생성된 것을 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl get pods -n green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME    READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          17s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;사용할-네임스테이스-switch---kubectl-config&#34;&gt;사용할 네임스테이스 switch - kubectl config&lt;/h3&gt;
&lt;p&gt;기본으로 사용하는 namespace를 defalut가 아닌 이름의 namespace로 switch&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사용 방법:&lt;/strong&gt;
namespace를 포함한 context 등록&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config set-context NAME --cluster&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;kubernetes ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config view
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;등록된 namespace로 context 변경&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config use-context NAME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;config-도움말-보기&#34;&gt;config 도움말 보기&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl config --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행 결과:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl config --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Modify kubeconfig files using subcommands like &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubectl config set current-context my-context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; The loading order follows these rules:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1.  If the --kubeconfig flag is set, &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;then&lt;/span&gt; only that file is loaded. The flag may only be &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; once and no merging takes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;place.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2.  If &lt;span style=&#34;color:#000&#34;&gt;$KUBECONFIG&lt;/span&gt; environment variable is set, &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;then&lt;/span&gt; it is used as a list of paths &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;normal path delimiting rules &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your system&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;. These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a value is created, it is created in the first file that exists. If no files in the chain exist, &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;then&lt;/span&gt; it creates the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last file in the list.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3.  Otherwise, &lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HOME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/.kube/config is used and no merging takes place.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available Commands:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  current-context   Display the current-context
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  delete-cluster    kubeconfig에서 지정된 클러스터를 삭제합니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  delete-context    kubeconfig에서 지정된 컨텍스트를 삭제합니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  delete-user       Delete the specified user from the kubeconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get-clusters      kubeconfig에 정의된 클러스터를 표시합니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get-contexts      하나 또는 여러 컨텍스트를 설명합니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get-users         Display users defined in the kubeconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rename-context    Rename a context from the kubeconfig file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt;               Set an individual value in a kubeconfig file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set-cluster       Set a cluster entry in kubeconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set-context       Set a context entry in kubeconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set-credentials   Set a user entry in kubeconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87&#34;&gt;unset&lt;/span&gt;             Unset an individual value in a kubeconfig file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  use-context       Set the current-context in a kubeconfig file
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  view              병합된 kubeconfig 설정 또는 지정된 kubeconfig 파일을 표시합니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  kubectl config SUBCOMMAND &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubectl &amp;lt;command&amp;gt; --help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; more information about a given command.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubectl options&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; a list of global command-line options &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;applies to all commands&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;config-설정-내용-보기&#34;&gt;config 설정 내용 보기&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl config view
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;실행 결과:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl config view
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clusters:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- cluster:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... 중간 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;contexts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- context:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cluster: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extensions:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - extension:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        last-update: Sat, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; Sep &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2022&lt;/span&gt; 09:22:47 KST
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        provider: minikube.sigs.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        version: v1.26.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name: context_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    namespace: default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current-context: minikube
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... 마지막 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;신규-컨테스트-추가&#34;&gt;신규 컨테스트 추가&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl config use-context green@kubenetes --cluster&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;minikube --user&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;kubernates-admin --namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;green
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;현재-컨테스트-확인&#34;&gt;현재 컨테스트 확인&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl config current-context
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;현재-컨테스트-변경&#34;&gt;현재 컨테스트 변경&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl config use-context &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;컨텍스트명&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      
      <category>Kubernetes</category>
      
      <category>DevOps</category>
      
    </item>
    
    <item>
      <title>Kubernetes yaml 테플릿과 API</title>
      <link>https://www.devkuma.com/docs/kubernetes/yaml-template-api/</link>
      <pubDate>Sat, 10 Sep 2022 09:16:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/kubernetes/yaml-template-api/</guid>
      <description>
        
        
        &lt;h2 id=&#34;api-version&#34;&gt;API version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;appha -&amp;gt; beta -&amp;gt; stable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes Object 정의 시 apiVersion이 필요&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes가 update하는 API가 있으면 새로운 API가 생성됨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;API Object의 종류 및 버전&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;종류&lt;/th&gt;
          &lt;th&gt;버전&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Deployment&lt;/td&gt;
          &lt;td&gt;apps/v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Pod&lt;/td&gt;
          &lt;td&gt;v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ReplicatSet&lt;/td&gt;
          &lt;td&gt;v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ReplicationController&lt;/td&gt;
          &lt;td&gt;apps/v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Service&lt;/td&gt;
          &lt;td&gt;v1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PersistentVolume&lt;/td&gt;
          &lt;td&gt;v1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;green&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx:1.14&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubernete explain &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Object&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% kubectl explain pod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;KIND:     Pod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERSION:  v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESCRIPTION:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Pod is a collection of containers that can run on a host. This resource is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     created by clients and scheduled onto hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FIELDS:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   apiVersion	&amp;lt;string&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     APIVersion defines the versioned schema of this representation of an
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     object. Servers should convert recognized schemas to the latest internal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     value, and may reject unrecognized values. More info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   kind	&amp;lt;string&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Kind is a string value representing the REST resource this object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     represents. Servers may infer this from the endpoint the client submits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     requests to. Cannot be updated. In CamelCase. More info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   metadata	&amp;lt;Object&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Standard object&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;s metadata. More info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   spec	&amp;lt;Object&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Specification of the desired behavior of the pod. More info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   status	&amp;lt;Object&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Most recently observed status of the pod. This data may not be up to date.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Populated by the system. Read-only. More info:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      
      <category>Kubernetes</category>
      
      <category>DevOps</category>
      
    </item>
    
  </channel>
</rss>
