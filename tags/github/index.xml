<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – GitHub</title>
    <link>https://www.devkuma.com/tags/github/</link>
    <image>
      <url>https://www.devkuma.com/tags/github/logo/180x180.jpg</url>
      <title>GitHub</title>
      <link>https://www.devkuma.com/tags/github/</link>
    </image>
    <description>Recent content in GitHub on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Git Actcions 소개 및 간단한 사용 방법</title>
      <link>https://www.devkuma.com/docs/git/github-actcions/</link>
      <pubDate>Thu, 07 Dec 2023 11:20:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/git/github-actcions/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions.png&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;github-actions란-워크플로우-자동화를-실현하는-기능&#34;&gt;GitHub Actions란? &amp;ldquo;워크플로우 자동화를 실현하는 기능&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;GitHub Actions는 미리 정의한 처리와 조건의 조합(=워크플로우/Workflow)을 자동화하는 GitHub 공식 기능이다.&lt;br&gt;
GitHub Actions에서는 리포지토리에 대한 푸시 등의 처리를 트리거로 하여 전용 Workflow에 정의해 둔 처리를 자동으로 실행한다.&lt;br&gt;
GitHub Actions를 사용하면 개발에서 주목받고 있는 &amp;lsquo;CI/CD(*)&amp;lsquo;를 구현할 수 있다.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;CI/CD란?&lt;/h4&gt;

    &lt;p&gt;CI/CD는 &amp;lsquo;Continuous Integration／Continuous Delivery&amp;rsquo;의 약자로, 지속적 통합/지속적 배포를 의미한다.&lt;br&gt;
빌드-테스트-배포라는 개발과 관련된 각종 작업을 자동화하여 지속적으로 수행하는 방식이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.devkuma.com/docs/ci-cd/&#34;&gt;CI/CD - 지속적 통합/지속적 배포&lt;/a&gt;&lt;/p&gt;


&lt;/div&gt;

&lt;h2 id=&#34;github-actions를-구성하는-주요-구성-요소-및-기능&#34;&gt;GitHub Actions를 구성하는 주요 구성 요소 및 기능&lt;/h2&gt;
&lt;p&gt;GitHub Actions는 여러 가지 구성 요소와 기능으로 구성되어 있다. 그 중 주요 종류를 살펴보면 다음과 같다.&lt;/p&gt;
&lt;h3 id=&#34;action--미리-정의된-작업을-실행하는-커스텀-애플리케이션&#34;&gt;Action | 미리 정의된 작업을 실행하는 커스텀 애플리케이션&lt;/h3&gt;
&lt;p&gt;Action은 미리 정의된 작업을 실행하는 GitHub Actions 전용 커스텀 애플리케이션이다. 기존 Action은 GitHub Marketplace에서 찾을 수 있으며, 직접 Action을 만들 수도 있다.&lt;/p&gt;
&lt;h4 id=&#34;주요-action&#34;&gt;주요 Action&lt;/h4&gt;
&lt;p&gt;다음은 실제로 어떤 Action이 있는지 주요 예시를 살펴보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Action 예시&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;checkout&lt;/td&gt;
&lt;td&gt;저장소에서 파일 체크아웃한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upload-artifact&lt;/td&gt;
&lt;td&gt;임의의 파일을 &amp;lsquo;결과물(artifact)&amp;lsquo;로 저장한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;download-artifact&lt;/td&gt;
&lt;td&gt;&amp;lsquo;결과물(artifact)로 저장되어 있는 파일을 다운로드한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cache&lt;/td&gt;
&lt;td&gt;종속 관계나 빌드를 캐싱하여 처리 속도를 높인다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;github-script&lt;/td&gt;
&lt;td&gt;GitHub API를 통해 GitHub의 각종 기능에 접근한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create-release&lt;/td&gt;
&lt;td&gt;GitHub Release API를 통해 릴리스를 생성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stale&lt;/td&gt;
&lt;td&gt;일정 기간 동안 사용되지 않은 이슈나 풀 리퀘스트가 있을 경우 경고하거나 이를 닫는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;labeler&lt;/td&gt;
&lt;td&gt;풀리퀘스트에 라벨을 부여한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete-package-versions&lt;/td&gt;
&lt;td&gt;GitHub Packages에서 패키지 버전을 삭제한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup-node&lt;/td&gt;
&lt;td&gt;Node.js 환경 구축하기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup-python&lt;/td&gt;
&lt;td&gt;Python 환경 구축하기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup-go&lt;/td&gt;
&lt;td&gt;Go 환경 구축하기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup-dotnet&lt;/td&gt;
&lt;td&gt;.NET CLI 환경을 구축한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup-java&lt;/td&gt;
&lt;td&gt;Java 환경 구축한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;toolkit&lt;/td&gt;
&lt;td&gt;액션을 쉽게 생성하는 데 도움이 되는 툴킷을 사용할 수 있도록 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;javascript-action&lt;/td&gt;
&lt;td&gt;자바스크립트 액션 생성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;typescript-action&lt;/td&gt;
&lt;td&gt;TypeScript 액션 생성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;workflow--실행할-처리와-그-처리를-실행하기-위한-조건을-정리한-프로세스이다&#34;&gt;Workflow | 실행할 처리와 그 처리를 실행하기 위한 조건을 정리한 프로세스이다.&lt;/h3&gt;
&lt;p&gt;Workflow는 실행할 처리와 그 처리를 실행하는 조건을 정리한 프로세스이다. 여러 Action을 조합하여 Workflow를 만드는 방법도 있다.&lt;/p&gt;
&lt;h3 id=&#34;runner--워크플로우workflow를-실행하는-서버&#34;&gt;Runner | 워크플로우(Workflow)를 실행하는 서버&lt;/h3&gt;
&lt;p&gt;GitHub에서는 Workflow를 실행하는 서버(환경)를 Runner라고 부르며, GitHub Actions를 이용할 때는 GitHub 공식에서 제공하는 가상 머신을 Runner로 사용할 수 있다. 직접 Runner를 준비하여 사용할 수도 있다.&lt;/p&gt;
&lt;h3 id=&#34;job--동일한-runner에서-실행되는-워크플로우workflow-단계&#34;&gt;Job | 동일한 Runner에서 실행되는 워크플로우(workflow) 단계&lt;/h3&gt;
&lt;p&gt;Job은 동일한 Runner에서 실행되는 워크플로우 내의 단계를 의미하며, Job은 다른 Job과 의존관계를 설정할 수도 있다. 기본적으로 Job은 Job 간 종속관계 없이 병렬로 실행된다.&lt;/p&gt;
&lt;h2 id=&#34;github-actions-사용의-장점&#34;&gt;GitHub Actions 사용의 장점&lt;/h2&gt;
&lt;p&gt;GitHub Actions 외에도 CI/CD와 같은 자동화를 실현하게 해주는 도구가 있다. 그 중에서도 GitHub Actions의 가장 큰 장점은 GitHub에서 제공하는 가상 서버를 이용할 수 있다는 점이다.&lt;/p&gt;
&lt;p&gt;GitHub Actions를 사용하면, 사용자가 직접 서버를 준비할 필요가 없다. 또한, 가상 서버가 아닌 물리적 서버를 사용해야 하는 경우, 사용자가 직접 서버를 준비하여 GitHub Actions를 사용할 수도 있다.&lt;/p&gt;
&lt;p&gt;또한, GitHub와 관련된 처리의 자동화는 공식적인 기능인 만큼 GitHub Actions를 통해 원활하게 구현할 수 있다. 이는 다른 도구에는 없는 GitHub Actions만의 장점이라고 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;github-actions-이용-시-주의사항&#34;&gt;GitHub Actions 이용 시 주의사항&lt;/h2&gt;
&lt;p&gt;GitHub Actions는 이용 플랜에 따라 다음과 같은 기능적 제한이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;플랜&lt;/th&gt;
&lt;th&gt;최대 동시 Job 수&lt;/th&gt;
&lt;th&gt;최대 동시 Job 수 (macOS)&lt;/th&gt;
&lt;th&gt;사용 가능한 시간 제한&lt;/th&gt;
&lt;th&gt;사용 가능한 저장 용량&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Free&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2,000분/월&lt;/td&gt;
&lt;td&gt;500MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pro&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3,000분/월&lt;/td&gt;
&lt;td&gt;1GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Team&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10,000분/월&lt;/td&gt;
&lt;td&gt;2GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enterprise&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;50,000 분/월&lt;/td&gt;
&lt;td&gt;50GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;또한 GitHub Actions는 이용 정책의 범위 내에서만 사용할 수 있다. GitHub의 각 플랜과 이용약관에 대한 자세한 내용은 아래 공식 사이트에서 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/ko/billing/managing-billing-for-github-actions/about-billing-for-github-actions?_fsi=LlxUgcTQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Actions의 과금에 대해서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pricing?_fsi=LlxUgcTQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;플랜 소개&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/ko/site-policy/github-terms/github-terms-for-additional-products-and-features?_fsi=LlxUgcTQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;추가 제품 및 기능에 적용되는 GitHub 약관&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;github-actions-활용-예시&#34;&gt;GitHub Actions 활용 예시&lt;/h2&gt;
&lt;p&gt;GitHub Actions는 다양한 용도로 활용이 가능하다. 아래에서 참고할 수 있는 몇 가지 활용 사례를 살펴보겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;릴리즈 노트, 릴리즈 Source 등을 자동으로 생성하여 소프트웨어 릴리즈 작업의 효율화&lt;/li&gt;
&lt;li&gt;Java, Python 등의 환경을 자동으로 구축&lt;/li&gt;
&lt;li&gt;Pull Request한 내용 등을 Slack이나 이메일 등으로 자동 알림&lt;/li&gt;
&lt;li&gt;푸시할 때마다 자바스크립트 Lint를 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기 소개한 것 외에도 GitHub Actions의 다양한 활용 사례를 생각해 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;github-actions의-기본적인-사용-예시&#34;&gt;GitHub Actions의 기본적인 사용 예시&lt;/h2&gt;
&lt;p&gt;여기서는 GitHub Actions를 실제로 설정하면서 기본적인 사용법을 살펴보겠다.&lt;/p&gt;
&lt;p&gt;Git 설치, GitHub 계정 생성 등 GitHub 관련 초기 설정은 완료된 것으로 가정한다.&lt;/p&gt;
&lt;p&gt;먼저 GitHub 관리 화면에서 GitHub Actions를 설정할 전용 저장소를 생성한다.
GitHub 관리 화면에서 &amp;lsquo;New&amp;rsquo;를 클릭힌다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-1.png&#34; alt=&#34;GitHub Actions용 저장소&#34;&gt;&lt;/p&gt;
&lt;p&gt;저장소 생성 화면이 표시된다. 저장소 이름(&amp;lsquo;Repository name&amp;rsquo;)에 원하는 이름을 입력하고, &amp;lsquo;Create repository&amp;rsquo;를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-2.png&#34; alt=&#34;저장소 이름 입력&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git bash 등에서 다음 명령어를 실행하여 생성한 리포지토리를 로컬에 복제(다운로드)한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;사용자 이름&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;저장소 이름&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SSH:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;사용자 이름&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;저장소 이름&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사용자 이름이 devkuma 이고, 저장소 이름이 &amp;rsquo;test&amp;rsquo;라면, 아래와 같은 명령어가 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/user/git-actions.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SSH:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:devkuma/git-actions.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% git clone git@github.com:devkuma/git-actions.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;git-actions&amp;#39;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;warning: You appear to have cloned an empty repository.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;클론한 로컬 저장소 내에 &lt;code&gt;.github/workflows&lt;/code&gt;라는 폴더를 생성하고, 해당 폴더 내에 &lt;code&gt;actions-test.yml&lt;/code&gt;이라는 파일을 하나 더 생성한다. 이 &lt;code&gt;actions-test.yml&lt;/code&gt;이 GitHub Actions의 워크플로우가 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; git-actions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% mkdir -p .github/workflows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; .github/workflows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% touch actions-test.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;GitHub Actions의 워크플로는 &lt;code&gt;.github/workflows&lt;/code&gt;라는 디렉터리에 저장한다.
workflow는 YAML 형식(.yml)으로 작성한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음으로 &lt;code&gt;actions-test.yml&lt;/code&gt;을 임의의 텍스트 편집기로 아래와 같이 편집한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;actions-test&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;push]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;jobs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;check-bats-version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;runs-on&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;steps&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;echo &amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 파일의 의미는 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;코드&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name: actions-test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;actions-test&amp;rsquo;라는 이름의 워크플로우를 생성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on: [push]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;푸시가 실행될 때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;runs-on: ubuntu-latest&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;최신 버전의 우분투 환경을 준비한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;run: echo &amp;quot;Hello World&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;echo &amp;quot;Hello World&amp;quot;&lt;/code&gt; 명령을 실행한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이것으로 GitHub Actions의 워크플로우 파일이 생성되었다. 파일 생성 후 다음 순서로 파일 추가, 커밋, 푸시 작업을 수행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[Add] actions test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 푸시가 실행되면 workflow가 실행된다.&lt;/p&gt;
&lt;p&gt;실제로 워크플로우가 실행되는지 확인해보자. GitHub 관리 화면에서 방금 생성한 저장소로 이동한 후 &amp;lsquo;Actions&amp;rsquo; 메뉴를 열어보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-3.png&#34; alt=&#34;Actions 메뉴 위치&#34;&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions의 관리 화면이 표시된다. 아래와 같이 git commit에서 지정한 코멘트 이름으로 GitHub Actions의 로그가 기록되어 있으므로 이 로그를 클릭하여 확인한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-4.png&#34; alt=&#34;GitHub Actions 로그&#34;&gt;&lt;/p&gt;
&lt;p&gt;다음으로 다음 순서대로 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-5.png&#34; alt=&#34;Step 안내&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-6.png&#34; alt=&#34;Step 실행&#34;&gt;&lt;/p&gt;
&lt;p&gt;아래와 같은 화면이 표시되며, workflow에서 지정한 대로 &amp;ldquo;Run echo &amp;ldquo;Hello world!&amp;ldquo;라는 명령이 실행된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/git/github-actions-7.png&#34; alt=&#34;명령어 실행 확인 위치&#34;&gt;&lt;/p&gt;
&lt;p&gt;이번에 소개한 예시를 보면 알 수 있듯이 GitHub Actions의 workflow에서는 우분투 환경을 준비하고 우분투 내에서 다양한 명령어를 실행할 수도 있다.&lt;/p&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리&lt;/h2&gt;
&lt;p&gt;GitHub Actions를 사용하면 Push 등의 작업을 트리거로 지정한 작업을 자동으로 실행할 수 있으며, GitHub Actions를 통해 CI/CD도 구현할 수 있다.&lt;/p&gt;
&lt;p&gt;GitHub Actions에서는 GitHub가 제공하는 가상 서버를 이용할 수 있기 때문에 사용자가 직접 실행 환경을 별도로 준비 및 운영할 필요가 없다. 또한, GitHub 공식 기능이기 때문에 GitHub와의 연동이 용이하다는 점도 다른 CI/CD 도구에는 없는 장점이라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;GitHub Actions는 릴리즈 노트 자동 생성, 자바스크립트 Lint를 푸시할 때마다 자동 실행하는 등 다양한 용도로 유용하게 사용할 수 있다. 한편, Free 플랜의 경우 동시 실행할 수 있는 최대 작업 수가 20개까지로 제한되어 있다는 점, GitHub Actions를 사용할 때는 공식 사이트에 정리된 이용약관을 준수해야 한다는 점도 주의해야 한다.&lt;/p&gt;

      </description>
      
      <category>Git</category>
      
      <category>GitHub</category>
      
      <category>SCM</category>
      
      <category>VCS</category>
      
    </item>
    
  </channel>
</rss>
