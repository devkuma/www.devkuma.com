<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Python</title>
    <link>https://www.devkuma.com/tags/python/</link>
    <image>
      <url>https://www.devkuma.com/tags/python/logo/180x180.jpg</url>
      <title>Python</title>
      <link>https://www.devkuma.com/tags/python/</link>
    </image>
    <description>Recent content in Python on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Python 입문 | Python 개발 환경</title>
      <link>https://www.devkuma.com/docs/python/python-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/python-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD/</guid>
      <description>
        
        
        &lt;p&gt;우선, GAE를 이용하기 위해 배우고 싶은 Python의 기본적인 지식을 대충 정리해 했다. 이것으로 &amp;ldquo;Python이란 무엇인가&amp;quot;라는 개념을 잡아 보도록 하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | Python 개발 환경 | Python 사용하기</title>
      <link>https://www.devkuma.com/docs/python/start/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/start/</guid>
      <description>
        
        
        &lt;h2 id=&#34;python-언어&#34;&gt;Python 언어&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Python (파이썬라고 읽는다)&amp;ldquo;은 스크립트 언어이다. C언어이나 Java와 같은 컴파일 언어가 아니라 PHP이나 Ruby와 같은 스크립트언어이다.&lt;br&gt;
스크립트 언어란 &amp;ldquo;인터프리터&amp;quot;이기도 한다. 인터프리터란? 소스 코드를 작성한 텍스트를 한 줄씩 로드하여 컴퓨터가 수행할 수 있는 명령으로 변환하면서 동작하는 프로그램 언어이다.&lt;br&gt;
이는 Python이 &amp;ldquo;텍스트 파일에서 소스 코드를 작성하면 바로 실행 시킬 수 있다&amp;quot;라는 것을 의미한다. 컴파일이나 프로그램 빌드하거나 하는 까다로운 작업이 일절 없다. 단지 편집기에서 쓰는 것만으로 동작할 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;그러나 프로그램을 동작시킬려면 인터프리터가 필요하다. C와 같은 언어는 프로그램이 실행 가능한 명령의 묶음으로 소스 코드를 변환시켜 실행 파일(예:.exe)을 만든다. 이렇게 맏는 실행 파일은 두 번 클릭하여 동작시킬 수 있으나, Python은 그런 것은 없다. Python 프로그램을 동작시키면, Python 소스 코드를 번역하고 실행하기 위한 &amp;lsquo;인터프리터&amp;rsquo;가 필요하다.&lt;/p&gt;
&lt;p&gt;그 외에 객체 지향이라던가, 동적 타이핑(dynamic typing) 언어라는 특징이 여러 가지 있지만, 지금은 모두 기억해 둘 필요는 없다. &amp;ldquo;인터프리터 언어이기 때문에 인터프리터를 설치하여 텍스트를 작성하고 실행하면 동작한다&amp;quot;라는 정도만 알면 된다.&lt;/p&gt;
&lt;p&gt;우선은 이 &amp;ldquo;Python 인터프리터&amp;rdquo; 설치해 보하도록 하자. 인터프리터는 아래 Python 사이트에서 다운로드 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.python.org/download/releases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.python.org/download/releases/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;주의 할 점은 Python 버전이다. 현재 최신 버전은 3.10 이다.&lt;/p&gt;
&lt;p&gt;Python은 Ver.2에서 Ver.3으로 업그레이드 되었을 때, 많은 변화가 있었다. 이런 변화에 따라 Ver.2로 작성된 프로그램의 상당수는 Ver.3에서 동작하지 않게 되었다. 그래서 Ver.2를 이용하고 있던 사람들을 위해 한동안 Ver.2 업데이트가 되다가, 2020년 1월 1일부터 지원이 종료되었다.&lt;/p&gt;
&lt;p&gt;앞으로 새롭게 배우는 사람은 새로운 Ver.3을 선택하면 좋을 것이다. 여기에서는 Ver.3 기반으로 설명을 하고 있다.&lt;/p&gt;
&lt;h2 id=&#34;python-설치&#34;&gt;Python 설치&lt;/h2&gt;
&lt;p&gt;그럼 다운로드한 설치 프로그램을 시작하여 설치를 하도록 하자.&lt;/p&gt;
&lt;h3 id=&#34;windows인-경우&#34;&gt;Windows인 경우&lt;/h3&gt;
&lt;p&gt;Windows 버전은 시작하면  &amp;ldquo;Install Now&amp;rdquo; 라는 표시가 나타난다. 이를 클릭하면 된다. 그러고 기다리면 설치가 완료된다. 정말 쉽다!&lt;/p&gt;
&lt;p&gt;또한 이 때, 윈도우 아래에 보이는 2개의 체크 박스는 양쪽 모두 On으로 해두자. On를 해 두지 않으면, 나중에 명령 프롬프트에서 Python 명령을 실행할 없게 될 수도 있다.&lt;/p&gt;
&lt;h3 id=&#34;mac-os인-경우&#34;&gt;Mac OS인 경우&lt;/h3&gt;
&lt;p&gt;Mac OS X의 경우 사정이 좀 다르다. Mac OS X에서는 기본적으로 Python이 설치되어 있다. 이를 이용한다면, 설치 등은 필요없다.
 
그러나! 기본적으로 설치되어 있는 것은 현재 Ver.2 버전이다. Ver.3 버전이 아니다. 향후에 OS 버전업을 하면 변화가 있을지는 모르지만, 지금으로써는 Ver.3을 사용하고 싶다면 별도로 설치할 수 밖에 없다.&lt;/p&gt;
&lt;p&gt;Mac OS 버전의 설치 프로그램은 Mac의 표준 설치 프로그램 자체이므로 &amp;ldquo;소개&amp;rdquo;, &amp;ldquo;읽어보기&amp;rdquo;, &amp;ldquo;사용권 계약&amp;rdquo;, &amp;ldquo;대상 디스크 선택&amp;rdquo;, &amp;ldquo;설치 유형&amp;rdquo;, &amp;ldquo;설치&amp;rdquo;, &amp;ldquo;요약&amp;rdquo; 순서대로 설정해 가면 된다. 기본적으로 모두 기본값 그대로 진행해 간다면 문제가 없을 것이다. &amp;ldquo;대상 디스크 선택&amp;quot;는 설치 위치 변경 없다면 그대로 넘어갈 것이고, 그대로 설치하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/python/python_mac_install.png&#34; alt=&#34;파이썬 맥 설치&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;homebrew으로-설치하기&#34;&gt;Homebrew으로 설치하기&lt;/h4&gt;
&lt;p&gt;brew 명령어로 설치를 해보겠다. 설치 방법은 간단하다 터미널에서 아래 명령어를 입력해서 설치하면 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% brew install python3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;brew 명령어로 하는 방법은 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% brew upgrade python3
&lt;/code&gt;&lt;/pre&gt;
      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | Python 개발 환경 | IDLE 기동하기</title>
      <link>https://www.devkuma.com/docs/python/idle/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/idle/</guid>
      <description>
        
        
        &lt;h2 id=&#34;idle-기동&#34;&gt;IDLE 기동&lt;/h2&gt;
&lt;p&gt;이제 실제로 Python을 사용해 보자. Python 프로그램 자체는 그냥 인터프리터로써, GUI도 아무것도 없는 명령 프로그램일 뿐이다. 이 밖에 &amp;ldquo;IDLE&amp;quot;라는 Python을 이용하기 위한 간단한 도구가 있는데, 이를 사용하여 Python을 수행시켜 보겠다.&lt;/p&gt;
&lt;p&gt;Windows의 경우, 시작 버튼에서 &amp;ldquo;Python 3&amp;quot;는 바로 가기를 찾아서 그 안에 있는 &amp;ldquo;IDLE&amp;rdquo; 메뉴를 선택해서 기동하면 된다. MacOS인 경우는 응용 프로그램 폴더에 설치되는 &amp;ldquo;Python 3&amp;quot;폴더에 IDLE가 들어 있기 때문에 이것을 시작하면 된다.&lt;/p&gt;
&lt;p&gt;IDLE은 매우 간단한 텍스트 편집기와 같은 도구이다. 실제로 이것은 텍스트 편집기로 사용할 수 있다. 하지만, 이 IDLE의 특징은 &amp;ldquo;대화형 쉘(interactive shell)&amp;ldquo;이라는 기능을 가지고 있다.&lt;/p&gt;
&lt;p&gt;대화형 쉘이란? &amp;ldquo;대화형으로 Python을 수행할 수 있는 기능&amp;quot;이다. 이 IDLE에서는 Python 문장을 입력하고 Enter 또는 Return 키를 누르면 해당 문장만 그 자리에서 실행 결과를 표시 할 수 있다. 그렇게 하나씩 문을 실행하면서 Python의 동작을 확인하는 것이 가능하다.&lt;/p&gt;
&lt;p&gt;그럼 지금 열려있는 IDLE 창에서 다음과 같이 입력하고, Enter/Return 키를 눌려보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello Python!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 다음 줄에 &amp;ldquo;Hello Python!&amp;ldquo;라는 텍스트가 표시된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/python/idle.png&#34; alt=&#34;IDLE&#34;&gt;&lt;/p&gt;
&lt;p&gt;이런 식으로 Python 코드를 실행하여, 결과를 표시하는 것을 반복하는 것으로 작업을 진행할 수 있다. 이 대화형 쉘은 Python을 배우기 시작할 시에 특히 유용하다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | Python 개발 환경 | 스크립트 실행하기</title>
      <link>https://www.devkuma.com/docs/python/script/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/script/</guid>
      <description>
        
        
        &lt;h2 id=&#34;스크립트-실행하기&#34;&gt;스크립트 실행하기&lt;/h2&gt;
&lt;p&gt;Python은 일반적으로 스크립트 파일(스크립트 = Python 소스 코드를 쓴 텍스트 파일)를 작성하여 이를 Python 명령으로 실행한다. 이 방법에 대해 설명하겠다.&lt;/p&gt;
&lt;p&gt;우선, 스크립트 파일을 작성한다. 이는 단순한 텍스트 파일이므로 텍스트 편집기라면 어떤 것이라도 작성할 수 있다. 만약 적당한 편집기를 가지고 있지 않다면, IDLE을 사용해도 된다. 이 IDLE은 사실 Python 전용 편집기로도 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;IDLE 윈도우의 메뉴에서 &lt;code&gt;[File]&lt;/code&gt; - &lt;code&gt;[New File]&lt;/code&gt;를 선택하면 새 창이 열린다. 이것은 IDLE 대화형 쉘 윈도우와는 다른 단순한 텍스트 편집기 창이다. 여기에 그대로 Python 스크립트를 작성하고 편집할 수 있다. 그럼 다음의 스크립트를 작성해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello Python!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;작성한 후 &lt;code&gt;[File]&lt;/code&gt; 메뉴의 &lt;code&gt;[save]&lt;/code&gt;를 선택하여 파일을 저장한다. 파일 이름은 &lt;code&gt;myscript.py&lt;/code&gt;로 하였다. 저장 위치는 본인이 원하는 곳으로 하면 된다.&lt;br&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/python/python_run1.png&#34; alt=&#34;python run&#34;&gt;&lt;/p&gt;
&lt;p&gt;저장한 후에 스크립트를 편집하는 윈도우의 &lt;code&gt;[Run]&lt;/code&gt; 메뉴에서 &lt;code&gt;[Run Module]&lt;/code&gt;을 선택한다. 편집기 창에서 열려있는 &lt;code&gt;myscript.py&lt;/code&gt;을 그 자리에서 실행하고 대화형 쉘 창에 결과를 출력한다.&lt;/p&gt;
&lt;p&gt;실행하면 &amp;ldquo;Hello Python!&amp;ldquo;라는 텍스트가 10 줄이 출력된다. 이 스크립트의 실행 결과이다.&lt;br&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/python/python_run2.png&#34; alt=&#34;python run&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;명령-실행&#34;&gt;명령 실행&lt;/h3&gt;
&lt;p&gt;Python 프로그램은 일반적으로 명령 프롬프트 또는 터미널에서 명령을 사용하여 스크립트를 실행한다. 그럼, 이것도 해보도록 하자. 명령 프롬프트(Windows) 또는 터미널(Mac OS)를 시작하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd {py파일이 저장된 위치}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 실행할 스크립트 파일이 저장한 디렉토리로 이동한다. 그리고 다음과 같이 명령을 실행한다.&lt;/p&gt;
&lt;h4 id=&#34;windows의-경우&#34;&gt;Windows의 경우&lt;/h4&gt;
&lt;p&gt;Windows의 경우 &amp;ldquo;python&amp;rdquo; 명령어로 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python myscript.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것은 생략해서 &amp;ldquo;py&amp;quot;만으로도 실행할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;py myscript.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;mac-os의-경우&#34;&gt;Mac OS의 경우&lt;/h4&gt;
&lt;p&gt;Mac OS의 경우 &amp;ldquo;python&amp;rdquo; 명령어를 실행하면 OS에 처음부터 설치되어 있는 Python 2.5을 시작한다.
새로 설치하였다면, &amp;ldquo;python3&amp;rdquo; 명령으로 실행해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 myscript.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip&lt;/h4&gt;

    &lt;p&gt;&lt;strong&gt;Max OS X에서 실행이 안될 경우&lt;/strong&gt;&lt;br&gt;
처음에 Mac OS X에 설치해서 그대로 실행하려고 하면 &amp;ldquo;python3&amp;rdquo; 명령을 사용할 수 없는 경우가 있다. 이는 쉘에 Python의 경로가 추가되지 않기 때문이다. 이것은 미리 준비되어 있는 명령 프로그램으로 실행할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;응용 프로그램&amp;rdquo; 폴더에 설치되어 있는 Python의 폴더(&amp;ldquo;Python 3.6&amp;quot;과 같은 이름으로 되어 있다)에 &amp;ldquo;Update Shell Profile.command&amp;quot;라는 파일이 있을 것이다. 이를 더블 클릭하여 실행하면 &amp;ldquo;Python3&amp;rdquo; 명령을 사용할 수 있게 될 것이다.&lt;/p&gt;


&lt;/div&gt;

&lt;h2 id=&#34;스크립트를-작성할-시에-주의점&#34;&gt;스크립트를 작성할 시에 주의점&lt;/h2&gt;
&lt;p&gt;우선 이것으로 스크립트를 작성하여 실행 시키는 프로그래밍의 기본 중의 기본은 알았다. 그러면 실제로 스크립트를 공부하고 가기 전에 &amp;ldquo;스크립트를 작성할 시에, 주의점&amp;quot;에 대해서 정리보겠다.&lt;/p&gt;
&lt;h3 id=&#34;1-기본은-영숫자로-작성한다&#34;&gt;1. 기본은 &amp;ldquo;영숫자&amp;quot;로 작성한다.&lt;/h3&gt;
&lt;p&gt;이것은 Python에 한정된 이야기는 아니지만, 프로그래밍 소스 코드는 모든 영문, 숫자가 기본이다. 한글이 포함되어 있으면 동작하지 않는다. 기본적으로 &amp;ldquo;한글은 텍스트를 값으로 사용하거나 코멘트를 작성할 때 뿐&amp;quot;이라고 생각하자. 나머지는 모두 영문과 숫자가 기본이다.&lt;/p&gt;
&lt;h3 id=&#34;2-대소문자는-다른-문자&#34;&gt;2. 대소문자는 다른 문자!&lt;/h3&gt;
&lt;p&gt;이는 특히 Windows 사용자에게는 중요하다. Windows를 사용하고 있으면 왠지 &amp;ldquo;대문자와 소문자는 동일 문자&amp;quot;라고 생각할 수 있다. 즉, &amp;ldquo;A도 a가 같은 문자&amp;quot;라고 생각할 수도 있다는 것이다(그렇지 않다면 다행이다).&lt;/p&gt;
&lt;p&gt;하지만, Python은 다르다. &amp;ldquo;A&amp;quot;와 &amp;ldquo;a&amp;quot;는 다른 문자이다. 예를 들어, 이전에 작성한 &amp;ldquo;print~&amp;ldquo;라는 것을 &amp;ldquo;Print~&amp;ldquo;라고 하면 실행이 되지 않는다. 또한 값을 저장 변수의 이름도 대소문자를 정확하게 작성하지 않으면 안된다. &amp;ldquo;A&amp;quot;라는 변수를 사용하는데, &amp;ldquo;a&amp;quot;라고 자성하면 인식하지 못한다.&lt;/p&gt;
&lt;h3 id=&#34;3-선행-공백은-의미가-있다&#34;&gt;3. 선행 공백은 의미가 있다!&lt;/h3&gt;
&lt;p&gt;이것도 매우 중요하다. 프로그래밍 언어에는 소스 코드를 보기 쉽게하기 위하여 &amp;ldquo;들여 쓰기(indent)&amp;ldquo;라는 것을 잘 사용해야 한다. 즉, 문장의 시작 부분에 탭이나 공백을 넣어, 시작 위치를 오른쪽으로 이동하고 보기 쉽게하기 위함이다.&lt;/p&gt;
&lt;p&gt;Python에서는 들여 쓰기를 마음대로 해는 안된다. 다음에서 설명하겠지만, Python에는 문장의 들여 쓰기가 중요한 의미를 가지고 있다. Python에서는 들여 쓰기에 따라 문법 구문 등을 인식하게 되어있다.
그래서, 꼭 규칙에 따라 들여 쓰기를 해야 한다. &amp;ldquo;이런 것이 보기 편안한 때문&amp;quot;이라고 적당히 공간 사이를 떼면, 바로 문법 오류가 발생하게 된다.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;우선, 이 3가지 점만 제대로 이해해 두자. 그럼 다음에서 구체적인 프로그래밍 이야기에 들어가기로 하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 값과 계산</title>
      <link>https://www.devkuma.com/docs/python/calculate-value/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/calculate-value/</guid>
      <description>
        
        
        &lt;p&gt;프로그래밍의 기본이라고 하면, 우선 &amp;ldquo;값&amp;quot;과 &amp;ldquo;계산&amp;quot;이다. Python으로 사용되는 기본 값과 계산 방법 등을 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 값과 계산의 기본 | 데이터 타입</title>
      <link>https://www.devkuma.com/docs/python/datatype/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/datatype/</guid>
      <description>
        
        
        &lt;h2 id=&#34;데이터-타입---값에는-유형이-있다&#34;&gt;데이터 타입 - 값에는 유형이 있다&lt;/h2&gt;
&lt;p&gt;프로그래밍에 익숙하지 않은 사람이 처음 격게 되는 것은 &amp;ldquo;값에는 유형이 있다&amp;quot;는 것이다.&lt;/p&gt;
&lt;p&gt;많은 초보자는 Python과 같은 스크립트 언어부터 공부을 시작하는 경우가 많다. 이러한 언어에서는 변수(값을 보관해 두는 곳) 등을 사용하는 경우도 그다지 &amp;ldquo;값 유형(데이터 타입)&amp;ldquo;등을 의식하지 않도록 되어 있다. 따라서 &amp;ldquo;어떤 값도 변수에 넣으면 그것으로 동작한다&amp;quot;고 착각해 버린다.&lt;/p&gt;
&lt;p&gt;나중에 설명 하겠지만, Python에도 값에는 &amp;ldquo;유형&amp;quot;이 있다. 숫자, 텍스트, 문자&amp;hellip;라는 식으로 다양한 종류가 있으며, 그 종류마다 값의 사용법은 달라진다. 하지만, 실제로 프로그램을 작성할 때는 대부분 값의 &amp;ldquo;유형&amp;quot;을 의식하지 않고 쓸 수 있게 되어 있다.&lt;/p&gt;
&lt;p&gt;간단한 예를 살펴 보자. IDLE을 시작하고 아래에 올린 3문장의 스크립트를 한 줄씩 실행하길 바란다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;456&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;456&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;보면 대체로 비슷한 두 값을 덧셈하고 있다. 어느 것도 같을거라 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;그런데 실제로 실행해 보면, 이 3개는 전혀 다르게 동작한다. 첫 번째는 &amp;ldquo;579&amp;quot;가 되고, 두 번째는 &amp;ldquo;123456&amp;quot;가 되고, 세 번째는 에러가 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/python/python_variable.png&#34; alt=&#34;python variable&#34;&gt;&lt;/p&gt;
&lt;p&gt;이는 첫 번째 숫자로 계산하고, 두 번째는 텍스트로 계산된다. 세 번째는 두 가지의 종류의 다른 값을 억지로 계산하려는 시도했다가 실패를 했다.&lt;/p&gt;
&lt;p&gt;즉, Python이라는 언어는 &amp;ldquo;값 유형&amp;quot;라는 것을 잘 이해해 두지 않으면 사용할 수 없다. 우선, 이런 점을 잘 이해 두도록 하자.&lt;/p&gt;
&lt;h2 id=&#34;주요-값의-유형&#34;&gt;주요 값의 유형&lt;/h2&gt;
&lt;p&gt;그럼 Python에는 어떤 값의 유형이 있을까? 기본적인 항목을 설명한다.&lt;/p&gt;
&lt;h3 id=&#34;숫자&#34;&gt;숫자&lt;/h3&gt;
&lt;p&gt;프로그래밍에서 사용 값이라고 하면, 우선 &amp;ldquo;숫자&amp;quot;이다. 숫자에 대해서는 Python에서는 많은 유형이 있는데 &amp;ldquo;정수&amp;rdquo;, &amp;ldquo;부동 소수점&amp;rdquo; &amp;ldquo;복소수&amp;quot;등이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정수(int)&lt;/strong&gt; : 보통의 정수이다. 단지 숫자를 쓰는 것만으로 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;부동 소수점(float)&lt;/strong&gt; : 소수점 이하의 값이다. 또는 매우 자리수가 많은 숫자에 대해 사용하기도 한다. 이는 보통 소수의 &amp;ldquo;.&amp;ldquo;을 붙여 쓴다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;복소수(complex)&lt;/strong&gt; : 허수이다. 이것은 끝에 &amp;ldquo;J&amp;quot;를 붙인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중에 우선은 &amp;lsquo;정수&amp;rsquo;와 &amp;lsquo;부동 소수점&amp;quot;만 기억해 두도록 하자. 복소수는 필요하여 사용하게 될때까지 잊고 있어도 된다.&lt;/p&gt;
&lt;h3 id=&#34;텍스트&#34;&gt;텍스트&lt;/h3&gt;
&lt;p&gt;텍스트는 값의 전후를 따옴표로 묶어 설명한다. 이것은 &amp;ldquo;작은 따옴표&amp;rdquo;, &amp;ldquo;큰 따옴표&amp;rdquo;, &amp;ldquo;트리플 쿼트&amp;quot;라고 한 것이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;Hello&amp;#39;    &amp;#34;Welcome&amp;#34;   &amp;#39;&amp;#39;&amp;#39;Bye&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런 식이다. 이 가운데 작은 따옴표(&lt;code&gt;&#39;&lt;/code&gt;)와 큰 따옴표(&lt;code&gt;&amp;quot;&lt;/code&gt;)은 동일하다. 일반적으로 텍스트를 쓸 때, 이 중 하나에 쓴다.&lt;/p&gt;
&lt;p&gt;마지막 트리플 쿼트(&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;)은 여러 줄의 텍스트를 쓸 때 사용한다. 작은 따옴표와 큰 따옴표는 텍스트 값의 여러 줄을 표현할 수 없다. 트리플 쿼트는 도중에 행을 변경해도 된다.&lt;/p&gt;
&lt;h3 id=&#34;부울&#34;&gt;부울&lt;/h3&gt;
&lt;p&gt;부울은 프로그래밍 특유의 값이다. 이는 &amp;ldquo;양자 택일의 값&amp;quot;이다. 참 또는 거짓, yes 또는 no, 올바른지 또는 아닌지 이런 것을 나타내는데 사용한다.&lt;br&gt;
이는 &amp;ldquo;True&amp;rdquo;, &amp;ldquo;False&amp;quot;라는 Python에 포함되어 있는 키워드를 사용하여 작성한다. 다른 값은 사용할 수 없다.&lt;/p&gt;
&lt;h3 id=&#34;주요-값의-유형-사용&#34;&gt;주요 값의 유형 사용&lt;/h3&gt;
&lt;p&gt;실제로 이러한 값을 사용한 예제는 아래와 같다. 아래의 코드를 IDLE에서 한 줄씩 실행해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12345&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&amp;#39;welcome, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;and bye.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/python/python_datatype.png&#34; alt=&#34;python datatype&#34;&gt;&lt;/p&gt;
&lt;p&gt;조금 이해하기 어려울 수 있는 것은 트리플 쿼트 텍스트일 것이다. 그 외에 그렇게 어려운 것은 없다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 값과 계산의 기본 | 변수와 연산</title>
      <link>https://www.devkuma.com/docs/python/variable/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/variable/</guid>
      <description>
        
        
        &lt;h2 id=&#34;변수&#34;&gt;변수&lt;/h2&gt;
&lt;p&gt;값은 그대로 자체를 그대로 사용하는 일은 그다지 많지 않다. 보통은 &amp;ldquo;변수&amp;quot;에 넣어 사용한다.&lt;/p&gt;
&lt;p&gt;변수란? 값을 보관할 준비가 된 메모리 영역을 나타내는 것이다. 어째서 이런 것이 있는가? 하고 의문을 가질 수 있는데, 여기서 이를 설명하기에는 너무 내용이 방대하다. 그래서 우선은 알기 쉽게 &amp;ldquo;여러가지 값을 넣어 두는 용기&amp;quot;라고 생각두면 충분하다. 값은 변수에 넣어 놓고, 계산하고, 그 결과를 다시 변수에 넣고 처리해 나간다.&lt;/p&gt;
&lt;p&gt;이 변수는 등호(&lt;code&gt;=&lt;/code&gt;)를 사용하여 값을 넣는다. 예를 들면, 아래와 같은 식이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;변수명&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;값&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에는 우변 값이 좌변의 변수에 포함되어 있다(대입이라고 한다). 변수 이름을 쓰고, 이런 식으로 값을 대입하면 바로 변수를 만들어 사용할 수 있게 된다. &amp;ldquo;미리 이런 변수를 만들어 두는 거&amp;quot;라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;a = 10&lt;/code&gt;라고 하면, 변수 &lt;code&gt;a&lt;/code&gt;가 바로 만들어 진다. 이 변수는 값과 동일하게 취급할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;계산&#34;&gt;계산&lt;/h2&gt;
&lt;p&gt;변수는 단지 값을 보관할 뿐만 아니라, 다양한 연산을 하고 그 결과를 저장하기 위해 많이 사용된다.&lt;/p&gt;
&lt;h3 id=&#34;숫자-연산&#34;&gt;숫자 연산&lt;/h3&gt;
&lt;p&gt;숫자 연산 기호는 이른바 사칙 연산 기호를 그대로 사용할 수 있다. 즉, 덧셈(&lt;code&gt;+&lt;/code&gt;), 뺄셈(&lt;code&gt;-&lt;/code&gt;), 곱셈(&lt;code&gt;*&lt;/code&gt;),  나눗셈(&lt;code&gt;/&lt;/code&gt;), 나머지(&lt;code&gt;%&lt;/code&gt;)를 말한다. 키보드에 기호가 보이기 때문에 알 것이다.  그런데, 여기서 &lt;code&gt;%&lt;/code&gt;는 무엇인가 라고 생각한 사람이 있을 것이다. 이는 &amp;ldquo;나눗셈을 하고 남은 나머지&amp;quot;를 계산하는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 밖에 &amp;lsquo;지수&amp;rsquo;의 기호 있다. [&lt;code&gt;**&lt;/code&gt;]이다. 예를 들어, &amp;ldquo;10의 제곱&amp;quot;이라면, &amp;ldquo;&lt;code&gt;10**2&lt;/code&gt;&amp;rdquo; 이렇게 쓴다.&lt;/p&gt;
&lt;h3 id=&#34;텍스트-연산&#34;&gt;텍스트 연산&lt;/h3&gt;
&lt;p&gt;또한 &amp;ldquo;텍스트의 연산&amp;quot;라는 것도 있다. 연산은 &amp;lsquo;덧셈&amp;rsquo;과 &amp;lsquo;곱셈&amp;rsquo;을 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ &lt;code&gt;+&lt;/code&gt; ] 기호 : 왼쪽과 오른쪽 텍스트를 하나로 연결한다.&lt;/li&gt;
&lt;li&gt;[ &lt;code&gt;*&lt;/code&gt; ] 기호 : 왼쪽의 텍스트를 오른쪽 회수 만큼 반복한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;덧셈은 간단한다. 예를 들어, [ &lt;code&gt;&#39;A&#39; + &#39;B&#39;&lt;/code&gt; ]라고 하면, &amp;ldquo;AB&amp;quot;라는 텍스트가 될 것이다.&lt;br&gt;
곱셈은 [ &lt;code&gt;&#39;A&#39; * 3&lt;/code&gt; ]라고 하면 &amp;ldquo;AAA&amp;quot;이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;A&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;B&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; c = a + b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(c)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;A&amp;#39; * 3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 값과 계산의 기본 | 데이터 형변환</title>
      <link>https://www.devkuma.com/docs/python/casting/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/casting/</guid>
      <description>
        
        
        &lt;h2 id=&#34;데이터-형변환과-텍스트&#34;&gt;데이터 형변환과 텍스트&lt;/h2&gt;
&lt;p&gt;값에는 유형이 있다. 다른 유형의 값끼리는 계산할 수 없다. 그렇게 되면, 예를 들어 &amp;ldquo;텍스트와 숫자를 사용하여 계산한다&amp;quot;라고 하는 것은 불가능하다는 걸 의미한다.&lt;/p&gt;
&lt;p&gt;그러나, 물론 그런 일은 없다. 제대로 된 방법으로 Python에는 값을 다른 유형으로 변환하는 기능이 포함되어 있다. 우선 다음의 것만 제대로 배워보도록 하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int(값)&lt;/code&gt; - &lt;code&gt;()&lt;/code&gt;의 값을 정수로 변환한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float(값)&lt;/code&gt; - &lt;code&gt;()&lt;/code&gt;의 값을 실수로 변환한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str(값)&lt;/code&gt; - &lt;code&gt;()&lt;/code&gt;의 값을 텍스트로 변환한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool(값)&lt;/code&gt; - &lt;code&gt;()&lt;/code&gt;의 값을 부울 값으로 변환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 처럼 어떤 유형의 값을 다른 유형으로 변환하는 것을 &amp;ldquo;형 변환&amp;quot;이라고 하고, 영어로는 &amp;ldquo;캐스팅(casting)&amp;ldquo;이라고 한다.&lt;/p&gt;
&lt;p&gt;그럼, 아래 형 변환하는 간단한 예제들을 보도록 하겠다. 아래와 같은 방법로 텍스트와 정수를 변환하여 사용하면 될 것이다.&lt;/p&gt;
&lt;h3 id=&#34;텍스트에-값-정리&#34;&gt;텍스트에 값 정리&lt;/h3&gt;
&lt;p&gt;값의 형변환는 &amp;ldquo;계산 값을 맞출려고&amp;quot;하는 경우도 있지만, 그 보다 자주 사용하는 것이 &amp;ldquo;print에 값을 출력하기 위해서&amp;quot;이다. print는 어떤 값도 출력할 수 있지만, 텍스트를 사용하여 값을 처리하려는 순간 오류가 발생한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;579
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래 예제는 매우 간단한 샘플이다. 그런데 이것을 처리하려는 순간 에러가 발생한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;answer : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TypeError: can only concatenate str (not &amp;#34;int&amp;#34;) to str
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그런데, 왜 에러가 발생하는가? &lt;code&gt;print()&lt;/code&gt;에 넣은 &lt;code&gt;&#39;answer :&#39; + c&lt;/code&gt;가 원인이다. 텍스트와 숫자를 연결하려고 했기 때문에 &amp;ldquo;변수 c는 텍스트 아니다&amp;quot;라고 에러가 발생하는 것이다.
&amp;ldquo;텍스트를 + 기호&amp;quot;로 연결하기 위해서는 연결 값이 텍스트가 아니면 안된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;answer : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer : 579
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 에러없이 동작하는 걸 확인할 수 있다. &lt;code&gt;print()&lt;/code&gt;를 보면 &lt;code&gt;&#39;answer : &#39;+ str(c)&lt;/code&gt;와 같이 되어 있다. 변수 c를 str로 텍스트로 변환한 것으로 정상적으로 동작하게 되는 것이다.&lt;/p&gt;
&lt;p&gt;이와 같이, &amp;ldquo;텍스트으로 값을 연결하려고 하여, 오류가 발생하게 되었다&amp;quot;라는 것은 초보자로써 언제나 하는 실수이기에, print에 오류가 발생하면 먼저 &amp;ldquo;값 형 변환, 값 형 변환&amp;quot;라고 머릿속에서 반복하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 구문(statement)</title>
      <link>https://www.devkuma.com/docs/python/statement/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/statement/</guid>
      <description>
        
        
        &lt;p&gt;Python의 가장 큰 특징은 그 독특한 &amp;ldquo;구문(statement)&amp;ldquo;스타일에 있다. &amp;ldquo;들여쓰기(intent)&amp;ldquo;를 이용한 구문 작성 및 기본적인 제어 구문에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 구문(statement) | 구문과 들여쓰기의 관계</title>
      <link>https://www.devkuma.com/docs/python/statement-indentation/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/statement-indentation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;구문과-들여쓰기의-관계&#34;&gt;구문과 들여쓰기의 관계&lt;/h2&gt;
&lt;p&gt;프로그래밍 언어로는 &amp;ldquo;값&amp;quot;과 &amp;ldquo;연산&amp;quot;이 기본라고 했었다. 그럼, 다음에 중요한 것은 무엇일까? 여러가지 생각나는 것이 있지만, 아마 프로그램의 &amp;ldquo;제어(control)&amp;ldquo;일 거다.&lt;/p&gt;
&lt;p&gt;단지, 명령을 순차적으로 실행하는 것만으로는 극히 제한된 사용법 밖에 할 수 없다. 프로그램의 상황에 따라 &amp;ldquo;여기는 이것을 실행&amp;rdquo;, &amp;ldquo;이것은 OO번 반복&amp;quot;과 같이 프로그램의 흐름을 제어함으로써 보다 복잡한 프로그램이 만들 수 있게 되기 때문이다.&lt;/p&gt;
&lt;p&gt;이러한 프로그램의 움직임에 대해 이것 저것 지시하기 위해 준비되어 있는 것이 &amp;lsquo;구문&amp;rsquo;이라는 것이다. 그 중에서도 그 흐름을 제어하기 위해 마련된 것을 &amp;ldquo;제어 구문(control statement)&amp;ldquo;라고 한다.&lt;/p&gt;
&lt;p&gt;Python의 구문 표기법은 매우 독특하다. 그것은 &amp;ldquo;들여쓰기(인덴트, indentation)&amp;ldquo;를 사용한 방법이다. &amp;ldquo;들여쓰기&amp;quot;란 텍스트의 시작 위치를 탭이나 공백으로 오른쪽으로 보내는 것이다.&lt;/p&gt;
&lt;p&gt;Python에서는 다양한 구문이 들여쓰기를 사용하여 작성한다. 예를 들어, 구문에서 &amp;ldquo;이런 경우 다음 작업을 수행한다&amp;quot;라는 것을 설명한다고 하자. 그러면, 그 구문 중에 준비하는 처리는 그거보다 오른쪽으로 들여 쓰여져 있다. 그리고, 그 들여쓰기 위치에서 쓰여져 있는 것이 &amp;ldquo;그 구문 안에 처리&amp;quot;라고 판단되는 것이다.&lt;/p&gt;
&lt;p&gt;그 구문을 끝내고 원래대로 돌아가려면 이전 위치로 들여쓰기를 되돌린다. 즉, Python은 &amp;ldquo;그 문장이 어떤 위치에서 쓰기 시작하고 있는가&amp;quot;에 따라 어떤 구문의 처리인가를 인식하는 것이다.&lt;/p&gt;
&lt;p&gt;간단히 이해를 돕기 위해 아래의 구문 작성 내용을 보도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 구문 작성&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;보통&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;문장&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;또&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;        &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;그&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;또&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;        &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;그&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;또&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;구문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;보통&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;문장&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;보통&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;문장&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;중략&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런 식으로 문장의 시작 위치를 조금씩 다르게 하여 구문이 작성된다. 이는 들여쓰기 공백 수를 잘못하게 되면 문법적인 에러가 발생하기도 한다는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;Python 들여쓰기는 일반적으로 탭 대신 공백이 사용된다. 표준으로 공백 8개 문자씩 넣는 방식이 많지만, 이것은 특별히 정해져 있는 것은 아니고, 4개 문자도 2개 문자로도 인식하고 동작한다.&lt;/p&gt;
&lt;p&gt;단, 너무 공백 수가 적으면 문법의 구성이 알아 보기 힘들어 지거나, 들여쓰기가 실수가 많아지기도 하고, 공백 수가 너무 많으면 점점 문장이 오른쪽으로 이동하여 문장의 끝이 보이지 않게 될 수도 있다. 그러기에 적당한 폭을 생각하면서 쓰도록 하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 구문(statement) | 조건 분기 - if 구문</title>
      <link>https://www.devkuma.com/docs/python/conditional/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/conditional/</guid>
      <description>
        
        
        &lt;h2 id=&#34;if-구문&#34;&gt;if 구문&lt;/h2&gt;
&lt;p&gt;제어 구문을 크게 나누면 &amp;ldquo;조건 분기&amp;quot;와 &amp;ldquo;반복&amp;quot;으로 구성되어 있다. 우선 조건 분기부터 살펴 보겠다.&lt;/p&gt;
&lt;p&gt;조건 분기는 문자 그대로 &amp;ldquo;조건에 따라 처리를 분기한다&amp;quot;는 것이다. 그 기본은 양자 택일의 분기하는 if 구문이다.&lt;/p&gt;
&lt;p&gt;if 구문은 다음과 같은 형태를 하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if 기본형 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;조건&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;조건이&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;참일&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;경우에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;if 기본형 (2)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;조건&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;조건이&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;참일&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;경우에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;조건이&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;거짓일&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;경우에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;처리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if 문은 여러가지 작성 방법이 있다. 기본은 조건을 확인하고 그것이 옳았을 때에 작업을 수행한다는 것이다. 이것은 if문 후에 검사 조건이 되는 것을 쓰고 콜론(&lt;code&gt;:&lt;/code&gt;)을 넣는다. 그러고 그 이후의 들여쓰기된 부분을 수행한다.&lt;/p&gt;
&lt;p&gt;조건이 참일 경우 처리와는 별도로 조건이 거짓을 경우에도 어떤 처리를 하고 싶다면, 참인 경우 수행할 처리가 끝나는 곳에, 들여쓰기를 if 위치로 돌아가서 &lt;code&gt;else:&lt;/code&gt;를 넣는다. 그리고 또 오른쪽으로 들여쓰기하여 수행할 처리를 작성하면 된다.&lt;/p&gt;
&lt;p&gt;또한, 조건을 하나뿐만 아니라 차례로 확인하는 &lt;code&gt;elif:&lt;/code&gt;와 같은 것도 있지만, 일단은 &lt;code&gt;if ~:&lt;/code&gt;, &lt;code&gt;else:&lt;/code&gt; 2개만 기억해 두자.&lt;/p&gt;
&lt;p&gt;아래에 간단한 예제는 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;check&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;check&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;는 짝수입니다.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;는 홀수입니다.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;....end.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% python3 if.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1234는 짝수입니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;....end.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;변수 x가 짝수인지 홀수인지를 검사 프로그램이다. x를 2로 나눈 나머지를 확인하고, 그것이 제로인지 여부에 표시할 텍스트를 변경하고 있다. 변수 x의 값을 다양하게 변경해 보고 동작을 확인해 보자.&lt;/p&gt;
&lt;h2 id=&#34;조건은-어떻게-쓰는거야&#34;&gt;조건은 어떻게 쓰는거야?&lt;/h2&gt;
&lt;p&gt;이 if문을 사용하기 위해서는 &amp;lsquo;조건&amp;rsquo;이라는 것을 어떻게 작성해야 해야 할지가 중요하다. Python이라는 프로그래밍 언어를 이해하는데 있어서 조건은 꼭 알아야 한다. 조건에 대해 정리하면 대략 다음과 같다.&lt;/p&gt;
&lt;h3 id=&#34;숫자를-비교하는-식&#34;&gt;숫자를 비교하는 식&lt;/h3&gt;
&lt;p&gt;가장 많이 쓰는 것은 숫자를 비교하는 식이다. 앞에 예제에서도 숫자 비교 식을 사용하였다. 두 값을 비교하여 &amp;ldquo;어느 쪽이 큰지&amp;quot;라든가 &amp;ldquo;같은 값인지에 대한 여부&amp;quot;등을 체크하는 식이다. 이는 다음과 같은 기호가 준비되어 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;==&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1과 값2는 동일하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;!=&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1과 값2는 같지 않다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;&amp;lt;&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1보다 값2 더 크다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;&amp;lt;=&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1보다 값2 쪽이 크거나 같다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;&amp;gt;&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1보다 값2 쪽이 작다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;값1 &lt;code&gt;&amp;gt;=&lt;/code&gt; 값2&lt;/td&gt;
&lt;td&gt;값1보다 값2 쪽이 작거나 같다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;부울-값과-변수&#34;&gt;부울 값과 변수&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;부울(bool)&amp;ldquo;이라는 것은 &amp;ldquo;옳고 그른지?&amp;rdquo; 라는 양자 택일에 대한 값이었다. 이것은 True 또는 False의 값 중 하나였다. if문에는 그 후의 변수와 값이 True이면 다음의 작업을 수행한다. False라면 작업을 수행하지 않거나 또는 else: 이후의 처리를 실행한다.&lt;/p&gt;
&lt;h3 id=&#34;결론&#34;&gt;결론&lt;/h3&gt;
&lt;p&gt;사실은 &amp;ldquo;숫자를 비교하는 식&amp;quot;과 &amp;ldquo;부울 값과 변수&amp;quot;는 어느 쪽도 같은 것이다. 첫번째에서 &amp;ldquo;두 값을 비교하는 식&amp;quot;에서는 두개의 식을 비교한 결과를 논리 값으로 반환하는 역할을 한다. 즉, 상세히 따져보면 &amp;ldquo;True인가? False인가?&amp;ldquo;에서 모든 if 조건문의 결정이 가능하다는 것이다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 구문(statement) | 조건에서 반복 while 문</title>
      <link>https://www.devkuma.com/docs/python/%EC%A1%B0%EA%B1%B4%EC%97%90%EC%84%9C-%EB%B0%98%EB%B3%B5-while-%EB%AC%B8/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%A1%B0%EA%B1%B4%EC%97%90%EC%84%9C-%EB%B0%98%EB%B3%B5-while-%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;이어서, 또 하나의 제어 구문 &amp;ldquo;반복&amp;quot;에 대해 알아보겠다. 반복은 2개의 구문으로 되어 있다. 첫번째 조건을 사용하여 반복을 체크하는 &amp;ldquo;while&amp;quot;구문이라는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while 구문의 기본형 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;while 조건:
    반복 처리 ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;while 구문의 기본형 (2)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;while 조건:
    반복 처리 ......
else :
    반복 종료시 처리 ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서도 &amp;ldquo;조건&amp;quot;라는 것이 등장했다. 이것은 if에서 나온 조건과 동일하다. 즉, &amp;ldquo;True인가? False인가?&amp;ldquo;를 확인하는 수식 및 변수 혹은 값이다.&lt;/p&gt;
&lt;p&gt;이 while 구문은 조건을 확인하고 그것이 True인 동안에는 그 구문의 처리를 반복 실행을 계속한다. 그리고 조건이 False가 되면 반복에서 빠져 나와 다음 처리를 한다. 만약, else:문이  있었다면, 반복을 빠져 나오면서 이를 실행한다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 샘플을 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x = 100
count = 1
total = 0
while count &amp;lt;= x: 
    total = total + count 
    count = count + 1
else: 
    print(str(x) + &amp;#34;까지 합계는 &amp;#34; + str(total) +&amp;#34;이다.&amp;#34;) 
print(&amp;#34;.....end.&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1에서 변수 x까지의 합을 계산하고 표시하는 샘플이다. x의 값을 다양하게 변경하여 결과를 확인해 보도록 하자.&lt;/p&gt;
&lt;p&gt;이 샘플에서는 &amp;ldquo;while count &amp;lt;= x:&amp;ldquo;와 같은 while의 조건을 설정한다. 즉, count 값이 x보다 작거나 같은 동안 반복을 계속하고, x보다 커지면 빠져 나오게 된다.&lt;/p&gt;
&lt;p&gt;결국은 당연 하지만, 반복 실행하는 과정에서 변수 count 값이 조금씩 커지게 하지 않으면 안된다. 그렇지 않으면, while에서 영원히 벗어날 수 없게 되어 버린다. 이런 경우를 &amp;ldquo;무한 루프&amp;quot;라고 한다. while을 사용할 때에는 이런 무한 루프에 빠지지 않도록 조건의 내용과 그 결과가 반복에서 어떻게 변화해 가는가를 잘 생각해서 작성을 해야 한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 구문(statement) | 많은 값을 순서대로 반복하는 for구문</title>
      <link>https://www.devkuma.com/docs/python/%EB%A7%8E%EC%9D%80-%EA%B0%92%EC%9D%84-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EB%B0%98%EB%B3%B5%ED%95%98%EB%8A%94-for%EA%B5%AC%EB%AC%B8/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EB%A7%8E%EC%9D%80-%EA%B0%92%EC%9D%84-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EB%B0%98%EB%B3%B5%ED%95%98%EB%8A%94-for%EA%B5%AC%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;사실, 반복에는 또 다른 구문이 있다. 그것은 &amp;ldquo;for&amp;quot;구문이다. 이 for는 &amp;ldquo;많은 값을 순서대로 처리하는 경우&amp;quot;에 사용한다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;for 구문의 기본형 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 변수 in 많은 값:
    반복 처리 ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;for 구문의 기본형 (2)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 변수 in 많은 값:
    반복 처리 ......
else :
    반복 종료시 처리
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;프로그래밍 언어에는 &amp;ldquo;많은 값을 한곳에 모아 처리하는 기능&amp;quot;이 준비되어 있다. for는 그러한 것들을 위한 전용 반복 구문이다. 즉, 많은 값을 차례로 꺼내 처리를 실행하는 것은 결국에 준비되어 있는 모든 값에 대해 반복을 하는 것이다.&lt;/p&gt;
&lt;p&gt;이 &amp;ldquo;많은 값&amp;quot;이라는 것이 무엇인가 대해 실제 사용 예제로 알아보도록 하자. 아래의 예제는 이전 페이지에서 while에 대한 샘플을 for 구문에 쓰고 다시 작성한 거다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;까지의 합계는 &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;....end.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 range(&amp;hellip;)는 본 적이 없는 것이 사용되고 있는데, 이것은 &amp;ldquo;1에서 변수 x까지의 모든 숫자를 하나의 묶음으로 만드는 함수&amp;quot;이다. 이것으로 &amp;ldquo;1,2, 3 &amp;hellip; 100&amp;quot;는 모든 숫자를 하나의 묶음을 만들고 그 하나 하나를 꺼내 total에 더해 가고 있는 거다.&lt;/p&gt;
&lt;p&gt;그런데, 이 for문을 사용하기 위한 포인트는 &amp;ldquo;많은 값을 모은 것&amp;quot;이라는 게 무엇인가? 라는 점인데, 이것은 일반적으로 &amp;ldquo;배열&amp;quot;라는 것이다. 다음에는 배열과 그와 관련된 것에 대해 설명하기로 하겠다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전</title>
      <link>https://www.devkuma.com/docs/python/%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8A%9C%ED%94%8C-%EB%A0%88%EC%9D%B8%EC%A7%80-%EC%84%B8%ED%8A%B8-%EC%82%AC%EC%A0%84/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8A%9C%ED%94%8C-%EB%A0%88%EC%9D%B8%EC%A7%80-%EC%84%B8%ED%8A%B8-%EC%82%AC%EC%A0%84/</guid>
      <description>
        
        
        &lt;p&gt;Python에는 여러 값을 처리하는 것(컨테이너)가 일부 포함되어 있다. 그 기본적인 사용법에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python</title>
      <link>https://www.devkuma.com/docs/python/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/python/python.jpg&#34; alt=&#34;Python&#34;&gt;&lt;/p&gt;
&lt;p&gt;Python는 PHP 및 Ruby 등과 같이 누구나 즉시 배울 수 있는 스크립트 언어이다.&lt;br&gt;
A.I. 개발 등으로 최근 지명도가 높아지고 있는 Python.&lt;br&gt;
그 기초 부분을 여기에서 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 배열 = 리스트?</title>
      <link>https://www.devkuma.com/docs/python/%EB%B0%B0%EC%97%B4-%EB%A6%AC%EC%8A%A4%ED%8A%B8/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EB%B0%B0%EC%97%B4-%EB%A6%AC%EC%8A%A4%ED%8A%B8/</guid>
      <description>
        
        
        &lt;p&gt;프로그래밍 언어는 여러 값을 한곳에 모아 처리하는 특별한 변수 같은 것이 대부분 준비되어 있다. 일반적으로 &amp;lsquo;배열&amp;rsquo;로 불리는 것으로, 이것은 번호를 붙여 값을 관리 할 수 있다. 예를 들어, &amp;ldquo;1번의 값을 XX로 변경&amp;rdquo; 또는 &amp;ldquo;3번 값을 꺼내기&amp;quot;라고 하여, 많은 값을 번호로 관리한다.&lt;/p&gt;
&lt;p&gt;Python에서 제공되는 배열 기능은 &amp;ldquo;목록&amp;quot;라는 것이다. 이것은 다음과 같은 형태로 작성된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = [값1, 값2, ...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[] 안에는 각각의 값을 쉼표로 구분하여 작성한다. 이것으로 그 값을 순서에 번호를 매긴 목록이 만들어 진다. 이 번호는 일반적으로 &amp;ldquo;인덱스&amp;quot;라고 한다.&lt;/p&gt;
&lt;p&gt;중요한 것은 &amp;ldquo;인덱스는 0부터 시작한다&amp;quot;라는 점이다. 즉, 첫 번째 값은 &amp;ldquo;0번&amp;quot;이 되고 두 번째 값이 &amp;ldquo;1번&amp;rdquo;, 세 번째 값이 &amp;ldquo;2번&amp;rdquo; &amp;hellip;..와 같은 식으로 넘버링이 된다. 10개의 값이 있었다면, 인덱스 번호는 0~9이다 (1~10이 아니다!).&lt;/p&gt;
&lt;p&gt;목록에 있는 개별 요소를 꺼낼 경우, &amp;ldquo;변수[번호]&amp;ldquo;라는 식으로 작성한다. 예를 들어,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arr[0] = &amp;#34;OK&amp;#34;
val = arr[1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 사용할 수 있다. 이것으로 목록에 지정된 번호의 요소를 변경하거나 제거할 수 있다.&lt;/p&gt;
&lt;p&gt;아래에는 간단한 사용 예제를 살펴보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arr = [&amp;#39;hello&amp;#39;,&amp;#39;welcome&amp;#39;,&amp;#39;good-bye&amp;#39;]
for n in arr:
    print(n)
 
print(&amp;#34;....end.&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 이전에 소개한 &amp;ldquo;for ~ in &amp;hellip;&amp;ldquo;구문을 사용하여 목록에있는 모든 요소를 반복해 나가고 있다. 이 구문은&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 변수 in 목록 :
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 작성하여 목록에서 순서대로 값을 꺼내서 변수로 얻어서 반복을 실행한다. 목록과 for는 매우 잘 사용되므로, 두 세트 꼭 기억하도록 하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 리스트와 텍스트의 관계</title>
      <link>https://www.devkuma.com/docs/python/%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84/</guid>
      <description>
        
        
        &lt;p&gt;목록은 다양한 곳에서 사용되지만, 실제로는 뜻밖의 곳에서 사용될 수 있다. 그것은 &amp;ldquo;텍스트&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;Python에서 텍스트의 값은 &amp;ldquo;문자 목록&amp;quot;으로 처리 할 수 있다. 예를 들어 &amp;ldquo;Hello&amp;quot;라는 텍스트는&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;str = [&amp;#39;H&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 5개의 문자 목록으로 생각할 수도 있는 거다. 예를 들면, str[0] 이것으로 &amp;lsquo;H&amp;rsquo;의 문자를 꺼낼 수 있다.&lt;/p&gt;
&lt;p&gt;그러나 이렇게 하는 경우는 &amp;ldquo;문자를 꺼낼 때&amp;quot;뿐이다. 같은 방법으로 문자를 변경할 수 없다. 즉, 텍스트와 목록이 같은 것은 아니다. 어디까지나 &amp;ldquo;텍스트 내의 문자를 꺼내기 위해 목록을 이용할 수 있도록 하고 있다&amp;quot;고 생각하면 된다. 이렇게 하면 매우 알기 쉽게 텍스트 내의 문자를 검색 할 수 있다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 사용 예제를 보도록 하자. &amp;ldquo;Hello&amp;quot;텍스트부터 문자를 제거하고, 새 텍스트를 생성하는 샘플이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;str = &amp;#34;Hello&amp;#34;
str2 = &amp;#34;&amp;#34;
for n in str:
    str2 = str2 + (n * 2) + &amp;#39;~&amp;#39;
print(str2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;실행해 보면 &amp;ldquo;HH~ee~ll~ll~oo~&amp;ldquo;와 텍스트가 표시된다. 텍스트 내의 문자를 다루기 위하여 목록을 사용할 수 있다. 이를 기억해두면 꽤 편리할 거다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 튜플은 변경 불가능한 리스트?</title>
      <link>https://www.devkuma.com/docs/python/%ED%8A%9C%ED%94%8C%EC%9D%80-%EB%B3%80%EA%B2%BD-%EB%B6%88%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%8A%9C%ED%94%8C%EC%9D%80-%EB%B3%80%EA%B2%BD-%EB%B6%88%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8/</guid>
      <description>
        
        
        &lt;p&gt;이 목록에 비슷 &amp;ldquo;튜플&amp;quot;라는 것도 Python에 있다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = (값1, 값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값을 꺼낼 때는 변수와 마찬가지로 []에 인덱스를 지정한다. 예를 들어, str[0]와 같은 식으로 쓰면 된다.&lt;/p&gt;
&lt;p&gt;그럼 기존 목록과 튜플은 무엇이 다른가? 그것은 &amp;ldquo;튜플 값을 변경할 수 없다&amp;quot;는 점이다. 즉, &amp;lsquo;변수&amp;rsquo;가 아니라 &amp;lsquo;상수&amp;rsquo;이다.&lt;/p&gt;
&lt;p&gt;프로그래밍 세계에서는 변수처럼 값을 자유롭게 변경할 수 있는 것도 중요하지만, 반대로 &amp;ldquo;값을 변경할 수 없다&amp;quot;는 것도 중요하다. 어디선가 마음대로 값이 갱신 된다면 문제가 발생하게 된다 &amp;hellip;&amp;hellip; 그런 중요한 값을 배열처럼 많이 이용하려면 목록으로는 곤란한다.&lt;/p&gt;
&lt;p&gt;튜플은 값이 변하지 않는 것이 보증된 목록이다. 그렇게 생각하면, 이 튜플을 사용하는 경우가 없지 않나?라고 생각 할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;이런 &amp;ldquo;변경 불가능한 컨테이너&amp;quot;는 튜플 외에도 있다. 앞장에서 잠깐 나온 레인지(range) 등이 있다. 이러한 변경 불가 것을 &amp;ldquo;불변 객체(immutable)&amp;ldquo;라고 한다.&lt;/p&gt;
&lt;p&gt;이에 대해 변경이 가능한 것은 &amp;ldquo;가변 객체(mutable)&amp;ldquo;라고 한다. 목록는 mutable 컨테이너의 대표라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 &amp;ldquo;튜플로 제공한 값을 나중에 목록으로 사용하고 싶다&amp;quot;라고 하는 경우는 어떻게 해야 하나? 이러한 경우에는 변환을 해주는 함수를 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;튜플을 목록으로 변환&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = list(튜플)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;목록을 튜플로 변환&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = tuple(목록)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그럼 아래 튜플과 리스트의 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tp&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ls&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;ls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;튜플 tp를 준비해서 거기에서 목록 ls를 만들고, 목록의 값을 변경한다. 출력 결과를 보면서 ls값과 tp값이 어떻게 사용되고 있는지 생각해 보자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 수열을 다루는 레인지</title>
      <link>https://www.devkuma.com/docs/python/%EC%88%98%EC%97%B4%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EB%A0%88%EC%9D%B8%EC%A7%80/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%88%98%EC%97%B4%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EB%A0%88%EC%9D%B8%EC%A7%80/</guid>
      <description>
        
        
        &lt;p&gt;시퀀스 동료의 마지막은 &amp;ldquo;레인지(range)&amp;ldquo;이다. 이것은 이전에 등장 했었다. for 등에서 숫자의 범위를 지정하는데,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for n in range(10)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 쓰기도 했다. 이 range(10)라는 것이 레인지이다. 레인지는 다음과 같이 만든다. 알기 쉽게 예로서, 생성된 레인지에 포함되는 수열을 리스트로 표시해 두었다.&lt;/p&gt;
&lt;h2 id=&#34;0부터-지정한-값의-직전까지의-범위&#34;&gt;0부터 지정한 값의 직전까지의 범위&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = range(종료 값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;range (10)
↓
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   &lt;/p&gt;
&lt;h2 id=&#34;지정된-값부터-지정한-값의-직전까지의-범위&#34;&gt;지정된 값부터 지정한 값의 직전까지의 범위&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = range (시작 값, 종료 값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;range(10, 20)
↓
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;지정된-값부터-지정된-값의-앞까지-일정한-간격으로-값을-얻는-범위&#34;&gt;지정된 값부터 지정된 값의 앞까지 일정한 간격으로 값을 얻는 범위&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = range(시작 값, 종료 값 간격)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;range(10, 50, 5)
↓
[10, 15, 20, 25, 30, 35, 40, 45]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;레인지는 차례를 잘 늘어놓은 수열을 만들기 위한 것이다. 이것은 물론 일반적인 용도로도 사용할 수 있지만, 가장 많이 사용하는 것은 for일 것이다. for문으로 반복 처리할 때, 반복 범위 지정을 위해 레인지를 사용하는 경우가 가장 많은 것이다.&lt;/p&gt;
&lt;p&gt;그럼 아래의 목록 란에 간단한 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;range 값을 for으로 순서대로 출력하고 있다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 시퀀스 기능</title>
      <link>https://www.devkuma.com/docs/python/%EC%8B%9C%ED%80%80%EC%8A%A4-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%8B%9C%ED%80%80%EC%8A%A4-%EA%B8%B0%EB%8A%A5/</guid>
      <description>
        
        
        &lt;p&gt;목록 등의 &amp;ldquo;여러 값을 한꺼번에 처리한다&amp;quot;라는 것은 매우 유용하지만, 그러나 처음부터 고정된 수의 요소 밖에 사용할 수 없다면 조금 융통성이 없어 보인다.&lt;/p&gt;
&lt;p&gt;하지만 염려하지 말자. 목록에는 요소를 추가하거나 제거하는 기능이 제대로 마련되어 있다.&lt;/p&gt;
&lt;p&gt;그 대부분은 &amp;ldquo;순서&amp;quot;에 포함되어 있는 기능이다. 즉, 리스트, 튜플, 범위 중에서도 사용할 수 있는 기능이라는 것이다. 그럼 시퀀스의 기본적인 기능에 대해 정리해 보자.&lt;/p&gt;
&lt;h2 id=&#34;새로운-요소를-추가&#34;&gt;새로운 요소를 추가&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;목록.append(값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록의 가장 마지막에 값을 추가한다.&lt;/p&gt;
&lt;h2 id=&#34;지정된-인덱스-위치에-값을-삽입&#34;&gt;지정된 인덱스 위치에 값을 삽입&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;목록.insert(인덱스, 값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록의 지정된 인덱스 번호의 위치에 값을 삽입한다.&lt;/p&gt;
&lt;h2 id=&#34;지정된-값을-제거&#34;&gt;지정된 값을 제거&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;목록.remove(값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;지정된 값을 목록에서 제거한다.&lt;/p&gt;
&lt;h2 id=&#34;지정된-인덱스-번호의-요소-제거&#34;&gt;지정된 인덱스 번호의 요소 제거&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;del 목록 [번호]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록 정해진 번호의 값을 제거하는 것이다. 이것은 del 후에 목록 삭제하는 인덱스 번호를 지정하여 작성한다. del 다음에, () 필요 없다.&lt;/p&gt;
&lt;p&gt;여기까지 &amp;ldquo;추가&amp;rdquo;, &amp;ldquo;삽입&amp;rdquo;, &amp;ldquo;삭제&amp;quot;라는 것은 시컨스라고 해도 목록 밖에 대응되지 않는다. 왜냐하면, 이것은 목록 수정하는 작업이기 때문이다. 튜플과 레인지는 불변 객체 (변경 불가)이므로 이러한 작업은 할 수 없다.&lt;/p&gt;
&lt;p&gt;이후에는 3개의 컨테이너에 공통되는 것이다. &amp;ldquo;시퀀스 전반에서 사용할 수 있는 기능&amp;quot;이다.&lt;/p&gt;
&lt;h2 id=&#34;컨테이너의-덧셈&#34;&gt;컨테이너의 덧셈&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 컨테이너 + 컨테이너
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록과 튜플은 &amp;ldquo;+&amp;ldquo;로 덧셈을 할 수 있다. 2개의 컨테이너를 1개에 연결한 것을 만들 수 있다. 레인지는 수열이라는 이유로 해당하지 않는다.
   &lt;/p&gt;
&lt;h2 id=&#34;컨테이너의-곱셈&#34;&gt;컨테이너의 곱셈&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 컨테이너 * 정수
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;컨테이너의 값을 지정한 수 만큼 연결 한 것을 만든다. 예를 들어, 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[1, 2, 3] * 3
↓
[1, 2, 3, 1, 2, 3, 1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;인덱스의-범위를-반환&#34;&gt;인덱스의 범위를 반환&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 컨테이너[시작 값:종료 값]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;인덱스 번호로 지정된 범위의 값을 꺼내기 위한 것이다. 예를 들어, [2:5]라고 하면 2~5의 인덱스 번호의 요소를 컨테이너에서 반환한다.&lt;/p&gt;
&lt;p&gt;   &lt;/p&gt;
&lt;h2 id=&#34;값이-포함되어-있는지&#34;&gt;값이 포함되어 있는지?&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;값 in 컨테이너
값 not in 컨테이너
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 값이 컨테이너에 포함되어 있는지 여부를 확인한다. 결과는 부울이다. in은 값이 포함되어 있으면 True, 없으면 False이다. not in 반대로 포함되어 있으면 False, 없으면 True이다.&lt;/p&gt;
&lt;h2 id=&#34;요소의-개수-얻기&#34;&gt;요소의 개수 얻기&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = len(컨테이너)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그 컨테이너에 몇개의 값이 저장되어 있는지를 정수로 반환한다.&lt;/p&gt;
&lt;h2 id=&#34;최대-값-최소값-얻기&#34;&gt;최대 값, 최소값 얻기&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = max(컨테이너)
변수 = min(컨테이너)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;컨테이너에 저장되어 있는 값 중에서 가장 큰 것, 가장 작은 것을 찾아서 반환한다.&lt;/p&gt;
&lt;p&gt;대충 이것들을 사용해 리스트 내의 요소를 사용할 수 있게 되면 매우 편리하다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 사용 예를 들어 둡니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arr = [&amp;#39;hello&amp;#39;,&amp;#39;bye&amp;#39;] 
arr.append(&amp;#39;finish!&amp;#39;) 
arr.insert(1, &amp;#39;welcome&amp;#39;) 
arr.remove(&amp;#39;bye&amp;#39;) 
for n in arr: 
    print(n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록 arr에 새로운 값을 추가하거나 삭제한 결과를 출력한다. 최초의 입력한 목록과는 대부분 저장된 값이 변화하고 있는 것을 알 수 있을 거다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 집합을 다루는 세트</title>
      <link>https://www.devkuma.com/docs/python/%EC%A7%91%ED%95%A9%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EC%84%B8%ED%8A%B8/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%A7%91%ED%95%A9%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EC%84%B8%ED%8A%B8/</guid>
      <description>
        
        
        &lt;p&gt;여기까지의 리스트, 튜플, 범위는 모든 시퀀스라는 것이었다. 바꿔 말하면, 인덱스 번호를 사용하여 값에 일련 번호를 할당하고 순차적으로 정리하는 컨테이너였다.
   
하지만, Python에는 &amp;ldquo;값이 순차적이지 않는 컨테이너&amp;quot;도 있다. 그 중 하나가 &amp;ldquo;세트(set)&amp;ldquo;이다.
   
세트는 집합의 컨테이너이다. 세트는 값을 순서대로 정리하지 않는다. 세트 안에는 동일한 값을 여러개로 가질 수 없다. 저장되어 있는 값과 같은 값은 세트에 존재하지 않는 것이다.&lt;/p&gt;
&lt;p&gt;이 세트는 {} 기호를 붙여 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = {값1, 값2, ...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또는 set 함수를 사용하여 만들 수 있다. 인수에는 목록 등의 컨테이너를 제공한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = set(값1, 값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이제 세트를 만들 수 있다. 그러나! 인덱스가 없기 때문에, 여기에서 필요한 값을 뺄 수 없다. 그럼, 무엇을 위해 있는지?라고 생각할 수도 있다. 세트는 집합이다. 따라서 어떤 값이 이 집합에 포함되어 있는지에 대한 여부를 확인할때 사용을 한다.&lt;/p&gt;
&lt;h2 id=&#34;세트-조작&#34;&gt;세트 조작&lt;/h2&gt;
&lt;p&gt;세트에서도 세트를 조작하는 기능이 여러가지 준비되어 있다. 그러나 주의하지 않으면 안되는 것은, &amp;ldquo;세트는 값의 순서가 없다&amp;quot;는 점이다. 이것을 잊지 말고 가보도록 하자.
   
   &lt;/p&gt;
&lt;h3 id=&#34;값-추가&#34;&gt;값 추가&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;세트.add(값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값 추가는 &amp;ldquo;add&amp;quot;라는 것을 사용한다. 이것으로 ()안에 값이 세트에 추가된다. 그러나 이미 세트에 동일한 값이 있는 경우는 아무런 변화가 없다.
   
   &lt;/p&gt;
&lt;h3 id=&#34;값을-삭제&#34;&gt;값을 삭제&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;세트.remove(값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값 삭제는 remove를 사용한다. 이것은 시컨스와 같다. 이것으로 ()안의 값이 세트에서 삭제된다.
   &lt;/p&gt;
&lt;h3 id=&#34;요소의-개수-얻기&#34;&gt;요소의 개수 얻기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = len(세트)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그 세트에 몇개의 값이 저장되어 있는지를 정수를 반환다. 이것은 이미 나왔던 거다.
   
   &lt;/p&gt;
&lt;h3 id=&#34;최대-값-최소값-얻기&#34;&gt;최대 값, 최소값 얻기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = max(세트)
변수 = min(세트)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;세트에 저장되어 있는 값 중에서 가장 큰 것, 작은 것을 찾아서 반환해 준다. 이것도 시컨스에서 사용했었다.&lt;/p&gt;
&lt;h3 id=&#34;세트의-뺄셈&#34;&gt;세트의 뺄셈&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;세트1 - 세트2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;세트는 덧셈과 곱셈은 없지만, 뺄셈은 있다. 이것으로 &amp;ldquo;세트1&amp;quot;에서 &amp;ldquo;세트2&amp;rdquo; 요소를 제거한 나머지를 새로운 세트로 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;   &lt;/p&gt;
&lt;h3 id=&#34;세트의-비교-연산&#34;&gt;세트의 비교 연산&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;세트1 == 세트2 등
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;세트는 비교 연산이 가능하다. = &amp;lt;&amp;gt; 등의 기호 류를 사용한 비교 식을 사용하여 두 세트를 비교할 수 있다. 다만, &amp;lt;&amp;gt;는 &amp;ldquo;어느 쪽의 세트가 크거나 작다&amp;quot;는 의미는 아니다. 이것은 &amp;ldquo;어딘가가 어딘가에 포함되어 있는지&amp;quot;를 나타낸다. 예를 들어 A&amp;gt;B라고 하면, &amp;ldquo;A세트에 B세트가 포함되어 있는지&amp;quot;를 나타낸다.
   
   &lt;/p&gt;
&lt;h3 id=&#34;세트의-논리-연산&#34;&gt;세트의 논리 연산&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; 세트1 &amp;amp; 세트2
 세트1 | 세트2
 세트1 ^ 세트2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 논리 연산은 집합인 세트 특유의 것이다. 이것들은 두개의 세트(집합)을 연산하여 새로운 세트를 만든다. 이것은 다음의 연산자를 사용해서 세트를 만들어 낸다.
 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;2개의  세트에 공통되는 요소만을 가진 세트를 생성한다. (논리적)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td&gt;2개의 세트에 있는 모든 요소를 가진 세트를 생성한다. (논리합)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td&gt;두 세트의 어느 한쪽에만 있는 요소로 구성된 세트를 생성한다. (배타적 논리합)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;마지막 논리 연산은 조금 이해하기 어려울지도 모른다. 실제 사용 예제를 참고하여 여러가지를 시도해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c3&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 리스트, 튜플, 레인지, 세트, 사전 | 키 값을 관리하는 사전</title>
      <link>https://www.devkuma.com/docs/python/%ED%82%A4-%EA%B0%92%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%82%AC%EC%A0%84/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%82%A4-%EA%B0%92%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%82%AC%EC%A0%84/</guid>
      <description>
        
        
        &lt;p&gt;목록도 튜플도 인덱스라는 번호를 사용하여 값을 관리한다는 점에서는 같았다. 이 숫자가 아닌 &amp;ldquo;이름&amp;quot;을 사용하여 값을 관리하는 것도 Python에는 제공이 되어 있다. 그것은 &amp;ldquo;사전(dictionary)&amp;ldquo;이 라는 것이다.
 
사전은 &amp;lsquo;키워드&amp;rsquo;라는 이름을 붙여 값을 관리한다. 그리고 값을 제거하거나 변경하는 경우에는 그 값의 키를 지정한다. 사전은 다음과 같은 형태로 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = {키1:값1, 키2:값2, ...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또는 dict라는 것을 사용하여 만들 수 있다. 다만, 이 경우는 작성 방식이 조금 다르기 때문에 주의해야 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = dict (키1=값1, 키2=값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전에서 값을 꺼내는 경우는 시퀀스와 마찬가지로 []를 사용한다. 다만, 인덱스가 아닌 키워드를 []로 지정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전[키]
사전[키] = 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전을 이용했을 때, 초보자가 착각하기 쉬운 것은 &amp;ldquo;사전은 키를 사용해도 다른 것과 동일하게 값을 꺼낼 수 있다&amp;quot;라는 생각이다. 즉, 키로도 꺼낼수 있고, 번호로도 꺼낼 수 있다라고 생각할 수 있다. 하지만 사전은 &amp;ldquo;키&amp;quot;밖에 사용할 수 없다. 다시 말하면, 사전에 있는 값을 번호 순서대로 추출 할 수 없다.
 &lt;/p&gt;
&lt;h2 id=&#34;for-in-주의&#34;&gt;for in 주의!&lt;/h2&gt;
&lt;p&gt;모든 요소를 처리하기 위한 &amp;ldquo;for ~ in&amp;quot;구문은 사전에서도 사용할 수 있지만, 그 동작이 미묘하게 다르므로 주의가 필요하다.&lt;/p&gt;
&lt;p&gt;리스트나 튜플에서 &amp;ldquo;for 변수 in 목록&amp;quot;이라고 하면, 리스트의 값이 변수로 꺼낸진다. 하지만 사전의 경우 꺼내지는 것은 각각의 &amp;ldquo;값&amp;quot;이 아니고 &amp;ldquo;키&amp;quot;이다. 즉, 변수에 추출된 키를 사용하여 값을 꺼내 사용하는 형태가 되는 거다.
   
그럼, 아래에 간단한 사용 예를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dic = {&amp;#39;taro&amp;#39;:&amp;#39;taro@yamada.com&amp;#39;, 
       &amp;#39;hanako&amp;#39;:&amp;#39;hanako@flower&amp;#39;, 
       &amp;#39;ichiro&amp;#39;:&amp;#39;ichiro@baseball&amp;#39;} 
for n in dic: 
    print(n + &amp;#39; (&amp;#39; + dic[n] + &amp;#39;)&amp;#39;) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 각각의 이름을 키로하여 이메일 주소를 설정하고 있다. for를 사용하여 사전의 모든 데이터를 표시하고 있다. 사전을 사용하면, 이 처럼 작은 데이터베이스와 같은 사용이 가능해 진다.&lt;/p&gt;
&lt;h2 id=&#34;사전-조작&#34;&gt;사전 조작&lt;/h2&gt;
&lt;p&gt;사전도 다른 컨테이너와 같은 방법으로 조작 할 수 있는 기능이 여러가지가 제공되어 있다. 주요한 것에 대해 정리하겠다.&lt;/p&gt;
&lt;h3 id=&#34;-값-추가&#34;&gt;· 값 추가&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;사전[키] = 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전에 새로운 값을 추가하는 것은 간단한다. []으로 추가할 키워드를 지정하고 값을 대입하면 된다. 사전에서 해당 키워드가 아직 사용되지 않고 있다면, 새로운 키워드 항목이 추가된다. append와 add와 같은 기능의 함수가 필요없다.
   &lt;/p&gt;
&lt;h3 id=&#34;값-삭제&#34;&gt;값 삭제&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;del 사전[키]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값을 삭제하려면, remove는 사용할 수 없다. del을 사용하여 삭제한다.
 &lt;/p&gt;
&lt;h3 id=&#34;모든-키-얻기&#34;&gt;모든 키 얻기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;모든-값-얻기&#34;&gt;모든 값 얻기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전.values()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;모든-항목키-값-얻기&#34;&gt;모든 항목(키, 값) 얻기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전.items ()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전에 키워드와 값을 함께 얻는 기능이 있다. keys/values는 사전에 저장되어 있는 모든 키워드/값을 컨테이너로 모와서 꺼낸다. 또한, items는 키워드와 값을 튜플에 정리한 것을 얻는 거다.&lt;/p&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;사전는 목록 등에 비해 &amp;lsquo;키워드 값을 꺼내기&amp;rsquo;라는 특성상 다소 특수한 용도로 사용된다. 데이터의 순서가 중요하지 않는 경우라면, 데이터  이름을 붙여 관리하는 것이 번호로 관리하는 것보다 압도적으로 편리하다. 프로그램 작성에 있어서 경우에 따라 &amp;ldquo;리스트로 하는 것이 좋을지, 사전을 사용하는 편이 편리할지&amp;quot;를 생각해서 이용하도록 하자.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function)</title>
      <link>https://www.devkuma.com/docs/python/function/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/function/</guid>
      <description>
        
        
        &lt;p&gt;스크립트의 일부분을 잘라내어 언제든지 사용할 수 있도록 하는 &amp;ldquo;함수&amp;rdquo;, 이것을 잘 다루면 긴 프로그램을 구조적으로 조립이 가능하다. 그 기본을 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function) | 함수란?</title>
      <link>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EB%9E%80/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EB%9E%80/</guid>
      <description>
        
        
        &lt;p&gt;스크립트라고 하는 것은, 같은 처리를 여러번 반복하는 경우가 많다. 그 때마다 일일이 같은 스크립트를 여러번 쓰는 것은 매우 귀찮다. 이러한 &amp;ldquo;정해진 처리&amp;quot;를 언제 어디서나 호출할 수 있도록 하는 것이 &amp;ldquo;함수&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;예를 들어, 아래에 올린 예제(1)과 같은 예를 생각해 보자. 변수에 이름을 넣어 &amp;ldquo;Hello, OO. How are you?&amp;ldquo;라고 출력하는 스크립트이다. 이것은 유사한 텍스트를 출력하기 위해, 유사한 print 문을 여러번 작성을 하였다. 어쩐지 너무 바보 같지 않은가?
   
&lt;strong&gt;예제 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Ichiro&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;. How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;. How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;. How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이러한 때 &amp;ldquo;함수&amp;quot;가 도움이 된다. 예제(2) 함수를 사용하여 다시 작성한 것이다. 첫째로, 정해진 형태로 출력하는 함수를 먼저 준비해두면, 그 후로는 &amp;ldquo;showMsg(&amp;ldquo;Taro &amp;ldquo;)&amp;ldquo;라고 하면 언제든지 호출 할 수 있다. 호출을 하는 것만으로 지정된 형태의 메시지가 표시될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;예제(2)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def showMsg(str): 
    print(&amp;#34;Hello, &amp;#34; + str + &amp;#34;. How are you?&amp;#34;) 
   
showMsg(&amp;#34;Taro&amp;#34;) 
showMsg(&amp;#34;Hanako&amp;#34;) 
showMsg(&amp;#34;Ichiro&amp;#34;) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 짧은 메시지를 표시 할 뿐이지만만, 좀 더 복잡한 처리가 되면 &amp;ldquo;한번 스크립트를 작성해 놓으면, 그것은 언제든지 호출하여 실행할 수 있다&amp;quot;라는 것은 매우 편리하다라는 것을 알 수있을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;print도-함수&#34;&gt;print도 함수?&lt;/h2&gt;
&lt;p&gt;이 함수라는 것은 이미 실은 여러분은 사용하고 있었다. 값을 출력하는 &amp;ldquo;print&amp;quot;이다. Python은 기본적으로 많은 기능을 사용할 수 있게 되어 있다. 대부분은 &amp;ldquo;함수&amp;quot;로 준비되어 있는 것이다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function) | 함수의 정의</title>
      <link>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EC%9D%98-%EC%A0%95%EC%9D%98/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EC%9D%98-%EC%A0%95%EC%9D%98/</guid>
      <description>
        
        
        &lt;p&gt;이제 이 함수는 어떻게 만드는지, 설명하겠다. 함수는 다음과 같은 형태로 정의한다.
   
&lt;strong&gt;함수의 정의 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;이름&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;인수1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;인수&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;수행&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;할&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;작업&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;함수 정의의 기본은 &amp;ldquo;def 함수 이름&amp;quot;이다. 이전에 샘플(2)는 &amp;ldquo;def showMsg ~&amp;ldquo;라고 되어 있기 때문에, showMsg라는 함수가 만들어진 것이다.&lt;/p&gt;
&lt;p&gt;그리고 함수 이름 뒤에 ():을 붙이고 그 이후로는 줄 바꿈하고 들여 쓰기를 하여, 수행할 처리를 작성한다.&lt;/p&gt;
&lt;p&gt;(): 안에는 &amp;lsquo;인수&amp;rsquo;라는 것을 추가할 수 있다. 인수는 함수를 호출할 때에 어떤 값을 받아서 전달하는데 사용한다. 예를 들어 샘플(2)에서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 되어 있었다. 이는 ()안에 있는 &amp;ldquo;str&amp;quot;라는 인수가 포함되어 있다는 것이다.&lt;/p&gt;
&lt;p&gt;이것은 &amp;ldquo;이 함수를 호출 할 때, 어떤 값을 함께 쓰기 때문에, 그것을 str이라는 변수에 넣어 전달한다&amp;quot;라는 의미이다. 샘플에서 호출하는 부분을 살펴 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;자, 이런 식으로 함수 이름 뒤에 ()를 붙이고, &amp;ldquo;Taro&amp;quot;라는 값이 작성되어 있는 걸까? 이 &amp;ldquo;Taro&amp;quot;가 showMsg 함수의 &amp;ldquo;str&amp;rdquo; 변수에 전달된다.&lt;/p&gt;
&lt;p&gt;실행중인 처리를 보면, 이렇게 되어 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;. How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;전달된 변수로 str을 사용하여 메시지를 print하고 있는 것을 알 수 있다.
   
인수는 하나뿐 아니라 얼마든지 추가할 수 있다. 이 경우 각각의 변수를 쉼표로 구분하여 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런 식이다. 인수가 없는 경우에도 ()은 붙이지 않으면 안된다.
 
함수를 이용하는데 있어서 최소한 기억하지 않으면 안 것은 우선 이것뿐이다. 의외로 간단하지 않는가?&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function) | 반환 값</title>
      <link>https://www.devkuma.com/docs/python/%EB%B0%98%ED%99%98-%EA%B0%92/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EB%B0%98%ED%99%98-%EA%B0%92/</guid>
      <description>
        
        
        &lt;p&gt;함수는 함수 이름과 인수가 제대로 알면 정의 할 수 있다. 사실은 함수 정의 부분에 나타나지 않는 또 하나의 중요한 요소가 있다. 그것은 &amp;ldquo;반환 값&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;반환 값은 함수를 실행한 후, 어떤 값을 호출한 곳에 돌려주는 역할을 한다. 이 반환 값은 &amp;ldquo;return&amp;quot;이라는 것을 사용하여 설정한다.
   
&lt;strong&gt;함수의 정의 (2)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;이름&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;인수&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;인수&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;수행&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;할&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;작업&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;값&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이와 같이 처리 한 후, 마지막에 &amp;ldquo;return 값&amp;quot;으로 인해 값을 반환하고, 호출 곳에 값이 전달된다.&lt;/p&gt;
&lt;p&gt;실제로 반환 값을 사용해 보자. 이전에 샘플을 반환 값을 반환하는 형태로 고치면 아래와 같다.
 &lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.How are you?&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 showMsg 함수에서 return을 사용하여 텍스트를 반환한다. 이 함수를 호출하는 부분을 보면,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 되어있는 것을 확인할 수 있다. showMsg의 결과를 변수 res에 대입하고, 이것으로 반환 값이 res에 할당되게 된다. 그러고 나서는 이 res를 사용하여 결과를 표시하고 있다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function) | 키워드 인수</title>
      <link>https://www.devkuma.com/docs/python/%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%9D%B8%EC%88%98/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%9D%B8%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;함수를 구성하는 요소 중에 의외로 다기능 것이 &amp;ldquo;인수&amp;quot;이다. 이것은 일반적으로 값을 전달 외에 여러가지 옵션을 가지고 있다.&lt;/p&gt;
&lt;p&gt;먼저 &amp;ldquo;키워드 인수&amp;quot;라는 것이 있다. 이것은 인수에 키워드(이름)을 붙여 사용할 수 있도록 하는 기능이다. 무슨 말인가 하면, 아래와 같은 것이다.
   
&lt;strong&gt;함수의 정의 (3)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; def 함수(키1=초기값1, 키2=초기값2, ...):
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;키와 초기 값을 지정하는 것이다. 그러면 키를 사용하여 인수를 지정할 수 있다. 보통 인수는 순서가 정해져 있지만, 키를 사용하여 순서에 관계없이 값을 작성할 수 있다.&lt;/p&gt;
&lt;p&gt;또한, 초기 값을 설정할 수 있기 때문에 값을 생략할 수 있다 (생략하면 기본값이 사용된다). 보통 인수는 반드시 값을 전달하지 않으면 안되지만, 키워드 인수로 하게 되면 옵션 다루는 (없어도 OK) 인수를 만들 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 실제 사용 예를 살펴 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;footer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;How are you?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;footer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;철수&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;안녕&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;건강하니?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;영희&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;footer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;잘지내니?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;야&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에는 세가지 인수의 지정을 해서 showMsg를 호출한다. showMsg(&amp;ldquo;Taro&amp;rdquo;)와 같이, 첫번째 인수에 이름을 지정하는 것만으로도 제대로 동작하고, 두번째와 세번째는 초기값으로 동작한다.&lt;/p&gt;
&lt;p&gt;또한 키워드는 붙여도 붙이지 않아도 동작한다. 다만, 키워드를 붙이지 않는 경우는 인수가 정의된 순서대로 지정해야 한다. 키워드를 붙여 인수를 작성할 경우는 어떤 순서라도 상관없다.&lt;/p&gt;
&lt;p&gt;여기에서는 키워드가 없는 인수와 있는 인수가 혼재하고 있지만, 이러한 경우에는 반드시 &amp;ldquo;키워드가 없는 인수&amp;quot;를 먼저 정의하고 키워드 인수는 다음에 정의해야 한다. 키워드 인수 후에 키워드가 없는 인수를 지정하면 문법 오류이다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 함수(function) | 가변 인자</title>
      <link>https://www.devkuma.com/docs/python/%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90/</guid>
      <description>
        
        
        &lt;p&gt;인수에 대해 또 다른 설명을 하고 싶은 것이 &amp;ldquo;가변 인자&amp;quot;라는 것이다. 가변 인자라는 것은 &amp;ldquo;길이 (인수의 수)가 가변 인수&amp;quot;이다. 즉, &amp;ldquo;몇 개의 인수를 붙여도 된다&amp;quot;라는 특별한 인수이다.
   
&amp;ldquo;인수가 몇개 있어도 된다? 그것을 어떻게 정의하는 걸까?&amp;ldquo;라고 이상하게 생각 하겠지만, 가능하다. &amp;ldquo;정의 할 수 있지만 어떻게 값을 받을 거야?&amp;ldquo;라고 생각 하겠지만, 받을 수 있다.&lt;/p&gt;
&lt;p&gt;가변 인자라는 것은 알기 쉽게 말하자면, &amp;ldquo;많은 인수를 컨테이너에 모와서 받을 인수&amp;quot;이다. 즉, &amp;ldquo;목록을 인수로 설정한 것&amp;quot;이라고 말할 수 있다. 다만, 목록을 인수에 쓰는 번거로움 때문에, (목록에 보관해 두는 값을) 하나씩 인수에 넣으면 자동으로 그것들을 한꺼번에 넘겨주게 되어 있다.&lt;/p&gt;
&lt;p&gt;이 가변 인자는 다음과 같이 정의한다.
   
&lt;strong&gt;함수의 정의 (4)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;인수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;인수 정의하는 변수 이름 앞에 별표 (*)를 붙이면, 그 인수가 가변 인자로 설정된다. 이 인수에는 여러 인수로 정의한 값이 n개로 모와서 전달된다. 그 후로는 거기로 부터 필요한 값을 꺼내는 처리만 하면 된다.&lt;/p&gt;
&lt;p&gt;그럼 이것도 간단한 예제를 살펴 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;합계 : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;평균 : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;789&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;246&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;357&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;910&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 calc(* num)와 같이 함수를 정의하고 있다. 이것으로 num이라는 변수에 입력된 모든 인수를 컨테이너에 모와서 전달된다. 그 후에는 이 num을 for문으로 반복해 나가면 된다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용</title>
      <link>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;함수뿐만 아니라 다양한 변수를 포함한 큰 프로그램을 하나의 묶음으로 정의하는 것이 &amp;ldquo;클래스(class)&amp;ldquo;이다. 클래스의 기본적인 사용법부터 설명한다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용 | 함수와 클래스</title>
      <link>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%95%A8%EC%88%98%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>
        
        
        &lt;p&gt;함수는 하나의 처리를 하나로 통합한 것이지만, 이런 함수가 많이 늘어나면, 점차적으로 어느 것이 무슨 역할를 하는지 의미를 알기 힘들어 진다. 예를 들어, 수백개의 함수가 나열되어 있으면, 그것을 전부 이해해 나가는 것은 힘들 것이다.&lt;/p&gt;
&lt;p&gt;그래서 &amp;ldquo;비슷한 역할을 하는 것을 한곳에 모으자&amp;quot;라고 누구든지 생각된다.
 
예를 들어, 어떤 데이터 처리를 만드는 것을 생각해 보자. 데이터를 관리하는 함수, 데이터를 추가하는 함수, 데이터를 삭제하는 함수, 데이터를 출력하는 함수 &amp;hellip;&amp;hellip; 따위가 쭉 늘어서 있는 것은 그다지 사용하기가 쉽지 않다.
  
그래서 &amp;ldquo;데이터를 처리하기 위해 필요한 것&amp;quot;을 모두 한 묶음으로 두자&amp;quot;라고 생각하게 된다. 큰 &amp;ldquo;데이터 관계 묶음&amp;rsquo;이라는 것을 만들고, 그 안에 &amp;ldquo;데이터를 보관할 변수&amp;rdquo;, &amp;ldquo;데이터를 파일에 읽고 쓰는 함수&amp;rdquo;, &amp;ldquo;데이터를 추가하거나 삭제하는 함수&amp;rdquo;,  &amp;ldquo;데이터를 출력하는 함수&amp;rdquo; &amp;hellip;&amp;hellip;와 같이, 그 데이터 처리에 필요한 변수와 함수를 모두 하나로 모으자는 것이다.&lt;/p&gt;
&lt;p&gt;그렇게 되면 데이터의 처리에 관해서는 우선 &amp;ldquo;이 묶음에 안에 반드시 있다&amp;quot;라는 것이 되기 때문에, 곳곳의 함수를 찾지 않아도 된다.
 
이것이 &amp;ldquo;클래스(class)&amp;ldquo;의 개념이다. 클래스라는 것은 어떤 목적을 위해 필요한 &amp;lsquo;값&amp;rsquo;과 &amp;lsquo;처리&amp;rsquo;를 모두 한 묶음으로 한 것이다.
 
이 클래스는 아래와 같은 같은 형태로 만든다. &amp;ldquo;class 클래스 이름:&amp;ldquo;라는 것으로 시작하여 그 아래에 클래스가 제공하는 변수와 함수를 들여 쓰기하여 작성한다.
   &lt;/p&gt;
&lt;h2 id=&#34;클래스의-정의&#34;&gt;클래스의 정의&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class 클래스 이름:
  변수1
  변수2
  ......필요한 만큼 변수를 제공......

  def 메소드1(인수):
     ......메소드의 처리......
   
  def 메소드2(인수):
     ......메소드의 처리......
   
  ......필요한만큼 메소드를 제공......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;클래스에 필요한 값을 저장하는 변수를 &amp;ldquo;멤버 변수&amp;rdquo;, 클래스에 제공하는 함수를 &amp;ldquo;메소드&amp;quot;라고 한다.&lt;/p&gt;
&lt;p&gt;이러한 작성법은 기본적으로 일반 변수와 함수의 작성법 동일하다. 단지 &amp;ldquo;class OO:&amp;ldquo;라는 정의에 쓰면 멤버 변수와 메소드로 처리 할 수 있게 된다는 것 뿐이다. 특별한 작성법 등은 없다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용 | 클래스 생성</title>
      <link>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;이제 실제로 클래스를 만들어 사용해 보기로 하자. 이전에 &amp;ldquo;이름을 사용하여 메시지를 표시한다&amp;quot;는 것을 클래스에 해보기로 한다.&lt;/p&gt;
&lt;p&gt;아래에 샘플을 예제를 보도록 하자. 여기에서는 &amp;ldquo;Member&amp;quot;라는 클래스를 만들었다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Member: 
    name = &amp;#34;&amp;#34; 
   
    def showMsg(self): 
        print(&amp;#34;Hello, &amp;#34; + self.name + &amp;#34;. How are you?&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;멤버 변수는 이름을 저장하는 &amp;ldquo;name&amp;quot;이라는 변수를 선언하였다. 메소드는 메시지를 표시하는 &amp;ldquo;showMsg&amp;quot;를 선언하고 있다.&lt;/p&gt;
&lt;p&gt;이 클래스의 소스 코드를 보면, 여태 보지 못한 것이 등장하고 있다. &amp;ldquo;self&amp;quot;라는 것인다. 이것은 showMsg 인수에 사용되고 있다. &amp;ldquo;뭐야, 단지 인수에 사용한 변수가?&amp;ldquo;라고 생각하면 그렇지 않다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;메소드 안에는 &amp;lsquo;self.name&amp;rsquo;라는 식으로 왠지 잘 모르는 사용 법을 사용하고 있다.&lt;/p&gt;
&lt;p&gt;사실은 이 &amp;ldquo;self&amp;quot;라는 것은 &amp;ldquo;자신&amp;quot;을 나타내는 특별한 값이다. 자신은 클래스가 아니다. 클래스에서 만들어진 &amp;ldquo;인스턴스&amp;quot;라는 거다.&lt;/p&gt;
&lt;h2 id=&#34;인스턴스와-self&#34;&gt;인스턴스와 self&lt;/h2&gt;
&lt;p&gt;클래스라는 것은 함수 등과 같이 그대로 클래스에서 메소드를 호출하거나 해서 사용하지는 않는다. 클래스를 이용하기 위해서는 &amp;ldquo;인스턴스&amp;quot;라는 것을 만들어야 한다.
   
클래스라는 것은 말하자면 프로그램의 &amp;ldquo;청사진&amp;quot;이다. 이것 자체를 조작하는 것이 아니라, 이 클래스는 설계도를 바탕으로 실제로 사용할 수 있는 부품을 만들어 그것을 조작하는 거다. 이 부품이 인스턴스이다.&lt;/p&gt;
&lt;p&gt;만약 클래스를 그대로 사용하면, 그 클래스의 기능을 몇번이고 사용하고 싶다면 많은 클래스를 만들어야 한다. 예를 들어, 샘플 Member 클래스를 사용하여 &amp;ldquo;Taro&amp;quot;며 &amp;ldquo;Hanako&amp;quot;의 데이터를 관리하려 했다고 생각해 보자. 클래스를 그대로 사용하게 되면 그 name에 &amp;ldquo;Taro&amp;quot;로 설정하면, 또 &amp;ldquo;Hanako&amp;quot;는 보관할 수 없게되어 버린다.&lt;/p&gt;
&lt;p&gt;그래서 클래스를 바탕으로 &amp;ldquo;인스턴스&amp;quot;라는 부품을 만들고, 그것에 Taro로 설정해 주어야 한다. Hanako가 필요하게 되면, 또한 클래스에서 새로운 인스턴스를 만들고, 거기에 Hanako라고 설정 해준다. 이런 상태로 &amp;ldquo;Member 클래스를 사용할 필요가 있으면 새로 Member의 인스턴스를 만들고, 이름을 설정해 주어야&amp;quot;입니다. 이렇게 하면 이 클래스를 바탕으로 얼마든지 데이터를 처리할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;그리고, 이 인스턴스 자신을 가리키는 데 준비하는 것이 &amp;ldquo;self&amp;quot;라는 것이다.&lt;/p&gt;
&lt;p&gt;예를 들어, 어떤 메소드에서 &amp;ldquo;이 인스턴스에 저장되어 있는 멤버 변수의 값을 사용해야 한다&amp;quot;고 해보자. 이 예에서 말한다면, Member의 name 값을 showMsg에서 사용하는 경우이다.&lt;/p&gt;
&lt;p&gt;이 때, 그냥 &amp;rsquo;name&amp;rsquo;변수 이름으로 사용할 수 없다. &amp;ldquo;이 인스턴스 안에 있는 name&amp;rdquo; 형태로 지정을 해주지 않으면 안된다.
 
그래서 Python 클래스에 제공되는 메소드는 반드시 첫 번째 인수에 인스턴스 자신을 나타내는 값을 전달하도록 해야 한다. 이것이 &amp;ldquo;self&amp;quot;의 정체는 것이다. 이 self 안에있는 멤버 변수와 메소드는&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;self.&amp;#34;변수&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;따라서, self후에 점(.)으로 지정한다. 예를 들어, 여기에 &amp;ldquo;self.name&amp;quot;라고 하고 name 멤버 변수를 지정하고 이용하면 된다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용 | 클래스 사용</title>
      <link>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;이제 만든 Member 클래스를 사용해 보자. 아래에 사용할 소스 코드 예제가 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Member: 
    name = &amp;#34;&amp;#34; 
   
    def showMsg(self): 
        print(&amp;#34;Hello,&amp;#34; + self.name + &amp;#34;.How are you?&amp;#34;) 
   
taro = Member() 
taro.name = &amp;#34;Taro&amp;#34;
taro.showMsg() 
   
hanako = Member() 
hanako.name = &amp;#34;Hanako&amp;#34;
hanako.showMsg()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 Taro와 Hanako라는 2명의 데이터를 처리하기 위해 2개의 인스턴스를 만들어 사용하고 있다.
   
인스턴스의 생성은 &amp;ldquo;클래스 이름()&amp;ldquo;과 같이 이걸을 호출을 한다. 여기에서는&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taro = Member()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 호출하고 있다. 이제 변수 taro에 Member 클래스의 인스턴스가 만들어 보관된다. 또한 인스턴스의 멤버 변수와 메소드는 점(.)을 사용하여 변수 이름 뒤에 해당되는 변수와 메소드를 작성해서 호출한다. 예를 들어,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taro.name = &amp;#34;Taro&amp;#34;
taro.showMsg()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 taro 인스턴스의 name 멤버 변수에 &amp;ldquo;Taro&amp;quot;라고 값을 설정 해주고, 그러고 나서 showMsg 메소드를 호출해 실행을 한다. 이런 식으로 인스턴스를 만들어 변수에 할당 해두면 클래스 안에 있는 요소는 자유롭게 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;또한, 이 name와 같이 각 인스턴스에 값을 저장하고 사용하는 멤버 변수를 &amp;ldquo;인스턴스 변수&amp;quot;라고도 한다.
   &lt;/p&gt;
&lt;h2 id=&#34;self는-어디-갔지&#34;&gt;self는 어디 갔지?&lt;/h2&gt;
&lt;p&gt;그런데 이 사용 예를 보고 무언가 의문을 생기지 않나요? 그것은 showMsg를 호출하는 부분이다. &amp;ldquo;taro.showMsg()&amp;ldquo;라고 되어 있다.&lt;/p&gt;
&lt;p&gt;어? showMsg는, 첫번째 인수에 &amp;ldquo;self&amp;quot;가 준비되어 있지 않은가? 그 self는 도대체 어떻게 된 것일까?&lt;/p&gt;
&lt;p&gt;사실을 말하면, 메소드의 첫번째 인수로 전달되는 &amp;ldquo;인스턴스 자신&amp;quot;의 값은 Python의 시스템에 의해 자동으로 넘겨지게 된다. 즉, 첫번째 인수(self) 메서드를 호출할 때 불필요한 거다. 호출할 때, 두 번째 인수 이후만 작성한다. (여기에서는 첫번째 인수밖에 없기 때문에, 호출할 때 인수를 생략했다)&lt;/p&gt;
&lt;p&gt;이런 식으로 인스턴스를 만들고 그 안의 멤버 변수를 설정하고 메서드를 호출한다. 이것이 클래스를 사용하는 기본이다. 이러한 기본 작업을 알면 클래스는 쉽게 사용할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용 | 생성자 사용</title>
      <link>https://www.devkuma.com/docs/python/%EC%83%9D%EC%84%B1%EC%9E%90-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%83%9D%EC%84%B1%EC%9E%90-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;그렇게 하더라도,이 Member클래스 별로 유용하지 않는다. 인스턴스를 만들고, name을 설정하여 showMsg를 호출 &amp;hellip; 결국 하나 하나 다하고 있는 것은 클래스를 사용하지 않는 경우와 별로 차이가 없다. 게다가 인스턴스를 만든 후에 멤버 변수의 설정을 잊으면, 생각대로 움직이지 않게 되어 버린다. 적어도 &amp;ldquo;필요한 값은 처음부터 제대로 설정 사용&amp;quot;하도록 하고 싶다.&lt;/p&gt;
&lt;p&gt;이럴 때에 유용한 것이 &amp;lsquo;생성자(constructor)&amp;lsquo;라는 것이 있다. 생성자는 &amp;ldquo;인스턴스를 만들 때 자동으로 호출되는 인스턴스 초기화를 위한 특별한 방법&amp;quot;이다. 이것은 다음과 같이 만든다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;인수&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;초기화&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생성자는 &amp;ldquo;__init__&amp;ldquo;와 같은 이름으로 메소드를 작성한다. 만약 어떤 값을 인수로 전달 싶다면, 2번째 인수 이후에 지정한다(첫번째 인수는 반드시 self이다).&lt;/p&gt;
&lt;p&gt;이와 같이 생성자를 준비하면 인스턴스를 만들 때, 이 생성자를 사용하게 된다. 아래 예제를 보도록 하자.
 &lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;taro&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;taro&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;hanako&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;hanako&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 다음과 같이 하여 str라는 인수를 전달하는 형태로 생성자를 제공하고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def __init__(self, str):
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이제 인스턴스를 만들 때 name을 설정해야 한다. 실제로 인스턴스를 만들고 있는 곳을 보면,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taro = Member(&amp;#34;Taro&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 ()에 이름을 인수로 넣고 있는 것을 볼 수 있다. 이렇게 해서 인수를 지정하여 인스턴스를 만들 수 있게 하면 필요한 멤버 변수의 설정도 한꺼번에 할 수 있어 매우 편리하다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
    <item>
      <title>Python 입문 | 클래스 사용 | 상속 클래스</title>
      <link>https://www.devkuma.com/docs/python/%EC%83%81%EC%86%8D-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <pubDate>Wed, 20 Sep 2017 00:31:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/python/%EC%83%81%EC%86%8D-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <description>
        
        
        &lt;p&gt;클래스를 정의하는 가장 큰 장점은 &amp;ldquo;재사용이 가능하다&amp;quot;라는 것이다. 한번 만들면, 이후에는 그것을 그대로 복사하여 여기 저기에서 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;그러나 실제로 사용해 보면 &amp;ldquo;여기는 이렇게 하는 것이 더 좋다&amp;quot;라고 하는 것이 나올 거다. 하지만, 어느 정도의 규모의 프로그램가 되면, 곳곳에서 클래스를 사용하고 있으면 이런 수정은 제공되지 않는다.&lt;/p&gt;
&lt;p&gt;이럴 때 정말 편리한 기능이 준비되어 있다. 그것은 &amp;ldquo;상속&amp;quot;이라는 것이다.&lt;/p&gt;
&lt;p&gt;상속이라는 것은 이미 클래스를 그대로 이어 받아 새로운 클래스를 만드는 것이다. &amp;ldquo;이어 받는다&amp;quot;라는 것은 &amp;ldquo;클래스의 모든 기능을 그대로 이어 받는다&amp;quot;라는 것이다. 즉, 그 클래스에 있는 것을 통째로 그대로 받아 새로운 클래스를 만드는 거다.&lt;/p&gt;
&lt;p&gt;이 상속을 사용하여 클래스를 정의하려면 다음과 같이 클래스를 만듭니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def 클래스 이름(상속하는 클래스):
    ...... 클래스의 내용 ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상속에는, 상속하는 원래 클래스를 &amp;ldquo;기본 클래스&amp;rdquo;, 새로 만든 클래스를 &amp;ldquo;파생 클래스&amp;quot;라고 한다.&lt;/p&gt;
&lt;p&gt;실제 사용 예를 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;str&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.How are you?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PowerMember&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;mail&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;str1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;str2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mail&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str2&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Your mail address is &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mail&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#39;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;taro&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Member&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;taro&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;hanako&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PowerMember&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hanako@flower.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;hanako&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;showMsg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 Member 클래스를 상속하여 PowerMember라는 파생 클래스를 만들고 있다.&lt;/p&gt;
&lt;p&gt;이 PowerMember 클래스는 &lt;code&gt;def __init__(self, str1, str2):&lt;/code&gt;이렇게 하여, 2개의 인수를 준비했다. 그리고 self.name과 self.mail에 각각 설정하고 있다. 그런데, 이상한게 있다. 조금 자세히 더 살펴 보도록 하자.&lt;/p&gt;
&lt;p&gt;잘 보면 이 PowerMember 클래스는 &amp;ldquo;mail&amp;quot;밖에 인스턴스 변수가 포함되어 있지 않았다. 그런데 self.name 값은 잘 저장하고 있다. 이것은 기본 클래스인 Member에  name가 준비되어 있기 때문이다. 상속은 기본 클래스의 모든 기능을 이어 받아 사용할 수 있다. 따라서 PowerMember에 name을 준비 할 필요는 없다.&lt;/p&gt;
&lt;p&gt;멤버 변수뿐만 아니라 메소드도 모든 슈퍼 클래스에 있는 것은 그대로 사용할 수 있다. 이 상속을 사용하면 이미 있는 클래스를 점점 확장하여 기능 강화해 나갈 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;Python에는 다양한 클래스가 라이브러리에 포함되어 있다. 그리고 그들을 이용할 때, 이 &amp;ldquo;상속&amp;quot;이 사용되고 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, 먼저 &amp;ldquo;리스트&amp;rdquo;, &amp;ldquo;튜플&amp;rdquo;, &amp;ldquo;레인지&amp;quot;라는 컨테이너에 대해 설명을 했었다. 이런 것도 실은 모든 &amp;ldquo;클래스&amp;quot;로 준비되어 있다. 이 3개의 클래스에 공통된 기능이 많은 것은 &amp;lsquo;시컨스&amp;rsquo;라는 인덱스에서 관리하는 컨테이너 클래스가 있고 그것을 계승하고 리스트나 튜플이 있다고 생각하면 이미지화하기 쉬울 것이다.&lt;/p&gt;

      </description>
      
      <category>Python</category>
      
    </item>
    
  </channel>
</rss>
