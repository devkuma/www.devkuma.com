<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Port</title>
    <link>https://www.devkuma.com/tags/port/</link>
    <image>
      <url>https://www.devkuma.com/tags/port/logo/180x180.jpg</url>
      <title>Port</title>
      <link>https://www.devkuma.com/tags/port/</link>
    </image>
    <description>Recent content in Port on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/port/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>네트워크 포트(Port)란?</title>
      <link>https://www.devkuma.com/docs/port/</link>
      <pubDate>Tue, 10 Jan 2023 11:40:06 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/port/</guid>
      <description>
        
        
        &lt;h2 id=&#34;포트란&#34;&gt;포트란?&lt;/h2&gt;
&lt;h3 id=&#34;포트는-항구&#34;&gt;포트는 항구&lt;/h3&gt;
&lt;p&gt;포트(Port)란 원래 &amp;lsquo;항구&amp;rsquo;를 말한다. 항구는 배가 마을에 들어가기 위해 필요한 공간으로 바다와 마을과의 출입구가 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/network/port.jpg&#34; alt=&#34;포트&#34;&gt;&lt;/p&gt;
&lt;p&gt;IT 업계에서 사용되는 포트도 비슷하다. 항구에서는 어떤 수하물을 어디에서 내릴 지 결정된다. 번호를 붙여 사용하면 더 명확해 질 것이다.
IT에서도 동일하게, 인터넷 전체를 바다로, 컴퓨터를 마을이라고 하면, 인터넷에서 오는 데이터를 내리는 곳이 정해져 있다.
Web 페이지 열람의 데이터는 OO번항, 메일은 OO번항 등과 같은 식이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/network/linkeddata.jpg&#34; alt=&#34;네트워크&#34;&gt;&lt;/p&gt;
&lt;p&gt;이것이 &amp;ldquo;포트&amp;quot;에 해당한다.&lt;/p&gt;
&lt;p&gt;실제 TCP나 UDP로 통신을 행할 때는 컴퓨터 1대를 단위로 하는 것이 아니라 &amp;ldquo;프로그램 단위&amp;rdquo; 즉, &amp;ldquo;프로세스나 쓰레드 단위&amp;quot;로 통신이 수행된다. 그러기 때문에 프로세스간에 올바르게 전달을 해야 한다.
이 때 통신하는 프로세스에는 &amp;ldquo;포트 번호&amp;quot;라는 것이 할당된다. 프로세스나 쓰레드는 이 포트 번호를 표시하여, 어느 어플리케이션과 어느 어플리케이션이 통신을 해야 할지 판단하게 된다.&lt;/p&gt;
&lt;h3 id=&#34;건물에-비유&#34;&gt;건물에 비유&lt;/h3&gt;
&lt;p&gt;포트는 건물로 비유하면 알기 쉬울 것이다.&lt;/p&gt;
&lt;p&gt;네트워크 통신에 필요한 &amp;lsquo;프로토콜&amp;rsquo;, &amp;lsquo;IP 주소&amp;rsquo;와 &amp;lsquo;포트 번호&amp;rsquo;가 필요하다.&lt;/p&gt;
&lt;p&gt;IP 주소를 건물의 주소에 비유한다면, 포트 번호는 &amp;ldquo;호실&amp;quot;로 비유된다.
컴퓨터 네트워크에서 프로토콜, IP 주소, 포트 번호를 비유하자면, &amp;ldquo;어떤 방법(프로토콜)&amp;ldquo;으로 &amp;ldquo;어느 건물(컴퓨터, IP)&amp;ldquo;의 &amp;ldquo;몇 호실(몇번 포트)&amp;ldquo;에 연락(통신)을 할 것인가? 와 같은 형태로 바꿀 수 있다.&lt;/p&gt;
&lt;p&gt;통신에 중요한 포트 번호이기에, 포트를 여는 것은 특정 방의 문을 열지 않은 상태와 같기 때문에 서비스를 제공하는 서버가 아닌 한 기본적으로 불필요한 포트는 열리지 않도록 설정해 두어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;좀-더-정확하게-말하면-포트는-서비스-창구&#34;&gt;좀 더 정확하게 말하면 포트는 서비스 창구&lt;/h2&gt;
&lt;p&gt;포트는 &amp;ldquo;서버 어플리케이션을 특정할 때 사용하는 번호&amp;quot;이며, &amp;ldquo;서버에서 제공되고 있는 서비스의 창구&amp;quot;이다.
예를 들어, http 프로토콜은 80번을 사용하는 것이 일반적이다.&lt;/p&gt;
&lt;p&gt;포트가 개방된 경우 방의 창구는 깨끗하게 된다. 서버로서는 상대에게 서비스를 제공하기 위해서, 창구를 항상 열어 두어야 한다.
예를 들면, http 일반적인 웹 서비스를 제공할 경우 80번 포트를 개방할 필요가 있다. http 통신으로 필요한 창구를 여는 작업이 된다.&lt;/p&gt;
&lt;p&gt;그렇다면 포트가 닫힌 채로 있으면 어떨까? 서버의 창구는 버려지고 있다. 즉, 영업 정지이므로 서비스를 제공할 수 없게 된다. 그래서 &amp;ldquo;서비스에 따라 필요한 창구를 여는 작업&amp;quot;이 포트 개방이다.&lt;/p&gt;
&lt;h2 id=&#34;대표적인-포트-번호-및-프로토콜&#34;&gt;대표적인 포트 번호 및 프로토콜&lt;/h2&gt;
&lt;p&gt;각각 &amp;ldquo;어떤 프로토콜이 어떤 포트 번호로 운용되는가?&amp;rdquo; 대표적인 예를 들면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 20 : FTP(데이터)&lt;/li&gt;
&lt;li&gt;TCP 21 : FTP(제어)&lt;/li&gt;
&lt;li&gt;TCP 22 : SSH&lt;/li&gt;
&lt;li&gt;TCP 23 : Telnet&lt;/li&gt;
&lt;li&gt;TCP 25 : SMTP&lt;/li&gt;
&lt;li&gt;UDP 53 : DNS&lt;/li&gt;
&lt;li&gt;UDP 67 : DHCP(서버)&lt;/li&gt;
&lt;li&gt;UDP 68 : DHCP(클라이언트)&lt;/li&gt;
&lt;li&gt;TCP 80 : HTTP&lt;/li&gt;
&lt;li&gt;TCP 110 : POP3&lt;/li&gt;
&lt;li&gt;UDP 123 : NTP&lt;/li&gt;
&lt;li&gt;TCP 443 : HTTPS&lt;/li&gt;
&lt;li&gt;WELL KNOWN PORT NUMBERS 0~1023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;포트와 IP 주소와 프로토콜의 예를 들면 웹 서버 등일 것이다.&lt;/p&gt;
&lt;p&gt;특정 IP 주소상에서 공개되고 있는 서버상에서, HTTP라고 하는 프로토콜에 따른 어플리케이션, Apache 등이 80번 포트로, 클라이언트와의 통신을 대기해, 요구에 따라서 Web 페이지의 정보를 송신한다고 한다 흐름이다.&lt;/p&gt;
&lt;p&gt;다른 서비스는 마찬가지로 특정 서버에서 프로토콜을 구현하는 응용 프로그램을 임의 포트 또는 Well Known Port를 열어 서비스를 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;웰노운-포트-번호well-known-port-numbers&#34;&gt;웰노운 포트 번호(WELL KNOWN PORT NUMBERS)&lt;/h3&gt;
&lt;p&gt;실제 포트 자체는 0에서 65535까지 존재하지만, 그 중에서도 0~1023까지를 &amp;ldquo;웰노운 포트 번호&amp;quot;라고 한다. 문장 그대로 ‘잘 알려진 포트 번호’라는 의미이다.
이 번호들은 IANA라는 단체에 의해 관리되고 있다.&lt;/p&gt;
&lt;p&gt;TCP/IP나 UDP에 있어서 통신에서 이용되는 포트 번호 중, 메이저인 서비스나 프로토콜이 이용하기 위해서 예약되고 있는 포트 번호이다.&lt;/p&gt;
&lt;p&gt;80이 HTTP, 22가 SSH인 것처럼, 메이저 서비스는 포트 번호가 일반적으로 정해져 있다.&lt;/p&gt;
&lt;p&gt;이 번호들은 서비스마다 설정 파일을 편집하고 대기의 포트 번호를 변경하는 것도 가능하다. 보안 관계상 의도적으로 포트 번호를 변경하는 경우도 있지만, 기본적으로 웰노운 포트 번호를 사용하도록 하자.&lt;/p&gt;
&lt;h3 id=&#34;등록된-포트-번호&#34;&gt;등록된 포트 번호&lt;/h3&gt;
&lt;p&gt;1024~49151 이 번호들도 IANA에서 관리되고 있다.&lt;/p&gt;
&lt;p&gt;특정 애플리케이션 등이 사용하도록 되어 있는 포트 군이다. IANA가 등록을 받아 공개하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;그-외에-포트-번호&#34;&gt;그 외에 포트 번호&lt;/h3&gt;
&lt;p&gt;49152~65535는 사용자가 자유롭게 사용할 수 있는 포트 번호이다. IANA에 등록할 필요도 없다.&lt;/p&gt;
&lt;p&gt;포트 번호에 관해서는 &amp;ldquo;실제 어느 서비스를 어느 포트로 움직이는 것인가?&amp;ldquo;라고 하는 것은 절대적인 결정이 존재하는 것은 아니기 때문에, 임의로 관리, 비교해 사용할 수도 있다.&lt;/p&gt;
&lt;h2 id=&#34;포트-개방-및-보안&#34;&gt;포트 개방 및 보안&lt;/h2&gt;
&lt;p&gt;창구를 비워 둔다는 것은 창문에 열쇠를 걸지 않는다는 것이다.
당연히 정보를 훔치려고 하는 도둑, 즉, &amp;lsquo;크래커&amp;rsquo; 등에 휘말리기 쉬운 상태에 있다는 것이다.&lt;/p&gt;
&lt;p&gt;이 상태는 매우 좋지 않기 때문에 어둠 속에서 포트를 열어서는 안 된다. 보안 대책을 제대로 세워 최소한의 포트를 개방하도록 해야 한다.&lt;/p&gt;
&lt;p&gt;최근의 컴퓨터는 처리력이 매우 높아 퍼스널 머신 위에서도 서버로서 상주하는 애플리케이션도 증가하고 있다.
서버로서 기능하는 어플리케이션의 경우, 로컬내 뿐만 아니라 외부로부터의 정보에도 응답하게 되어 있는 경우가 대부분일 것이다. 이 서버로서 기능하는 애플리케이션, 서버 애플리케이션은 서비스를 제공하기 위해 필연적으로 포트를 개방하게 된다.&lt;/p&gt;
&lt;p&gt;그러나, 서버 애플리케이션에 보안 취약점이 있을 경우 최악의 서버가 탈취되거나 서비스를 제공할 수 없게 되는 경우도 있다. 서버로서 기능하는 애플리케이션은 신중하게 검토할 필요가 있다.
그 외에도 서버로서 동작하고 있는 컴퓨터의 경우 &amp;ldquo;어느 포트가 개방되어 있는가?&amp;rdquo;, &amp;ldquo;의도하지 않은 포트는 열려 있지 않은가?&amp;ldquo;등을 확인할 필요가 있다, 실제 작업 전에 페니트레이션(penetration, 침투) 테스트를 하여, 실제로 포토 스캔해, 상태를 파악하는 것이 중요하다.&lt;/p&gt;

      </description>
      
      <category>Port</category>
      
      <category>Network</category>
      
    </item>
    
  </channel>
</rss>
