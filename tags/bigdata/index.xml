<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – BigData</title>
    <link>https://www.devkuma.com/tags/bigdata/</link>
    <image>
      <url>https://www.devkuma.com/tags/bigdata/logo/180x180.jpg</url>
      <title>BigData</title>
      <link>https://www.devkuma.com/tags/bigdata/</link>
    </image>
    <description>Recent content in BigData on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/bigdata/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>ZooKeeper 오픈 소스의 운용 관리·운용 자동화</title>
      <link>https://www.devkuma.com/docs/apache-zookeeper/overview/</link>
      <pubDate>Sat, 24 Dec 2022 10:22:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/apache-zookeeper/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;Apache ZooKeeper(아파치 주키퍼)는 분산 환경 운영 지원 서비스를 제공하는 코디네이션 엔진이다. 각 노드(시스템 전체)를 중앙 집중식 유지 관리하는 기능을 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;기본-설명&#34;&gt;기본 설명&lt;/h3&gt;
&lt;p&gt;분산 어플리케이션을 구현하는 경우, 각 분산 노드의 설정 등에 대량의 작업이 발생하게 된다. ZooKeeper는 구성 작업과 같은 본질적인 부분을 꺼내 중앙 집중식 코디네이션 서비스로 간단한 인터페이스를 제공한다.&lt;/p&gt;
&lt;p&gt;ZooKeeper는 &amp;lsquo;설정 관리&amp;rsquo;, &amp;lsquo;이름 확인&amp;rsquo;, &amp;lsquo;동기화&amp;rsquo;, &amp;lsquo;그룹 서비스&amp;rsquo; 등 다양한 빈번한 서비스를 제공한다.&lt;/p&gt;
&lt;p&gt;표준 기능으로서 &amp;ldquo;합의 프로토콜&amp;rdquo;, &amp;ldquo;그룹 관리 프로토콜&amp;rdquo;, &amp;ldquo;리더 선거 프로토콜&amp;rdquo;, &amp;ldquo;프레즌스 프로토콜&amp;rdquo; 등을 이용할 수 있다. 독자적인 요구에 대응한 서비스의 구축도 가능한다.&lt;/p&gt;
&lt;p&gt;Apache 소프트웨어 재단의 오픈 소스 프로젝트로 Hadoop의 하위 프로젝트 중 하나이다. Java 구현되어 JVM에서 동작한다. Java/C 언어용 API가 제공되고 있다.&lt;/p&gt;
&lt;h2 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h2&gt;
&lt;h3 id=&#34;높은-처리량낮은-대기-시간&#34;&gt;높은 처리량/낮은 대기 시간&lt;/h3&gt;
&lt;p&gt;ZooKeeper가 관리하는 다양한 데이터는 스토리지가 아닌 메모리에 보관되므로 높은 처리량과 낮은 지연을 제공한다.&lt;br&gt;
높은 성능을 발휘할 수 있으므로 대규모 분산 시스템에 대응할 수 있다. 클라이언트로부터의 액세스가 읽기 주체인 경우에는 특히 고속으로 동작할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;고-가용성-마스터-중복&#34;&gt;고 가용성 (마스터 중복)&lt;/h3&gt;
&lt;p&gt;ZooKeeper를 여러 서버에 설치하고 사용할 수 있다. 가용성을 높이고 성능 향상도 기대할 수 있다. ZooKeeper를 여러 개 시작하면 마스터가 자동으로 선택되어 각종 통괄 관리를 실행한다.&lt;br&gt;
ZooKeeper 마스터 노드가 어떤 이유로든 중지되면 각 노드간에 선거가 이루어지고 새로운 마스터 노드가 선택된다.&lt;/p&gt;
&lt;h3 id=&#34;원자성&#34;&gt;원자성&lt;/h3&gt;
&lt;p&gt;ZooKeeper가 관리하는 데이터는 원자적으로 읽고 쓸 수 있다. 클라이언트의 업데이트를 순서대로 하나씩 적용한다. 각 노드마다 액세스 제한을 설정할 수도 있다.&lt;/p&gt;
&lt;h3 id=&#34;계층적-네임스페이스&#34;&gt;계층적 네임스페이스&lt;/h3&gt;
&lt;p&gt;ZooKeeper는 데이터를 계층적 네임스페이스에 저장한다. 여러 서버에 분산되어 있는 각 프로세스는 이 네임스페이스를 공유하는 것으로 서로 협조하면서 분산 처리를 진행시킨다.&lt;/p&gt;
&lt;h3 id=&#34;노드-간-불일치-제거&#34;&gt;노드 간 불일치 제거&lt;/h3&gt;
&lt;p&gt;데이터 갱신은 마스터 노드만이 실시하기 때문에, 노드간에 데이터가 모순된 내용이 되지 않는 구조가 되고 있다.&lt;/p&gt;
&lt;h2 id=&#34;주요-기능&#34;&gt;주요 기능&lt;/h2&gt;
&lt;h3 id=&#34;공유-설정-기능&#34;&gt;공유 설정 기능&lt;/h3&gt;
&lt;p&gt;구성 파일을 ZooKeeper 서버에 저장하고 각 인스턴스가 ZooKeeper에 저장된 구성 파일을 검색하면 각 인스턴스의 구성 파일이 동일한지 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;분산-잠금-기능&#34;&gt;분산 잠금 기능&lt;/h3&gt;
&lt;p&gt;여러 인스턴스가 동시에 공유 리소스를 다시 쓰지 못하게 하는 잠금 기능이 있다.&lt;/p&gt;
&lt;h3 id=&#34;멤버-획득-기능&#34;&gt;멤버 획득 기능&lt;/h3&gt;
&lt;p&gt;분산 시스템의 각 인스턴스가 ZooKeeper의 임시 노드를 등록하면 분산 시스템 내에서 사용 가능한 인스턴스 목록을 얻을 수 있다. 각 클라이언트는 활성 상태의 서버에 연결할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;시계-기능&#34;&gt;시계 기능&lt;/h3&gt;
&lt;p&gt;특정 프로세스가 특정 ZooKeeper 노드를 관찰하는 경우 해당 ZooKeeper 노드에 변경 사항이 있으면 프로세스에 변경 사항을 알린다. 설정 파일의 재로드 트리거 등에 이용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;도입-사례&#34;&gt;도입 사례&lt;/h2&gt;
&lt;p&gt;분산 키 밸류 데이터베이스 &amp;ldquo;HBase&amp;rdquo;, 검색 엔진 &amp;ldquo;SolrCloud&amp;rdquo;, 분산 실시간 스트리밍 처리 엔진 &amp;ldquo;Jubatus&amp;rdquo; 등에 도입되었다.&lt;br&gt;
주요 적용 분야로는 &amp;ldquo;디렉토리 서비스&amp;rdquo;, &amp;ldquo;구성 관리 서비스&amp;rdquo;, &amp;ldquo;동기 서비스&amp;rdquo;, &amp;ldquo;리더 선출 서비스&amp;rdquo;, &amp;ldquo;메시지 큐 서비스&amp;rdquo;, &amp;ldquo;「엔터프라이즈 검색 시스템&amp;rdquo; 등이 있다.&lt;/p&gt;
&lt;h2 id=&#34;라이센스-정보&#34;&gt;라이센스 정보&lt;/h2&gt;
&lt;p&gt;Apache ZooKeeper의 라이센스는 &amp;ldquo;Apache License 2.0&amp;quot;이다. 이 라이선스에 따라 소스 코드를 수정하고 게시할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;다운로드&#34;&gt;다운로드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zookeeper.apache.org/releases.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;다운로드&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>BigData</category>
      
      <category>Apache ZooKeeper</category>
      
    </item>
    
    <item>
      <title>빅데이터 분석 기반이란? 데이터 파이프라인 구축</title>
      <link>https://www.devkuma.com/docs/big-data/term/</link>
      <pubDate>Tue, 23 Aug 2022 16:10:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/big-data/term/</guid>
      <description>
        
        
        &lt;h2 id=&#34;빅데이터란&#34;&gt;빅데이터란?&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;빅데이터란?&lt;/h4&gt;

    빅데이터는 일반 소프트웨어에서는 처리할 수 없는 대규모(테라바이트, 페타바이트, 엑사바이트 규모) 데이터이다.

&lt;/div&gt;

&lt;p&gt;여기서는 빅데이터를 시각화, 분석하는 것을 목표로 한다.&lt;/p&gt;
&lt;p&gt;빅 데이터가 소규모(small) 데이터용 소프트웨어(Excel이나 RDB 등)로 처리할 수 없는 이유는 다음과 같이 하드웨어 리소스의 한계가 있기 때문이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 한계: 계산할 데이터가 너무 많아, 업무 시간 내에 처리가 끝나지 않음&lt;/li&gt;
&lt;li&gt;메모리 한계: 데이터가 너무 많아, 메모리를 극복하지 않으므로 처리할 수 없음&lt;/li&gt;
&lt;li&gt;스토리지 한계: 데이터가 너무 많아, 스토리지 에 들어갈 수 없기 때문에 처리할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그래서 빅데이터를 처리하려면, 병렬 처리가 가능한 소프트웨어를 이용하여 복수의 컴퓨터(의 하드웨어 자원)를 이용해야 한다.&lt;/p&gt;
&lt;p&gt;여기에서는 다음 흐름을 따라 빅데이터의 각 용어의 의미/가시화/분석 방법을 설명한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline.png&#34; alt=&#34;빅데이터 파이프라인&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;데이터-소스란&#34;&gt;데이터 소스란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-1-data-source.png&#34; alt=&#34;빅데이터 파이프라인:데이터 소스&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;데이터 소스&lt;/h4&gt;

    데이터 소스(data source)는 분석하려는 데이터의 소스이다.

&lt;/div&gt;

&lt;p&gt;데이터 소스의 구체적인 예는 다음 로그와 테이블 정보이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 서버&lt;/li&gt;
&lt;li&gt;IoT 장비(공장 및 자동차 센서 등)&lt;/li&gt;
&lt;li&gt;모바일 기기(스마트폰 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터 소스라는 단어가 가리키는 대상은 서 있는 위치에 따라 달라진다.&lt;br&gt;
(예를 들어, 위 그림의 BI 도구에서 본 데이터 소스는 NoSQL, DWH, 데이터 마트이다.)&lt;/p&gt;
&lt;p&gt;또한, 데이터는 다음 세 가지 유형으로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정형(구조화된) 데이터&lt;/li&gt;
&lt;li&gt;비정형(비구조화된) 데이터&lt;/li&gt;
&lt;li&gt;반정형(반구조화된) 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;정형구조화된-데이터란&#34;&gt;정형(구조화된) 데이터란?&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;정형 데이터&lt;/h4&gt;

    정형 데이터는 2차원 테이블 형식의 데이터이다.&lt;br&gt;
정형 데이터는 스키마(예: 행/열/데이터 유형)가 정의되어 있다.

&lt;/div&gt;

&lt;h4 id=&#34;정형-데이터의-예&#34;&gt;정형 데이터의 예&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/database-table-1.png&#34; alt=&#34;RDB 테이블&#34;&gt;&lt;br&gt;
&lt;em&gt;RDB 테이블&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;정형 데이터의 예는 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[ID, NAME,DATA] 열을 3행을 가진 데이터&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ID,NAME,DATE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1,devkuma,2022/08/01 00:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2,araikuma,2022/08/02 00:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3,kimkc,2022/08/03 00:00
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;특징&#34;&gt;특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터에서 사용하기 쉽다(RDB + SQL 쿼리로 작업 가능).&lt;/li&gt;
&lt;li&gt;사전에 미리 행과 열을 정의가 필요하다(고정 스키마).
&lt;ul&gt;
&lt;li&gt;저장에 시간이 많이 걸린다(행, 열의 형태로 데이터를 변환해야 함).&lt;/li&gt;
&lt;li&gt;각 행은 동일한 열 이름을 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;중첩하지 않는다(테이블의 필드 값에 테이블이 포함되지 않음).
&lt;ul&gt;
&lt;li&gt;다른 테이블을 참조하는 경우 JOIN 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비정형비구조화된-데이터란&#34;&gt;비정형(비구조화된) 데이터란?&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;비정형 데이터&lt;/h4&gt;

    비정형 데이터는 2차원 테이블 형식이 되지 않은 데이터이다.&lt;br&gt;
비정형 데이터는 스키마(예: 행/열/데이터 유형)가 정의 되지 않는다.

&lt;/div&gt;

&lt;h4 id=&#34;비정형-데이터의-예&#34;&gt;비정형 데이터의 예&lt;/h4&gt;
&lt;p&gt;비정형 데이터의 예는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;음악&lt;/li&gt;
&lt;li&gt;사진&lt;/li&gt;
&lt;li&gt;텍스트&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;비정형 데이터의 예는 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;텍스트(액세스 로그)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;6&amp;gt;Feb 28 12:00:00 192.168.0.1 fluentd[11111]: [error] Syslog test 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;비정형 데이터에는 열 이름이 없으므로 열의 의미를 이해하기가 어렵다.&lt;br&gt;
(위에 텍스트에서의 &lt;code&gt;&amp;lt;6&amp;gt;&lt;/code&gt;와 같은 등은 의미를 알 수가 없다.)&lt;/p&gt;
&lt;h3 id=&#34;특징-1&#34;&gt;특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터에서 다루기가 어렵다(예 : 스키마가 없으므로 RDB + SQL 쿼리 로 작업 할 수 없음).&lt;/li&gt;
&lt;li&gt;행, 열을 정의하지 않아도 된다(스키마리스: schemaless).
&lt;ul&gt;
&lt;li&gt;저장이 쉽다(아무것도 처리하지 않고 그대로 저장).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;반정형반구조화된-데이터란&#34;&gt;반정형(반구조화된) 데이터란?&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;반정형 데이터&lt;/h4&gt;

    반정형 데이터는 비정형 데이터의 각 요소에 속성 이름(열 이름)을 붙인 데이터이다.
그러나, 테이블 형식은 아니다.

&lt;/div&gt;

&lt;h4 id=&#34;반정형-데이터의-예&#34;&gt;반정형 데이터의 예&lt;/h4&gt;
&lt;p&gt;비정형 데이터의 예는 다음과 같다. 이 외에도 Parquet, ORC 등이 존재한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;AVRO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;비정형 데이터를 반정형 데이터로 변환하는 예는 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;비정형 데이터 (변환 전)&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;비정형 데이터의 예: 텍스트(액세스 로그)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;6&amp;gt;Feb 28 12:00:00 192.168.0.1 fluentd[11111]: [error] Syslog test 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;반정형 데이터(변환 후)&lt;/strong&gt;
&lt;em&gt;반정형 데이터의 예: JSON 형식(위에 비정형 데이터의 요소에 속성 이름을 붙인 것임)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;jsonPayload&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;192.168.0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ident&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fluentd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;11111&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[error] Syslog test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;비구조화 데이터에서는 &lt;code&gt;&amp;lt;6&amp;gt;&lt;/code&gt;이 무엇을 나타내는지 몰랐지만, 반구조화 데이터는 속성명이 붙어 있으므로, &amp;ldquo;6&amp;quot;이 priority인 것을 알 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;특징-2&#34;&gt;특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;속성을 갖기 때문에 컴퓨터가 다루기 쉽다(반정형 데이터에 대한 쿼리 등).&lt;/li&gt;
&lt;li&gt;사전에 속성 정의가 필요하지 않다(가변 스키마).
&lt;ul&gt;
&lt;li&gt;언제든지 새로운 속성을 추가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;저장이 조금 편하다(사전에 데이터의 형태를 결정하지 않아도 된다. 나중에 쉽게 속성을 추가할 수 있다).
&lt;ul&gt;
&lt;li&gt;각 행마다 다른 속성을 가질 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;중첩 가능
&lt;ul&gt;
&lt;li&gt;관련 데이터는 중첩되어 포함되므로 JOIN 불필요하다(또는 클라이언트 측에서 JOIN).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;정형비정형반정형-차이&#34;&gt;정형/비정형/반정형 차이&lt;/h3&gt;
&lt;p&gt;정형/비정형/반정형의 차이를 정리하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;정형&lt;/th&gt;
&lt;th&gt;비정형&lt;/th&gt;
&lt;th&gt;반정형&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;테이블 형식&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No (테이블 형식으로 변환 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스키마(행/열/데이터 유형 등)&lt;/td&gt;
&lt;td&gt;고정 스키마&lt;br&gt;(사전 정의)&lt;/td&gt;
&lt;td&gt;스키마리스&lt;/td&gt;
&lt;td&gt;가변 스키마&lt;br&gt;(나중에 속성을 추가 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;저장&lt;/td&gt;
&lt;td&gt;번거롭다&lt;br&gt;고정 스키마로 변환&lt;/td&gt;
&lt;td&gt;쉽다&lt;br&gt;무변환&lt;/td&gt;
&lt;td&gt;약간 쉽다&lt;br&gt;가변 스키마로 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;쿼리 가능&lt;/td&gt;
&lt;td&gt;예&lt;/td&gt;
&lt;td&gt;아니&lt;/td&gt;
&lt;td&gt;예(해당 DB)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;서버측 JOIN&lt;/td&gt;
&lt;td&gt;필요한&lt;br&gt;데이터가 중첩 불가능&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;불필요한&lt;br&gt;데이터가 중첩 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;고정 스키마는 데이터를 반드시 스키마에 맞추지 않으면 저장할 수 없다.&lt;/li&gt;
&lt;li&gt;가변 스키마는 나중에 데이터에 맞게 스키마 쪽 속성을 나중에 추가할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;데이터 분석의 목표&lt;/strong&gt;는 쿼리를 사용하여 &lt;strong&gt;원하는 데이터&lt;/strong&gt;를 추출하는 것이다.&lt;/p&gt;
&lt;p&gt;따라서, 비정형 데이터를 분석하려면 쿼리를 사용할 수 있도록 정형 데이터 또는 반정형 데이터로 변환해야 한다.&lt;/p&gt;
&lt;h2 id=&#34;etlelt란&#34;&gt;ETL/ELT란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-2-etl-elt.png&#34; alt=&#34;빅데이터 파이프라인:ETL/ELT&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;ETL&lt;/h4&gt;

    &lt;p&gt;ETL은 다음 3가지를 처리한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;xtract - 데이터 소스에서 데이터 추출&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;ransform - 추출된 데이터를 가공/변환&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;oad - 해당되는 가공/변환된 데이터 로드&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;ELT&lt;/h4&gt;

    ELT는 ETL의 가공/변환(Transform)과 로드(Load)의 순서가 바뀐 것이다.

&lt;/div&gt;

&lt;p&gt;데이터 소스 측에서 가공/변환(Transform) 하지 않는 이유는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 서버 : 운영 서버에 로드를 원하지 않는다.&lt;/li&gt;
&lt;li&gt;IoT 기기: 변환 처리할 수 있을 만큼의 스펙이 없다.&lt;/li&gt;
&lt;li&gt;모바일 기기: 고객 기기에서 처리할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ETL에는 다음 두 가지 유형이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배치 ETL&lt;/li&gt;
&lt;li&gt;스트리밍 ETL&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;배치 ETL&lt;/th&gt;
&lt;th&gt;스트리밍 ETL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;처리량 중시&lt;/td&gt;
&lt;td&gt;실시간 중시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;처리할 타이밍&lt;/td&gt;
&lt;td&gt;일정한 간격(매시간, 매일 밤 등)&lt;/td&gt;
&lt;td&gt;데이터가 발생했을 때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;처리에 걸리는 시간&lt;/td&gt;
&lt;td&gt;몇 분 ~ 몇 시간&lt;/td&gt;
&lt;td&gt;몇 밀리초 ~ 몇 초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사용 사례&lt;/td&gt;
&lt;td&gt;야간 배치&lt;br&gt;월별 처리&lt;/td&gt;
&lt;td&gt;실시간성이 필요한 처리&lt;br&gt;(예: 신용카드의 부정 검출 등)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;extract추출&#34;&gt;Extract(추출)&lt;/h3&gt;
&lt;p&gt;데이터 소스에서 데이터를 추출하는 소프트웨어는 다음과 같다.&lt;br&gt;
(외부에서 직접 SQL 쿼리나 REST API로 추출하는 방법도 있다.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;소프트웨어&lt;/th&gt;
&lt;th&gt;ETL 유형&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Embulk&lt;/td&gt;
&lt;td&gt;배치 ETL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fluentd&lt;/td&gt;
&lt;td&gt;스트리밍 ETL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;beats(Elasticsearch)&lt;/td&gt;
&lt;td&gt;스트리밍 ETL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kafka Producer API(Kafka)&lt;/td&gt;
&lt;td&gt;스트리밍 ETL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;스트리밍 ETL에서는 Extract와 Transform 사이에 Pub/Sub 메시징 시스템을 배치할 수 있다.&lt;/p&gt;
&lt;p&gt;복수의 수신자에게 같은 메시지를 전달하는 일대다의 출판-구독 모델(Pub-Sub 모델)에 의한 전달에 대응하고 있는 것도 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/kafka-message-system.png&#34; alt=&#34;Kafka Message System&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pub/Sub 메시징 시스템을 설치하는 이유는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실시간으로 Transform을 완료하기 위해 여러 컴퓨터에 처리를 분산하고 가속화&lt;/li&gt;
&lt;li&gt;피크(peak)시 급격한 데이터 증가로 인해 Transform이 시간에 맞지 않으면 데이터를 일시적으로 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;transform-가공변환&#34;&gt;Transform (가공/변환)&lt;/h3&gt;
&lt;p&gt;추출한 데이터는 주로 다음 소프트웨어로 Transform(가공/변환) 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 쿼리&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;fluentd&lt;/li&gt;
&lt;li&gt;logstash (Elasticsearch)&lt;/li&gt;
&lt;li&gt;Kafka Streams (Kafka)&lt;/li&gt;
&lt;li&gt;Spark Streaming (Apache Spark)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transform은 정형/반정형 데이터로 변환하거나 데이터를 추가/삭제한다.&lt;/p&gt;
&lt;h3 id=&#34;load-로드&#34;&gt;Load (로드)&lt;/h3&gt;
&lt;p&gt;Transform 으로 적절한 형태로 변환한 데이터는 주로 이하의 4개의 목적지에 Load 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;데이터 레이크&lt;/li&gt;
&lt;li&gt;DWH(데이터 웨어하우스)&lt;/li&gt;
&lt;li&gt;데이터 마트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;데이터-레이크data-lake란&#34;&gt;데이터 레이크(Data Lake)란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-3-data-lake.png&#34; alt=&#34;빅데이터 파이프라인:데이터 레이크&#34;&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;데이터 레이크&lt;/h4&gt;

    데이터 레이크는 모든 형식(정형/비정형/반정형)의 데이터를 미래에 대비하여 무제한으로 축적하는 저장고 이다.

&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;데이터-레이크의-예&#34;&gt;데이터 레이크의 예&lt;/h3&gt;
&lt;p&gt;데이터 레이크 서비스/소프트웨어 의 예는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop HDFS&lt;/li&gt;
&lt;li&gt;Amazon S3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터 레이크에는 다양한 형식의 데이터를 수 없이 저장해 간다.&lt;/p&gt;
&lt;p&gt;따라서, 나중에 용량을 추가할 수 있는 스토리지가 데이터 레이크로 선택된다.&lt;/p&gt;
&lt;h2 id=&#34;nosql-데이터베이스&#34;&gt;NoSQL 데이터베이스&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-4-nosql.png&#34; alt=&#34;빅데이터 파이프라인:NoSQL&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;NoSQL 데이터베이스&lt;/h4&gt;

    &lt;p&gt;NoSQL 데이터베이스는 특정 용도에 특화된 분산 데이터베이스이다.&lt;/p&gt;
&lt;p&gt;분산 데이터베이스(distributed database)는 하나의 데이터베이스 관리 시스템(DBMS)이 여러 CPU에 연결된 저장장치들을 제어하는 형태의 데이터베이스이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%B6%84%EC%82%B0_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;분산 데이터베이스 | WiKi&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;NoSQL&amp;quot;이라는 이름은 실제로 어떤 기술을 참고한 곳이 아니기에 적절하지 않다. 원래 NoSQL은 2009년 오픈 소스, 분산 환경, 비관계형 데이터베이스 밋업(meetup)용 인기 트위터 해시태그였다.&lt;/p&gt;
&lt;p&gt;출처 : &lt;a href=&#34;https://www.devkuma.com/docs/data-intensive-application/&#34;&gt;데이터 중심 애플리케이션 설계&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NoSQL은 RDB로 부터 어떠한 제약을 풀어, 퍼포먼스를 추구한 데이타베이스이다.&lt;br&gt;
(역으로 말하면, RDB로 만족하는 퍼포먼스가 나오는 경우는 NoSQL는 필요 없을지도 모른다)&lt;/p&gt;
&lt;h3 id=&#34;nosql과-rdb의-차이&#34;&gt;NoSQL과 RDB의 차이&lt;/h3&gt;
&lt;p&gt;NoSQL과 RDB의 차이점은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;NoSQL&lt;/th&gt;
&lt;th&gt;RDB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;용도&lt;/td&gt;
&lt;td&gt;낮은 대기 시간(고성능) 처리&lt;/td&gt;
&lt;td&gt;트랜잭션 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 모델&lt;/td&gt;
&lt;td&gt;비정형 데이터가 많다&lt;br&gt;(Key-Value, 문서, 그래프 등)&lt;/td&gt;
&lt;td&gt;정형 데이터&lt;br&gt;(관계형 모델)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JOIN&lt;/td&gt;
&lt;td&gt;클라이언트측에서 JOIN 을 추천&lt;br&gt;서버측은 데이터를 중첩하여 대응&lt;/td&gt;
&lt;td&gt;서버측에서 JOIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스키마&lt;/td&gt;
&lt;td&gt;가변 스키마가 많다&lt;/td&gt;
&lt;td&gt;고정 스키마&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;확장성&lt;/td&gt;
&lt;td&gt;노드 추가 및 처리 분산&lt;br&gt;※노드 = 컴퓨터&lt;/td&gt;
&lt;td&gt;노드 자체의 성능을 높인다&lt;br&gt;읽기 전용 복제본 노드 추가&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;이는 어디까지나 경향 이야기이다. 위에서 언급했듯이 NoSQL에는 기술적 정의가 없다.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;nosql-유형-및-예제&#34;&gt;NoSQL 유형 및 예제&lt;/h3&gt;
&lt;p&gt;NoSQL의 유명한 데이터 모델 유형은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;데이터 모델 유형&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;제품 예&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Key-Value 캐시&lt;br&gt;(인 메모리)&lt;/td&gt;
&lt;td&gt;키와 해당 값으로 메모리 에 데이터 관리&lt;br&gt;(연관 배열, 사전 형식)&lt;/td&gt;
&lt;td&gt;Memcached&lt;br&gt;Redis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key-Value 스토어&lt;/td&gt;
&lt;td&gt;키와 해당 값으로 스토리지 에 데이터 관리 (연관 배열, 사전 형식)&lt;/td&gt;
&lt;td&gt;DynamoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;와이드 컬럼 스토어&lt;/td&gt;
&lt;td&gt;테이블, 행, 열로 데이터 관리&lt;br&gt;(2차원 Key-Value 스토어)&lt;br&gt;RDB 와 달리 행마다 열 이름이 달라도 된다.&lt;/td&gt;
&lt;td&gt;카산드라&lt;br&gt;HBase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;그래프 데이터베이스&lt;/td&gt;
&lt;td&gt;노드, 에지, 속성으로 데이터 관리&lt;/td&gt;
&lt;td&gt;Neo4j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;도큐먼트 저장소&lt;/td&gt;
&lt;td&gt;반정형 데이터(도큐먼트 지향)로 데이터 관리&lt;/td&gt;
&lt;td&gt;Elasticsearch&lt;br&gt;MongoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/NoSQL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/NoSQL&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;데이터-웨어하우스dwh란&#34;&gt;데이터 웨어하우스(DWH)란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-5-dwh.png&#34; alt=&#34;빅데이터 파이프라인:데이터 웨어하우스&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;데이터 웨어하우스(DWH)&lt;/h4&gt;

    데이터웨어 하우스(DWH, data warehouse)는 정형 데이터를 저장하고 분석하는 데이터베이스이다.

&lt;/div&gt;

&lt;h3 id=&#34;데이터-웨어하우스dwh와-rdb의-차이&#34;&gt;데이터 웨어하우스(DWH)와 RDB의 차이&lt;/h3&gt;
&lt;p&gt;데이터 웨어하우스(DWH)와 RDB 의 차이점은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;데이터 웨어하우스(DWH)&lt;/th&gt;
&lt;th&gt;관계형 데이터베이스(RDB)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;분석(OLAP)&lt;/td&gt;
&lt;td&gt;트랜잭션 처리 (OLTP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스토리지&lt;/td&gt;
&lt;td&gt;열 지향 스토리지 형식&lt;/td&gt;
&lt;td&gt;행 지향 스토리지 형식&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 양&lt;/td&gt;
&lt;td&gt;빅데이터&lt;/td&gt;
&lt;td&gt;스몰 데이터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 정규화&lt;/td&gt;
&lt;td&gt;부분적으로 비정규화&lt;br&gt;- 스타 스키마&lt;br&gt;- 눈송이 스키마&lt;/td&gt;
&lt;td&gt;제3정규형&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RDB는 데이터 양이 늘어나면 매우 느려진다.&lt;/p&gt;
&lt;p&gt;따라서, 대량의 데이터를 분석하려면 데이터 웨어하우스(DWH)를 사용한다.&lt;br&gt;
(역으로 말하면, 고속으로 분석할 수 있는 스몰 데이터의 경우는 RDB이면 된다.)&lt;/p&gt;
&lt;h3 id=&#34;열-지향-데이터베이스columnar-database란&#34;&gt;열 지향 데이터베이스(Columnar Database)란?&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;열 지향 데이터베이스(Columnar Database)&lt;/h4&gt;

    열 지향 데이터베이스(Columnar Database)는 데이터를 스토리지 블록에 열 단위로 저장하는 데이터베이스이다.

&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/dwh-1.png&#34; alt=&#34;DHW - 열 지향 데이터베이스(Columnar Database)란?&#34;&gt;&lt;/p&gt;
&lt;p&gt;열 지향 데이터베이스는 다음 파일 형식(열 지향 저장소 형식)으로 데이터를 저장한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORC&lt;/li&gt;
&lt;li&gt;Parquet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또, 열 지향 데이터베이스(열 지향 스토리지 형식)의 아래와 같이 3가지 특징이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분석시 읽기 효율이 좋다.&lt;/li&gt;
&lt;li&gt;쓰기 효율이 떨어진다.&lt;/li&gt;
&lt;li&gt;압축률이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;분석시-읽기-효율이-좋다&#34;&gt;분석시 읽기 효율이 좋다.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;열 지향 데이터베이스에서는 불필요한 열을 읽을 수 있으므로 읽기 효율이 좋아진다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터 분석에는 열(column)만 필요한 경우가 많다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음 테이블에서 주문 피크 시간을 분석하려는 경우에는 &amp;lsquo;구매일&amp;rsquo; 컬럼만 집계 하면 되며 전체 테이블을 로드할 필요가 없다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/dwh-2.png&#34; alt=&#34;DHW - 분석시 읽기 효율이 좋다.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;색인은 하나의 열로 설정되지만, 분석에서는 색인이 없는 열을 사용할 수 있다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;위의 예제에서 열 지향 데이터베이스를 사용하면 블록 읽기를 1/3로 줄일 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;쓰기-효율이-떨어진다&#34;&gt;쓰기 효율이 떨어진다.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;열 지향 데이터베이스에서는 쓰기 블록을 찾아야 하므로 쓰기 효율이 떨어진다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;각 데이터베이스를 작성하는 절차는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;열 지향 데이터베이스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;쓸 블록 찾는다.&lt;/li&gt;
&lt;li&gt;열의 내용을 추가한다.&lt;/li&gt;
&lt;li&gt;모든 열에 대해 1과 2을 반복한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;행 지향 데이터베이스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가장 마지막 블록에 넣는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/dwh-3.png&#34; alt=&#34;DHW - 쓰기 효율이 떨어진다.&#34;&gt;&lt;/p&gt;
&lt;p&gt;쓰기에 대해서는 행 지향 데이터베이스가 효율이 더 좋다는 것을 알 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;압축률이-좋다&#34;&gt;압축률이 좋다.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;동일한 컬럼은 동일한 데이터 유형을 포함하므로, 컬럼 지향 데이터베이스의 압축률이 향상된다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;예를 들어, &amp;lsquo;구매수&amp;rsquo; 열에서 같은 숫자가 계속되기 쉽다. 이 경우 압축 효율이 좋아진다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/dwh-3.png&#34; alt=&#34;DHW - 압축률이 좋다.&#34;&gt;&lt;br&gt;
&lt;em&gt;압축 이미지&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;압축률이 좋으면 한번에 스토리지 액세스로 많은 데이터를 읽을 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;데이터-웨어하우스dwh-예제&#34;&gt;데이터 웨어하우스(DWH) 예제&lt;/h3&gt;
&lt;p&gt;데이터 웨어하우스(DWH)의 특정 소프트웨어 및 서비스는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snowflake.com/data-warehouse-modernization/?lang=ko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Showflake&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/ko/redshift/?nc1=h_ls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redshift&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadoop + Hive/Presto + ORC/Parquet&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;데이터-웨어하우스dwh와-데이터레이크의-차이&#34;&gt;데이터 웨어하우스(DWH)와 데이터레이크의 차이&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;데이터 웨어하우스(DWH)&lt;/th&gt;
&lt;th&gt;데이터레이크&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;&amp;ldquo;지금&amp;rdquo; 데이터를 가장 빠르게 분석&lt;/td&gt;
&lt;td&gt;&amp;ldquo;미래&amp;quot;에 이용할 데이터를 모으기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 형식&lt;/td&gt;
&lt;td&gt;정형/반정형&lt;/td&gt;
&lt;td&gt;모두(정형/비정형/반정형)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;저장&lt;/td&gt;
&lt;td&gt;번거롭다(구조화 된 데이터로 변환)&lt;/td&gt;
&lt;td&gt;쉽다(무변환으로 저장)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;분석/추출&lt;/td&gt;
&lt;td&gt;빠르다&lt;/td&gt;
&lt;td&gt;느리다(정형화되어 있지 않기 때문에)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;새로운 요구 분석&lt;/td&gt;
&lt;td&gt;불가능(스키마 이외의 데이터 버림)&lt;/td&gt;
&lt;td&gt;가능(모든 데이터 포함)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;용량&lt;/td&gt;
&lt;td&gt;제한 있음&lt;/td&gt;
&lt;td&gt;무제한&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;데이터-마트data-mart란&#34;&gt;데이터 마트(Data Mart)란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-6-data-mart.png&#34; alt=&#34;빅데이터 파이프라인:데이터 마트&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;데이터 마트&lt;/h4&gt;

    데이터 마트는 정형화된 데이터를 저장하고 분석할 수 있는 데이터베이스이다.

&lt;/div&gt;

&lt;h3 id=&#34;데이터-마트와-데이터-웨어하우스dwh의-차이&#34;&gt;데이터 마트와 데이터 웨어하우스(DWH)의 차이&lt;/h3&gt;
&lt;p&gt;데이터 웨어하우스의 규모가 작아진 것이 데이터 마트라고 할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;데이터 마트&lt;/th&gt;
&lt;th&gt;데이터 웨어하우스&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;필요한 데이터만 분석&lt;/td&gt;
&lt;td&gt;모든 데이터 분석&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;범위&lt;/td&gt;
&lt;td&gt;단일 부서&lt;/td&gt;
&lt;td&gt;모든 부서&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사이즈&lt;/td&gt;
&lt;td&gt;소형 데이터(100GB 미만)&lt;/td&gt;
&lt;td&gt;빅데이터(100GB 이상)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;소량의 데이터 분석&lt;/td&gt;
&lt;td&gt;능숙하다(고속)&lt;/td&gt;
&lt;td&gt;능숙하지 못하다(저속)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;대량의 데이터 분석&lt;/td&gt;
&lt;td&gt;능숙하지 못하다(저속)&lt;/td&gt;
&lt;td&gt;능숙하다(고속)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;빅데이터의 크기는 2022년 시점에서의 기준&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;메모리에 모든 데이터가 올라오게 되면 로컬 호스트 1대로 처리하는 것이 가장 빠르다.
(노드간 통신이나 결과를 병합하는 지연 시간(Latency)이 발생하기 때문)&lt;/p&gt;
&lt;p&gt;따라서, 분석 속도를 높이기 위해 데이터 웨어하우스에서 필요한 데이터만 데이터 마트로 이동한다.&lt;/p&gt;
&lt;h3 id=&#34;데이터-마트의-예&#34;&gt;데이터 마트의 예&lt;/h3&gt;
&lt;p&gt;데이터 마트의 예는 다음을 포함한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB&lt;/li&gt;
&lt;li&gt;DWH의 클러스터 규모가 작은 것(RDB 권장)&lt;/li&gt;
&lt;li&gt;CSV 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에서 볼 수 있듯이 규모가 작고 분석 가능한 데이터 저장소를 나타낸다.&lt;/p&gt;
&lt;h2 id=&#34;sql-쿼리-엔진이란&#34;&gt;SQL 쿼리 엔진이란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-7-sql-query-engine.png&#34; alt=&#34;빅데이터 파이프라인:SQL 쿼리 엔진&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;SQL 쿼리 엔진&lt;/h4&gt;

    SQL 쿼리 엔진은 SQL 이라는 언어로 데이터를 집계하는 엔진이다.

&lt;/div&gt;

&lt;p&gt;&amp;ldquo;프로그래밍하지 않고 더 쉽게 데이터를 조작하고 싶다&amp;quot;는 요구에서 SQL 쿼리 엔진이 탄생했다.&lt;/p&gt;
&lt;h3 id=&#34;sql-쿼리-엔진의-예&#34;&gt;SQL 쿼리 엔진의 예&lt;/h3&gt;
&lt;p&gt;SQL 쿼리 엔진의 특정 소프트웨어 및 서비스는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ETL
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/confluentinc/ksql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ksql DB&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (Kafka)&lt;/li&gt;
&lt;li&gt;Apache Flink SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL
&lt;ul&gt;
&lt;li&gt;Elasticsearch SQL&lt;/li&gt;
&lt;li&gt;PartiQL (Dynamo DB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 레이크
&lt;ul&gt;
&lt;li&gt;Presto&lt;/li&gt;
&lt;li&gt;Apache Hive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 웨어하우스
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sql-workbench.eu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQL Workbench/J&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DBeaver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bibusiness-intelligence-도구&#34;&gt;BI(Business Intelligence) 도구&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/term/bigdata-pipeline-8-bi.png&#34; alt=&#34;빅데이터 파이프라인:BI 도구&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;BI(Business Intelligence) 도구&lt;/h4&gt;

    BI(Business Intelligence) 도구는 데이터스토어의 데이터를 시각화하는 도구이다.

&lt;/div&gt;

&lt;h3 id=&#34;bi-도구의-예&#34;&gt;BI 도구의 예&lt;/h3&gt;
&lt;p&gt;대표적인 BI 도구는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tableau&lt;/li&gt;
&lt;li&gt;Grafana&lt;/li&gt;
&lt;li&gt;Kibana(Elasticsearch)&lt;/li&gt;
&lt;li&gt;QuickSight&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;데이터스토어-요약&#34;&gt;데이터스토어 요약&lt;/h2&gt;
&lt;p&gt;RDB 와 빅데이터 분석 기반에서 자주 이용되는 데이터스토어의 차이를 표로 정리하면 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;RDB&lt;/th&gt;
&lt;th&gt;NoSQL&lt;/th&gt;
&lt;th&gt;DWH&lt;/th&gt;
&lt;th&gt;데이터 레이크&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OSS/서비스&lt;/td&gt;
&lt;td&gt;Oracle&lt;br&gt;MySQL&lt;br&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;Elasticsearch&lt;br&gt;Cassandra&lt;br&gt;Redis snowflake HIVE&lt;br&gt;Amazon Redshift&lt;/td&gt;
&lt;td&gt;hadoop HDFS&lt;br&gt;Amazon S3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;트랜잭션&lt;br&gt;(OLTP)&lt;/td&gt;
&lt;td&gt;특정 실적 중시&lt;/td&gt;
&lt;td&gt;분석(OLAP)&lt;/td&gt;
&lt;td&gt;데이터 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 구조&lt;/td&gt;
&lt;td&gt;정형화&lt;/td&gt;
&lt;td&gt;반정형화&lt;/td&gt;
&lt;td&gt;정형화&lt;br&gt;반정형화&lt;/td&gt;
&lt;td&gt;정형화&lt;br&gt;비정형화&lt;br&gt;반구조화&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스키마&lt;/td&gt;
&lt;td&gt;고정 스키마&lt;/td&gt;
&lt;td&gt;가변 스키마&lt;/td&gt;
&lt;td&gt;고정 스키마&lt;/td&gt;
&lt;td&gt;스키마리스&lt;br&gt;(데이터 카탈로그)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
      
      <category>BigData</category>
      
    </item>
    
    <item>
      <title>스트림 처리란? OSS 엔진 소개</title>
      <link>https://www.devkuma.com/docs/big-data/stream-processing/</link>
      <pubDate>Fri, 26 Aug 2022 08:49:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/big-data/stream-processing/</guid>
      <description>
        
        
        &lt;h2 id=&#34;스트림-처리란&#34;&gt;스트림 처리란?&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;strong&gt;스트림 처리&lt;/strong&gt;는 스트리밍 데이터(시간이 지남에 따라 무한히 발생하는 데이터)를 실시간으로 계속 처리하는 것이다.

&lt;/div&gt;

&lt;p&gt;예를 들어, 벨트 컨베이어를 흐르는 티셔츠에 대해 센서를 사용하여 색상별로 분리하여 골판지에 포장하는 경우를 생각해 보자.&lt;/p&gt;
&lt;p&gt;이 경우 &amp;ldquo;스트리밍 데이터&amp;quot;와 &amp;ldquo;스트림 처리&amp;quot;는 각각 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스트리밍 데이터: 센서가 전송하는 티셔츠 이미지&lt;/li&gt;
&lt;li&gt;스트림 처리 : 센서에서 수신한 티셔츠의 이미지를 바탕으로 AI가 실시간으로 색상을 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;스트림-처리-vs-배치-처리&#34;&gt;스트림 처리 VS 배치 처리&lt;/h2&gt;
&lt;p&gt;여기서는 스트림 처리와 배치 처리를 비교하여 스트림 처리의 특성을 이해한다.&lt;/p&gt;
&lt;p&gt;스트림 처리와 배치 처리의 차이는 시간축의 차이이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;스트림 처리&lt;/th&gt;
&lt;th&gt;배치 처리&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;목적&lt;/td&gt;
&lt;td&gt;실시간(realtime) 중시&lt;/td&gt;
&lt;td&gt;처리량(throughput) 중시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;처리할 타이밍&lt;/td&gt;
&lt;td&gt;스트리밍 데이터가 발생했을 때&lt;/td&gt;
&lt;td&gt;하드웨어 리소스가 남을 때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;처리에 걸리는 시간&lt;/td&gt;
&lt;td&gt;몇 밀리초 ~ 몇 초&lt;/td&gt;
&lt;td&gt;몇 분 ~ 몇 시간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;유즈 케이스&lt;br&gt;(사용 사례)&lt;/td&gt;
&lt;td&gt;신용 카드 사기 탐지&lt;br&gt;게임의 실시간 세계 순위&lt;br&gt;IoT 장치 데이터 분석&lt;/td&gt;
&lt;td&gt;야간 배치&lt;br&gt;점포의 월별 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;유스 케이스를 보면 알 수 있듯이, 스트림 처리는 시간이 지남에 따라 무한히 발생하는 데이터를 실시간으로 처리하여 하는 경우에 사용된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 신용 카드의 부정 이용은 1초라도 빨리 인지를 하여 사용을 중지해야 한다. 다음달까지 처리한다 등과 같이 늦어서는 안된다.&lt;/p&gt;
&lt;h2 id=&#34;스트리밍-데이터란&#34;&gt;스트리밍 데이터란?&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;strong&gt;스트리밍 데이터&lt;/strong&gt;는 무한 데이터 세트이다. 여기서 말하는 무한은 시간이 지남에 따라 새로운 레코드가 계속 전송 받는다라는 것을 의미한다.

&lt;/div&gt;

&lt;p&gt;또한, 스트리밍 데이터는 &amp;ldquo;이벤트 스트림&amp;quot;이나 &amp;ldquo;데이터 스트림&amp;rdquo; 이라고도 불린다.&lt;/p&gt;
&lt;p&gt;스트리밍 데이터는 무한이라고 하는 것 외에, 아래 3개의 특성을 가진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순서가 지정&lt;/li&gt;
&lt;li&gt;불변(immutable) 데이터 레코드&lt;/li&gt;
&lt;li&gt;재생 가능 (※ 있으면 하는 특징)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;순서가-지정&#34;&gt;순서가 지정&lt;/h3&gt;
&lt;p&gt;이벤트(스트리밍 데이터의 각 레코드)에는 순서가 지정된다.&lt;/p&gt;
&lt;p&gt;예를 들면, 이벤트 1 &amp;ldquo;급여 200 만원 송금&amp;rdquo;, 이벤트 2 &amp;ldquo;50만원 인출&amp;quot;에는 순서가 있다. 잔액 0원 계좌의 경우, 이벤트 2가 먼저 처리되게 되면 잔고 부족이 발생해 버린다.&lt;/p&gt;
&lt;h3 id=&#34;불변immutable-데이터-레코드&#34;&gt;불변(immutable) 데이터 레코드&lt;/h3&gt;
&lt;p&gt;이벤트는 한번 발생하면 삭제, 변경할 수 없다.&lt;/p&gt;
&lt;p&gt;예를 들어, 이벤트 &amp;ldquo;50만원 인출&amp;quot;을 나중에 삭제하거나 변경할 수 없다. 이 이벤트를 취소하려면, 새로운 이벤트 &amp;ldquo;5만원 입금&amp;quot;을 실행한다.&lt;/p&gt;
&lt;h3 id=&#34;재생-가능&#34;&gt;재생 가능&lt;/h3&gt;
&lt;p&gt;순서가 지정되어 있고, 변동 가능한 데이터 레코드로 인해 스트리밍 데이터를 재현할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음 이벤트 목록에서 현재 잔액을 찾는 것은 물론 어느 시점에서 잔액을 찾는 것도 가능하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이벤트 1 : 잔고 0원으로 계좌 개설&lt;/li&gt;
&lt;li&gt;이벤트 2 : 50만원 입금&lt;/li&gt;
&lt;li&gt;이벤트 3 : 100만원 입금&lt;/li&gt;
&lt;li&gt;이벤트 4 : 50만원 인출&lt;/li&gt;
&lt;li&gt;이벤트 5 : 50만원 입금&lt;/li&gt;
&lt;li&gt;이벤트 6 : 100만원 인출&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;또한, 이벤트 리스트로부터 과거가 있는 상태의 데이터를 재현하는 것을 **머티리얼라이즈(Materialise, 구체화되다)**라고 한다. 이벤트 4 종료 시점에서의 &amp;ldquo;잔고 데이터&amp;quot;를 구체화하면 &amp;ldquo;100만원&amp;quot;이 된다.&lt;/p&gt;
&lt;h2 id=&#34;스트림-처리의-시간-개념&#34;&gt;스트림 처리의 시간 개념&lt;/h2&gt;
&lt;p&gt;스트림 처리에서는 시간을 기반으로 스트리밍 데이터를 처리할 수 있으므로 정확한 시간 개념을 정의하는 것이 중요하다. 스트림 처리에서는 아래 3개의 시간의 개념을 이용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이벤트 시간(Event Time)&lt;/li&gt;
&lt;li&gt;수집 시간(Ingest Time)&lt;/li&gt;
&lt;li&gt;처리 시간(Processing Time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/stream-processing/stream-processing-time.png&#34; alt=&#34;스트림 처리 시간&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;이벤트-시간event-time&#34;&gt;이벤트 시간(Event Time)&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;strong&gt;이벤트 시간&lt;/strong&gt;은 이벤트가 발생했을 때 레코드를 만든 시간이다.

&lt;/div&gt;

&lt;p&gt;이벤트 시간은 스트리밍 데이터를 분석하는데 사용된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 사이트에 액세스하는 피크 시간&lt;/li&gt;
&lt;li&gt;매시간 매출이 증가하는 상품의 종류&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;수집-시간ingest-time&#34;&gt;수집 시간(Ingest Time)&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;strong&gt;수집 시간&lt;/strong&gt;은 이벤트가 스트리밍 데이터 소스에 도착한 시간이다.

&lt;/div&gt;

&lt;p&gt;스트림 처리에서는 실시간으로 처리를 하기 때문에, 통상적으로 &amp;ldquo;이벤트 시간&amp;quot;과 &amp;ldquo;수집 시간&amp;quot;은 거의 같다.&lt;/p&gt;
&lt;p&gt;네트워크 장애 등에 의해, 데이터의 도착에 지연이 발생했을 경우에 &amp;ldquo;이벤트 시간&amp;quot;과 &amp;ldquo;수집 시간&amp;quot;은 격차가 생긴다.&lt;/p&gt;
&lt;h3 id=&#34;처리-시간processing-time&#34;&gt;처리 시간(Processing Time)&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;strong&gt;처리 시간&lt;/strong&gt;은 스트림 처리 애플리케이션에서 실제로 처리한 시간이다.

&lt;/div&gt;

&lt;p&gt;&amp;ldquo;처리 시간&amp;quot;과 &amp;ldquo;수집 시간&amp;quot;에 큰 격차가 있는 경우에는 어플리케이션측에서 스트림 처리가 사이에 맞지 않을 가능성이 있다.&lt;/p&gt;
&lt;h2 id=&#34;타임-윈도우time-window&#34;&gt;타임 윈도우(Time Window)&lt;/h2&gt;
&lt;p&gt;스트림 처리에서는 스트리밍 데이터에 대해서 시간 기간으로 윈도우를 조작하는 것이 가능하다.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    윈도우 조작은 제한된 범위의 레코드별로 조작하는 것이다. 이 제한된 범위를 윈도우 사이즈라고 한다.

&lt;/div&gt;

&lt;p&gt;타임 윈도우에서는 시간을 기준으로 윈도우 사이즈를 결정한다. (10초마다 쌓인 레코드를 처리한다 등)&lt;/p&gt;
&lt;p&gt;타임 윈도우의 타입에는 윈도우의 이동 빈도(전진 간격)에 의해 주로 이하의 3가지 종류가 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;윈도우 이동 빈도(전진 간격)&lt;/th&gt;
&lt;th&gt;처리 중복&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;텀블링 윈도우(Tumbling window)&lt;/td&gt;
&lt;td&gt;윈도우 사이트와 동일하다.&lt;/td&gt;
&lt;td&gt;하지 않는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;호핑 윈도우(Hopping window)&lt;/td&gt;
&lt;td&gt;윈도우 사이트보다 작다.&lt;/td&gt;
&lt;td&gt;한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;슬라이딩 윈도우(Sliding window)&lt;/td&gt;
&lt;td&gt;윈도우내에 있는 이벤트가 변화할 때마다 매번&lt;/td&gt;
&lt;td&gt;할 수도 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;텀블링-윈도우tumbling-window&#34;&gt;텀블링 윈도우(Tumbling window)&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;이동 빈도&amp;quot;와 &amp;ldquo;윈도우 사이즈&amp;quot;가 같은 윈도우 타입이다.&lt;/p&gt;
&lt;p&gt;이벤트에 대한 처리가 중복되지 않는 특징이 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/stream-processing/tumbling-window.png&#34; alt=&#34;텀블링 윈도우&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;호핑-윈도우hopping-window&#34;&gt;호핑 윈도우(Hopping window)&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;이동 빈도&amp;rdquo; 보다 &amp;ldquo;윈도우 사이즈&amp;quot;가 큰 윈도우 타입이다.&lt;/p&gt;
&lt;p&gt;이벤트에 대한 처리가 중복되는 특징이 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/stream-processing/hopping-window.png&#34; alt=&#34;호핑 윈도우&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;슬라이딩-윈도우sliding-window&#34;&gt;슬라이딩 윈도우(Sliding window)&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;이동 빈호&amp;quot;가 &amp;ldquo;윈도우내에 있는 이벤트가 변화할 때&amp;quot;가 같은 윈도우 타입이다.&lt;/p&gt;
&lt;p&gt;윈도우내에 있는 이벤트가 변경되지 않을 때는 아무 작업도 수행하지 않다. (SQL 쿼리의 경우 결과를 출력하지 않는다.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/stream-processing/sliding-window.png&#34; alt=&#34;슬라이딩 윈도우&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;스트림-처리하는-oss-및-서비스&#34;&gt;스트림 처리하는 OSS 및 서비스&lt;/h2&gt;
&lt;p&gt;스트림 처리는 아래의 2가지를 이용하여 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분산 스트리밍 데이터 소스(이벤트를 큐잉하는 데이터 소스)&lt;/li&gt;
&lt;li&gt;분산 스트림 처리 어플리케이션(큐의 이벤트에 스트림 처리를 실시)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;분산-스트리밍-데이터-소스&#34;&gt;분산 스트리밍 데이터 소스&lt;/h3&gt;
&lt;p&gt;분산 스트리밍 데이터 소스는 주로 다음 Pub/Sub 메시징 대기열을 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache Kafka&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Streams&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;분산-스트림-처리-애플리케이션에서-사용하는-엔진&#34;&gt;분산 스트림 처리 애플리케이션에서 사용하는 엔진&lt;/h3&gt;
&lt;p&gt;분산 스트림 처리 어플리케이션에서는 주로 아래의 분산 처리 엔진을 이용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka Streams (Apache Kafka의 Streams API)&lt;/li&gt;
&lt;li&gt;Kinesis Data Analytics&lt;/li&gt;
&lt;li&gt;Apache Flink&lt;/li&gt;
&lt;li&gt;Apache Spark Streaming&lt;/li&gt;
&lt;li&gt;아파치 스톰&lt;/li&gt;
&lt;li&gt;Apache Samza&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/big-data/stream-processing/2016-03-12-apache-streaming-technologies.png&#34; alt=&#34;apache-streaming-technologies&#34;&gt;&lt;br&gt;
&lt;a href=&#34;https://databaseline.tech/an-overview-of-apache-streaming-technologies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://databaseline.tech/an-overview-of-apache-streaming-technologies/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;기업의-스트림-처리-사례&#34;&gt;기업의 스트림 처리 사례&lt;/h3&gt;
&lt;p&gt;스트림 처리(Apache Kafka + Kafka Streams)를 기업에서 사용한 사례는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linedevday.linecorp.com/jp/2018/en/#A-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LINE 회사: Multi-Tenancy Kafka cluster for LINE services with 250 billion daily messages&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.cerner.com/blog/cerner-open-sources-its-kafka-utilities/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cerner 회사: 주요 의료 IT 기업 Cerner사의 Kafka 활용 사례&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/ko-kr/customers/bosch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bosch 회사: Tools Streams IoT Data with Confluent Cloud&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>BigData</category>
      
    </item>
    
    <item>
      <title>ZooKeeper API</title>
      <link>https://www.devkuma.com/docs/apache-zookeeper/java-api/</link>
      <pubDate>Sat, 15 Apr 2023 08:42:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/apache-zookeeper/java-api/</guid>
      <description>
        
        
        &lt;p&gt;ZooKeeper는 Java와 C를 위한 공식적인 API를 제공하고 있고, 주키퍼 커뮤니티에서 .NET, python 등 여러 언어의 비공식적인 API를 제공하고 있다.&lt;/p&gt;
&lt;h2 id=&#34;zookeeper-api-개요&#34;&gt;ZooKeeper API 개요&lt;/h2&gt;
&lt;p&gt;Znode는 주키퍼 앙상블의 핵심 컴포넌트이고 주키퍼 API는 주키퍼 앙상블과 znode의 세세히 조작할 수 있는 간단한 메소드를 제공한다.&lt;/p&gt;
&lt;p&gt;주키퍼 앙상블에 접속하면 주키퍼 앙상블은 클라이언트에게 하나의 Session ID를 발급한다.
주기적으로 서버에 heartbeats를 전송한다. 그렇지 않으면 주키퍼 앙상블은 Session ID를 만료하고 클라이언트는 재연결해야한다.
znode Get/Set은 session ID가 존재하는 한 활성화된다.
모든 작업이 완료되었다면 주키퍼 앙상블과의 연결을 종료한다. 클라이언트가 오랫동안 비활성화 되면, 주키퍼 앙상블은 자동적으로 클라이언트와의 연결을 종료한다.&lt;/p&gt;
&lt;h2 id=&#34;zookeeper-api-라이브러리-추가&#34;&gt;ZooKeeper API 라이브러리 추가&lt;/h2&gt;
&lt;p&gt;먼저, ZooKeeper API를 사용하기 위해 아래 라이브러리를 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;dependencies&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;implementation&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;org.apache.zookeeper:zookeeper:3.8.1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;java-바인딩&#34;&gt;Java 바인딩&lt;/h2&gt;
&lt;p&gt;ZooKeeper API의 중점적인 부분은 ZooKeeper 클래스이다. 이는 ZooKeeper 앙상블과의 연결을 위해 클래스의 생성자와 메소드를 통해 옵션들을 제공한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect : ZooKeeper 앙상블에 연결&lt;/li&gt;
&lt;li&gt;create : Znode 생성&lt;/li&gt;
&lt;li&gt;exists : Znode 존재하는지 여부와 그 정보를 확인&lt;/li&gt;
&lt;li&gt;getData : 특정 Znode에서 데이터를 가져오기&lt;/li&gt;
&lt;li&gt;setData : 특정 Znode에서 데이터를 설정&lt;/li&gt;
&lt;li&gt;getChildren : 특정 Znode에서 사용 가능한 모든 하위 노드 가져오기&lt;/li&gt;
&lt;li&gt;delete : 특정 znode와 모든 자식을 삭제&lt;/li&gt;
&lt;li&gt;close : 연결을 끊다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;connect--zookeeper-앙상블에-연결&#34;&gt;connect : ZooKeeper 앙상블에 연결&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 생성자를 통해 접속할 수 있는 기능을 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connectionString&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sessionTimeout&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Watcher&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connectionString&lt;/code&gt; : ZooKeeper 앙상블 host&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sessionTimeout&lt;/code&gt; : 세션 타임아웃(milliseconds)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watcher&lt;/code&gt; : &lt;code&gt;Watcher&lt;/code&gt; 인터페이스를 구현하고 있는 하나의 객체. ZooKeeper 앙상블은 watcher 객체를 통해 접속 상태를 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 헬퍼 클래스인 &lt;code&gt;ZooKeeperConnection&lt;/code&gt;을 생성하고 &lt;code&gt;connect&lt;/code&gt; 메서드를 추가해보자. &lt;code&gt;connect&lt;/code&gt; 메서드는 하나의 &lt;code&gt;ZooKeeper&lt;/code&gt; 객체를 생성하고 주키퍼 앙상블로 연결하고 나서 객체를 반환한다.&lt;/p&gt;
&lt;p&gt;여기에서는 &lt;code&gt;CountDownLatch&lt;/code&gt;는 클라이언트가 연결될 때 까지 메인 프로세스를 대기하는데 &lt;code&gt;await&lt;/code&gt; 호출한다.&lt;/p&gt;
&lt;p&gt;주키퍼 앙상블은 Watcher callback을 통해 커넥션 상태를 받는다. Watcher callback은 주키퍼 앙상블로 클라이언트가 연결 될 때 한번 호출될 것이고 Watcher callback은 메인 프로세스의 await lock을 해제하기 위해 &lt;code&gt;CountDownLatch&lt;/code&gt;의 &lt;code&gt;countDown&lt;/code&gt; 메서드를 호출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;java.io.IOException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;java.util.concurrent.CountDownLatch&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.WatchedEvent&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.Watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zoo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CountDownLatch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CountDownLatch&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IOException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;zoo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WatchedEvent&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;KeeperState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;SyncConnected&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;countDown&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zoo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;zoo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create--znode-생성&#34;&gt;create : Znode 생성&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 주키퍼 앙상블에 새로운 znode를 생성하기 위한 &lt;code&gt;create&lt;/code&gt; 메서드를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ACL&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;acl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CreateMode&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;createMode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : Znode의 경로.
&lt;ul&gt;
&lt;li&gt;예를 들어, &lt;code&gt;/myapp1&lt;/code&gt;,&lt;code&gt;/myapp2&lt;/code&gt;, &lt;code&gt;/myapp1/mydata1&lt;/code&gt;, &lt;code&gt;myapp2/mydata1/myanothersubdata&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; : 특정 znode 경로에 저장된 데이터&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acl&lt;/code&gt; : 생성된 노드의 접근 제어 목록. ZooKeeper API는 기본 acl 리스트를 얻기 위한 &lt;code&gt;ZooDefs.Ids&lt;/code&gt; static 인터페이스를 제공한다.
&lt;ul&gt;
&lt;li&gt;예를 들어, &lt;code&gt;ZooDefs.Ids.OPEN_ACL_UNSAFE&lt;/code&gt;는 열려있는 znode를 위한 acl의 리스트를 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createMode&lt;/code&gt; : node의 타입이다. ephemeral이 될 수도 있고 sequential이 될 수도 있고 둘 다가 될 수도 있다. 이는 하나의 enum 값이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;create 메서드의 기능을 확인해보기 위해 새로운 자바 어플리케이션 생성해 보겠다. 메인 메서드에서는 &lt;code&gt;ZooKeeperConnection&lt;/code&gt; 타입의 객체 하나를 생성하고 주키퍼 앙상블로 &lt;code&gt;connect&lt;/code&gt; 메서드를 통해 접속한다.&lt;br&gt;
connect 메서드는 ZooKeeper 객체인 zk를 반환할 것이다. custom path와 데이터와 함께 zk 객체의 create 메서드를 호출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.CreateMode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooDefs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKCreate&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooDefs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Ids&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;OPEN_ACL_UNSAFE&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CreateMode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;PERSISTENT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;My first zookeeper app&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exists--znode의-존재-확인&#34;&gt;exists : Znode의 존재 확인&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 Znode의 존재 여부를 체크하는 &lt;code&gt;exists&lt;/code&gt; 메서드를 제공한다. 찾으려는 znode가 존재하면 해당 znode의 메타데이터를 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : Znode 경로&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watcher&lt;/code&gt; : 지정된 znode를 감시할지 여부를 지정하는 부울 값&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.data.Stat&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKExist&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Node exists and the node version is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Node does not exists.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;getdata--znode-데이터-조회&#34;&gt;getData : Znode 데이터 조회&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 지정된 znode 내에 저장된 데이터와 status 정보를 얻기 위한 &lt;code&gt;getData&lt;/code&gt; 메서드를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Watcher&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : znode의 경로.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watcher&lt;/code&gt; : Watcher 타입의 콜백 함수. 주키퍼 앙상블은 지정된 znode의 데이터가 변경될 때 이 Watcher 콜백을 통해 알리게 된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stat&lt;/code&gt; : znode의 메타데이터를 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;java.util.concurrent.CountDownLatch&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.Watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.data.Stat&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKGetData&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CountDownLatch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CountDownLatch&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;Event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;EventType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Expired&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;countDown&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;bn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;countDown&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;connectedSignal&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Node does not exists.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;어플리케이션을 실행하면 현재 셋팅된 data가 콘솔창에 출력되고 await 상태로 대기하고 있다. Watcher에 대한 콜백 함수도 지정해 놓았으므로 &lt;code&gt;zkCli&lt;/code&gt;를 사용하여 데이터를 set해보면 Watcher 콜백함수가 실행될 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/zkCli.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; /MyFirstZnode Hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러면 콘솔창에 콜백함수가 호출되어 Hello가 출력되고, &lt;code&gt;countDown&lt;/code&gt; 메서드를 통해 await 상태의 lock을 해제하므로 어플리케이션이 종료된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setdata--znode-데이터-설정&#34;&gt;setData : Znode 데이터 설정&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 지정한 znode에 data를 변경하여 추가하기 위한 &lt;code&gt;setData&lt;/code&gt; 메서드를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : znode의 경로.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; : 지정된 znode 경로에 저장된 데이터.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt; : znode의 현재 버전. ZooKeeper는 data에 변화가 있으면 znode의 버전 번호를 갱신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKSetData&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Done.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;애플리케이션이 실행되면 지정된 znode의 데이터가 변경되며 ZooKeeper CLI인 &lt;code&gt;zkCli.sh&lt;/code&gt;를 사용하여 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; /path/to/zookeeper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/zkCli.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; get /MyFirstZnode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;getchildren--하위-노드-데이터-설정&#34;&gt;getChildren : 하위 노드 데이터 설정&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 특정 znode의 모든 하위 노드들을 가져오는 &lt;code&gt;getChildren&lt;/code&gt; 메서드를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;getChildren&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Watcher&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;watcher&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : znode의 경로.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watcher&lt;/code&gt; : Watcher 유혀의 콜백 함수. ZooKeeper 앙상블은 지정된 znode의 데이터가 삭제되거나 znode 아래의 자식이 생성/삭제이 변경될 때 이 Watcher 콜백을 통해 알리게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;java.util.List&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.data.Stat&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKGetChildren&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;Stat&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;znode_exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;children&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getChildren&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;children&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Node does not exists.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하위 노드가 존재하지 않는다면, zkCli를 사용하여 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/zkCli.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; create /MyFirstZnode/myfirstsubnode Hi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; create /MyFirstZnode/mysecondsubnode Hi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;delete-znode-삭제&#34;&gt;delete: Znode 삭제&lt;/h3&gt;
&lt;p&gt;ZooKeeper 클래스는 지정된 znode를 제거하기 위한 delete 메서드를 제공한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : znode의 경로.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt; : znode의 현재 버전.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;com.devkuma.zookeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;org.apache.zookeeper.ZooKeeper&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZKDelete&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeper&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KeeperException&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InterruptedException&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/MyFirstZnode&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ZooKeeperConnection&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;zk&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Done.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 때, 지정된 노드 내에 하위 노드가 존재하면 Exception이 발생한다. 그러므로 하위 노드들을 전부 제거 후 delete를 수행해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org.apache.zookeeper.KeeperException&lt;span style=&#34;color:#000&#34;&gt;$NotEmptyException&lt;/span&gt;: &lt;span style=&#34;color:#000&#34;&gt;KeeperErrorCode&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; Directory not empty &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; /MyFirstZnode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at org.apache.zookeeper.KeeperException.create&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;KeeperException.java:125&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at org.apache.zookeeper.KeeperException.create&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;KeeperException.java:51&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at org.apache.zookeeper.ZooKeeper.delete&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;ZooKeeper.java:873&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at ZKDelete.delete&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;ZKDelete.java:11&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at ZKDelete.main&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;ZKDelete.java:20&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/zookeeper/zookeeper_api.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zookeeper API | tutorialspoint&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>BigData</category>
      
      <category>Apache ZooKeeper</category>
      
    </item>
    
    <item>
      <title>Apache Hadoop</title>
      <link>https://www.devkuma.com/docs/apache-hadoop/</link>
      <pubDate>Sat, 24 Dec 2022 10:22:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/apache-hadoop/</guid>
      <description>
        
        
        &lt;h2 id=&#34;apache-hadoop-개요&#34;&gt;Apache Hadoop 개요&lt;/h2&gt;
&lt;p&gt;Hadoop(하둡)은 대규모 데이터의 축적, 분석을 분산하여 처리하는 프레임워크이며, Java 언어로 구현되어 있다.
Hadoop의 근원이 된 것은 Google의 대량의 데이터를 효율적으로 처리하기 위한 분산 처리 기반인 MapReduce와 Google File System 이다.&lt;/p&gt;
&lt;p&gt;Google은 이 시스템에 관한 논문을 2004년에 공개하였고, 그것을 참고로 Doug Cutting, Mike Cafarella 라는 사람에 의해 개발되었다. Hadoop이라는 이름은 Doug의 아들이 노란 코끼리의 봉제인형에 붙인 이름에서 왔으며 의미가 없고 간단하고 다른 곳에서 사용되지 않는다는 이유로 채택되었다. 노란 코끼리는 Hadoop의 마스코트 캐릭터이기도 하다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/apache-hadoop/apache-hadoop.png&#34; alt=&#34;Hadoop 캐릭터&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hadoop은 분산 처리 기반이기 때문에 각 처리를 클러스터의 머신으로 나누어(Map), 각 머신에서 처리된 결과를 집계(reduce)하여 최종적인 결과를 얻는다.&lt;br&gt;
최근, 대량의 데이터(BigData) 중에서 목적의 데이터를 추출하거나, 저장된 데이터로부터 어떤 경향을 읽는 등, 데이터 마이닝에 대한 요구가 높아지고 있다. 또, BigData를 처리할 수 있을 뿐만 아니라, 보다 단시간에 그러한 정보를 산출하고 싶다고 하는 요구가 많아지고 있다.&lt;br&gt;
이전에는 BigData를 처리하기 위해 데이터 웨어하우스와 같은 전용 제품을 사용해야 했다. Hadoop은 이러한 데이터 처리를 일반적인 서버 머신을 여러 개를 연결(스케일 아웃)하는 것으로 가능하게 한다.&lt;/p&gt;
&lt;p&gt;여러 서버로 구성된 Hadoop 시스템이지만 여러 대에 분산되어 시스템의 유연성을 높인다. 처리 성능을 향상시키려면 Hadoop 클러스터에 시스템을 추가하기만 하면 된다. Hadoop 클러스터 시스템은 일반적인 서버 머신으로 구성될 수 있으므로 하드웨어 조달이 용이하다. 또한 소프트웨어적으로도 클러스터에 추가하는 서버에 Hadoop 시스템을 설치 및 설정하는 것만으로 Hadoop 클러스터를 스케일 업할 수 있다. 이러한 특징에서 하드웨어, 소프트웨어 양면에서 확장성이 높다고 할 수 있다.&lt;/p&gt;
&lt;p&gt;최근 클라우드 서비스를 사용하여 여러 대의 서버를 쉽게 시작할 수 있게 되었기 때문에 Hadoop을 사용하여 데이터 처리를 원하는 경우에만 클라우드에 Hadoop 클러스터를 구축할 수 있다. 게다가 성능이 불충분하면 서버를 추가하거나 리소스가 남아 있으면 서버를 줄이고 한 가지 처리가 끝난 시점에서 Hadoop 클러스터의 모든 머신을 개방하는 등의 사용법도 가능하기 때문에 앞으로 점점 더 이용되는 장면이 늘어나는 것으로 생각된다.&lt;/p&gt;
&lt;p&gt;Hadoop 버전 1까지는 MapReduce만 이었던 병렬 처리 프레임워크이지만, Hadoop 버전 2로부터는 Storm, Spark, Tez/Impala등의 다른 병렬 처리 프레임워크를 이용할 수 있게 되었다. 또한 Hadoop에 있는 데이터에 대한 MapReduce(Java) 이외의 처리 인터페이스가 늘어났다. 예를 들어 Impala와 Tez에서 움직이는 Hive나 Pig를 통해 사용자는 익숙한 SQL과 거의 동등한 쿼리를 사용하여 데이터에 액세스할 수 있다. 게다가 Storm이나 Spark에서는 스트리밍에 의해 실시간 데이터의 처리가 가능하게 되어, HDFS상에 존재하는 데이터 이외에서도 Hadoop 시스템을 이용할 수 있게 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop의-특징&#34;&gt;Hadoop의 특징&lt;/h2&gt;
&lt;p&gt;Hadoop은 다음의 4개의 Core 모듈로 이루어져 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hadoop Distributed File System (HDFS)　　&lt;/li&gt;
&lt;li&gt;Hadoop MapReduce&lt;/li&gt;
&lt;li&gt;Hadoop Common&lt;/li&gt;
&lt;li&gt;Hadoop YARN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한 다음 두 Hadoop 프로젝트와는 별도의 모듈이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache Ozone&lt;/li&gt;
&lt;li&gt;Apache Submarine&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hdfshadoop-distributed-file-system&#34;&gt;HDFS(Hadoop Distributed File System)&lt;/h3&gt;
&lt;p&gt;Hadoop 고유의 분산 파일 시스템이다. 사용자는 하나의 큰 파일 시스템으로 보이지만 각 노드에 걸쳐 파일을 저장한다. 1개의 노드에 장해가 일어나도 데이터의 결함이 없도록 디폴트로 3개의 노드에 같은 데이터를 보관 유지(3중화)하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h3&gt;
&lt;p&gt;분산된 데이터에 대해 병렬로 처리를 수행하기 위한 프레임워크이다. Map 스텝에서는 각 슬레이브 노드의 데이터에 대해서 처리를 실시하고, Reduce 스텝에서 Map 스텝으로 복수 노드에 분산·실행된 처리 결과의 집약을 실시한다.&lt;/p&gt;
&lt;h3 id=&#34;hadoop-common&#34;&gt;Hadoop Common&lt;/h3&gt;
&lt;p&gt;Hadoop의 기능을 지원하는 유틸리티 집합이다.&lt;/p&gt;
&lt;h3 id=&#34;yarn-yet-another-resource-negotiator&#34;&gt;YARN (Yet Another Resource Negotiator)&lt;/h3&gt;
&lt;p&gt;Hadoop 버전 1까지는 독립된 컴포넌트는 아니었지만, Hadoop 버전 2에서는 자원 관리를 전용으로 하는 모듈로서 독립하였다. MapReduce 리소스, 작업 스케줄링 뿐만 아니라 Giraph, Storm, Spark, Tez/Impala 등의 다른 분산 처리 프레임워크의 리소스 관리도 가능하게 되었다.&lt;/p&gt;
&lt;h3 id=&#34;apache-ozone&#34;&gt;Apache Ozone&lt;/h3&gt;
&lt;p&gt;Hadoop에서 분산 객체 저장소를 실현하기 위한 프로젝트이다. 수천억 수준의 파일과 블록으로 확장할 수 있도록 설계되었으며 YARN 및 Kubernetes와 같은 컨테이너 환경에서의 동작도 지원한다. S3 및 Hadoop File System API 등 여러 프로토콜을 사용하여 액세스할 수 있다. 원래는 Hadoop의 하위 프로젝트였지만 Apache 톱 프로젝트 중 하나로 독립적이었다.&lt;/p&gt;
&lt;h3 id=&#34;apache-submarine&#34;&gt;Apache Submarine&lt;/h3&gt;
&lt;p&gt;YARN과 같은 리소스 관리 플랫폼에서 딥 러닝 애플리케이션(TensorFlow, PyTorch, MxNet 등)을 실행할 수 있도록 하는 프로젝트이다. 원래는 Hadoop의 하위 프로젝트였지만 Apache 톱 프로젝트 중 하나로 독립적이었다. Hadoop 2.7.3 이상에서 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop-사용-사례&#34;&gt;Hadoop 사용 사례&lt;/h2&gt;
&lt;p&gt;Hadoop은 MapReduce 대신에 더 빨르게 처리할 수 있는 Apache Spark를 사용할 수 있다. 자세한 것은 여기(&lt;a href=&#34;https://openstandia.jp/solution/hadoop-spark/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://openstandia.jp/solution/hadoop-spark/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)을 참조하길 바란다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop-운영-환경&#34;&gt;Hadoop 운영 환경&lt;/h2&gt;
&lt;p&gt;Hadoop은 Java 언어로 만들어져 있으므로 JVM이 필요하다. 2022년 4월 현재 스테이블 버전인 Hadoop 3.3.2에서는 Java 8 및 Java 11을 지원한다. JVM이 실행되는 환경이면 OS는 뭐든 상관 없다.&lt;/p&gt;
&lt;h3 id=&#34;hadoop이-실행되는-운영체제&#34;&gt;Hadoop이 실행되는 운영체제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;주요 Linux 배포판&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;MacOSX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hadoop은 OpenJDK에서 정상적으로 작동하는 것으로 확인되었다. 각 JDK의 동작 검증 결과는 아래의 Hadoop Wiki 페이지에서 확인할 수 있다.&lt;br&gt;
&lt;a href=&#34;https://cwiki.apache.org/confluence/display/HADOOP/Hadoop&amp;#43;Java&amp;#43;Versions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hadoop은 컴파일된 바이너리 패키지와 사용자가 직접 컴파일하는 소스 버전을 모두 제공한다.&lt;br&gt;
컴파일된 바이너리 패키지는 곧바로 사용할 수 있게 되어 있는 반면, 확장할 수 없는 설정도 있기 때문에, 유저가 필요한 기능을 유효하게 하려면 소스로부터 빌드할 필요가 있는 경우도 있다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop-라이센스&#34;&gt;Hadoop 라이센스&lt;/h2&gt;
&lt;p&gt;Hadoop은 Apache의 최상위 프로젝트 중 하나이다.&lt;br&gt;
라이센스는 Apache License 2.0이며, 사용자는 소프트웨어의 사용, 배포, 수정, 파생판 배포에 제한을 받지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop-공식-사이트&#34;&gt;Hadoop 공식 사이트&lt;/h2&gt;
&lt;p&gt;Hadoop의 공식 사이트는 아래 URL이다.
&lt;a href=&#34;http://hadoop.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://hadoop.apache.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;또한 Hadoop 공식 Wiki 페이지에는 Hadoop에 대한 다양한 정보가 있다.
&lt;a href=&#34;https://cwiki.apache.org/confluence/display/HADOOP/Home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cwiki.apache.org/confluence/display/HADOOP/Home&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hadoop-다운로드&#34;&gt;Hadoop 다운로드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hadoop.apache.org/releases.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hadoop.apache.org/releases.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hadoop을-구성하는-세-개의-레이어&#34;&gt;Hadoop을 구성하는 세 개의 레이어&lt;/h2&gt;
&lt;p&gt;Hadoop 아키텍처는 주로 다음 세 가지 레이어로 구성된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분산 처리 엔진 (Hadoop에서는 Hadoop MapReduce 사용)&lt;/li&gt;
&lt;li&gt;리소스 관리자 (Hadoop에서는 Hadoop YARN 사용)&lt;/li&gt;
&lt;li&gt;분산 파일 시스템 (Hadoop에서는 HDFS 사용)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고, Hadoop은 데이터에 액세스하기 위해 쿼리 엔진을 사용하는 경우가 많다.&lt;/p&gt;
&lt;p&gt;Hadoop은 모든 컴퓨터에 위의 구성을 설치하고 데이터 읽기/쓰기 및 처리를 분산한다.&lt;/p&gt;
&lt;h3 id=&#34;분산-처리-엔진&#34;&gt;분산 처리 엔진&lt;/h3&gt;
&lt;p&gt;분산 처리 엔진은 Hadoop에서 병렬 분산 처리를 담당하는 소프트웨어 그룹이다.&lt;/p&gt;
&lt;p&gt;기본적으로 MapReduce라는 분산 처리 엔진이 실행된다.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;MapReduce 처리 개요&lt;/h4&gt;

    &lt;p&gt;MapReduce는 다음과 같이 분산 처리를 수행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map : 입력을 key-value 형식으로 출력하고 각 Map을 노드별로 분산 가능&lt;/li&gt;
&lt;li&gt;Shuffle: Map 출력 정렬&lt;/li&gt;
&lt;li&gt;Reduce: 같은 키를 집계&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;대표적인 분산 처리 엔진의 특징은 다음과 같다. 아래로 갈수록 빠르다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MapReduce: 중간 결과를 HDFS(스토리지)로 내보내기&lt;/li&gt;
&lt;li&gt;Tez: 중간 결과를 YARN 컨테이너(스토리지)로 내보내기&lt;/li&gt;
&lt;li&gt;Spark: 중간 결과를 메모리에 내보내기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;덧붙여서 MapReduce는 끝나지 않는 컨텐츠인 것으로 보여, Tez나 Spark 를 사용하는 것을 추천한다.&lt;/p&gt;
&lt;h3 id=&#34;리소스-관리자&#34;&gt;리소스 관리자&lt;/h3&gt;
&lt;p&gt;리소스 관리자는 Hadoop에서 리소스(CPU, 메모리) 관리를 담당한다.&lt;/p&gt;
&lt;p&gt;MapReduce에서 사용하는 리소스 관리자는 응용 프로그램 수준 컨테이너를 관리하는 Hadoop YARN이다.&lt;/p&gt;
&lt;p&gt;그 외에도 OS 레벨 컨테이너를 관리하는 Apache Mesos도 있다. 이곳은 docker와 같은 기술(Linux 컨테이너)을 이용한다.&lt;/p&gt;
&lt;h3 id=&#34;분산-파일-시스템&#34;&gt;분산 파일 시스템&lt;/h3&gt;
&lt;p&gt;분산 파일 시스템 은 Hadoop에서 데이터 읽기/쓰기 분산을 담당한다. Hadoop에서 사용되는 분산 파일 시스템 에는 다음이 포함된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDFS: Hadoop 표준 파일 시스템&lt;/li&gt;
&lt;li&gt;EMRFS: Amazon S3를 스토리지로 사용하는 파일 시스템&lt;/li&gt;
&lt;li&gt;MapR-FS : C 언어로 HDFS를 다시 작성한 파일 시스템. 빠르다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 외에도 Cloud Storage 또는 Blob Storage를 스토리지 로 사용할 수 있는 것처럼 보이지만, 내부적으로 어떤 분산 파일 시스템을 사용할지는 알 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;hadoop-에코시스템-목록&#34;&gt;Hadoop 에코시스템 목록&lt;/h2&gt;
&lt;p&gt;기본값이 아닌 Hadoop을 구성하는 소프트웨어 또는 주변 소프트웨어를 Hadoop 에코 시스템이라고 한다.&lt;/p&gt;
&lt;p&gt;Hadoop 에코시스템은 다음과 같이 조합하여 다양한 분산 처리를 수행할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 웨어하우스 구성 예: Hadoop + Tez +  Hive
&lt;ul&gt;
&lt;li&gt;Hive 를 사용하여 Hadoop을 SQL 로 조작할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기계 학습 구성 예: Hadoop + Spark
&lt;ul&gt;
&lt;li&gt;기계 학습에서 자주 발생하는 반복 처리를 Spark 의 인 메모리 처리를 이용하여 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전체 텍스트 검색 구성 예: Hadoop + Elasticsearch
&lt;ul&gt;
&lt;li&gt;Elasticsearch for Apache Hadoop을 사용하여 전체 텍스트 검색 서비스를 구현할 수 있다.&lt;/li&gt;
&lt;li&gt;Hadoop의 분산 파일 시스템 으로 Elasticsearch 클러스터를 활용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스트림 처리 구성 예: 각 서버 및 IoT 장치 &amp;ndash;&amp;gt;  Kafka  &amp;ndash;&amp;gt; Hadoop
&lt;ul&gt;
&lt;li&gt;여러 서버 및 IoT 장치에서 스트림 처리를 수행하고 Hadoop에 데이터를 집계하려면 Kafka 를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에 대표적인 Hadoop 에코시스템과 관련 시스템과 그 기능을 소개한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hadoop 에코시스템&lt;/th&gt;
&lt;th&gt;실현하는 기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apache Accumulo&lt;/td&gt;
&lt;td&gt;KVS 형의 NoSQL. 보안 중시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Atlas&lt;/td&gt;
&lt;td&gt;거버넌스 제어, 컴플라이언스 대응&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cascading&lt;/td&gt;
&lt;td&gt;MapReduce를 쉽게 다루는 API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;아파치 드릴&lt;/td&gt;
&lt;td&gt;에지 장비 데이터를 조작하는 분산 SQL 엔진&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache falcon&lt;/td&gt;
&lt;td&gt;데이터 라이프사이클 관리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Flume&lt;/td&gt;
&lt;td&gt;여러 데이터 소스에서 Hadoop으로 구조화되지 않은 데이터 를 집계(스트림 데이터 처리)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache HBase&lt;/td&gt;
&lt;td&gt;KVS형 NoSQL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;아파치 하이브&lt;/td&gt;
&lt;td&gt;SQL 라이크(HiveQL)인 쿼리로 데이터를 조작할 수 있다. 대장애성 중시하는 경우. DWH 실현&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Hue&lt;/td&gt;
&lt;td&gt;Hadoop 및 Hadoop 생태계 GUI로 작업&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Impala&lt;/td&gt;
&lt;td&gt;SQL 라이크(Impala SQL )인 쿼리로 데이터를 조작할 수 있다. 속도를 중시하는 경우. 실시간 처리 실현&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Kafka&lt;/td&gt;
&lt;td&gt;복수의 데이터 소스로부터 Hadoop에 비구조화 데이터 를 집계(스트림 데이터 처리). flume과의 차이는 여기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Knox&lt;/td&gt;
&lt;td&gt;중앙 집중식 인증 및 액세스 관리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Mahout&lt;/td&gt;
&lt;td&gt;선형 대수, 통계 분석, 기계 학습 라이브러리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Mesos&lt;/td&gt;
&lt;td&gt;OS 레벨 컨테이너를 관리하는 리소스 관리자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Oozie&lt;/td&gt;
&lt;td&gt;직업 스케줄러&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Phoenix&lt;/td&gt;
&lt;td&gt;HBase를 데이터 스토어로 사용하는 실시간 RDB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Pig&lt;/td&gt;
&lt;td&gt;데이터 처리(ETL) 도구&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Ranger&lt;/td&gt;
&lt;td&gt;인증 된 사용자에게 속성 기반 액세스 권한 부여&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Sentry&lt;/td&gt;
&lt;td&gt;인증 된 사용자에게 역할 기반 액세스 권한 부여&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Slider&lt;/td&gt;
&lt;td&gt;YARN 애플리케이션 제어. 장시간 기동하고 있는 경우는 Kill 하는 등&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Solr&lt;/td&gt;
&lt;td&gt;전체 텍스트 검색 ( Elasticsearch 에서 사용된다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Spark&lt;/td&gt;
&lt;td&gt;기계 학습, SQL 조작, R 언어, 그래프를 메모리 내에서 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Sqoop&lt;/td&gt;
&lt;td&gt;RDBMS에서 Hadoop으로 구조화된 데이터 가져오기, 내보내기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache Tez&lt;/td&gt;
&lt;td&gt;MapReduce보다 빠른 분산 처리 프레임워크&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Presto&lt;/td&gt;
&lt;td&gt;중간 결과를 메모리에 출력하는 SQL 쿼리 엔진.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
      
      <category>BigData</category>
      
      <category>Apache Hadoop</category>
      
    </item>
    
    <item>
      <title>Apache Spark</title>
      <link>https://www.devkuma.com/docs/apache-spark/</link>
      <pubDate>Sat, 24 Dec 2022 10:22:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/apache-spark/</guid>
      <description>
        
        
        &lt;h2 id=&#34;apache-spark-개요&#34;&gt;Apache Spark 개요&lt;/h2&gt;
&lt;p&gt;Apache Spark는 빅 데이터 및 머신 러닝과 같은 대규모 데이터를 처리하는 &lt;strong&gt;클러스터 컴퓨팅을 위한 분산 처리 프레임워크&lt;/strong&gt;이다. Spark는 2009년에 칼포르니아 버클리 대학교의 AMPLab로, Hadoop의 커미터(소스코드 입력 권한 보유한 원천개발자)이기도 한 마테이 자하리아(Mate Zaharia)에 의해 개발이 개시되어 현재는 Apache 소프트웨어 재단의 톱 프로젝트의 하나로서 관리, 개발이 계속되고 있다.&lt;/p&gt;
&lt;p&gt;Spark가 개발된 목적으로는 기존 MapReduce의 처리 속도가 느린 것에 대한 개선과 Map과 Reduce의 반복을 반복하는 스타일에 얽매이지 않는 유연한 처리 스타일에 대한 대응을 들 수 있다.&lt;/p&gt;
&lt;p&gt;Spark는 분산 처리 프레임워크로서 단독으로도 동작하기 때문에 포스트 Hadoop로서 주목받고 있는 한편, MapReduce, HDFS, YARN 등으로 이루어지는 Hadoop 코어 시스템중의 MapReduce의 대체로서 이용하는 것도 가능하게 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;apache-spark의-주요-특징&#34;&gt;Apache Spark의 주요 특징&lt;/h2&gt;
&lt;p&gt;Spark의 큰 특징으로서 Spark가 제공하는 간소한 API를 사용하여 유연한 처리 모델을 쉽게 프로그래밍 할 수 있는 것, 대규모 데이터에 대해 기존의 MapReduce에 비해 훨씬 짧은 시간에 처리를 할 수 있는 것 등이 언급할 수 있다.&lt;/p&gt;
&lt;p&gt;기존의 MapReduce에서는 처리 모델로서 Map과 Reduce를 1세트로 수행할 필요가 있었기 때문에, Hadoop상에서 움직이는 어플리케이션을 개발하기 위해서는 이 스타일에 따라서 개발할 필요가 있었다. 그 때문에 유연한 처리 모델을 개발하는 것이 어렵다고 하는 문제가 존재했었다.&lt;/p&gt;
&lt;p&gt;또한 MapReduce에서는 한 번의 Map 및 Reduce 처리마다 처리 결과를 Disk에 쓰는 것이 발생하여 처리 속도를 향상시키는 것이 어렵다는 문제가 존재했다. 이에 대해 Spark에서는 메모리에 읽어들인 데이터 세트(RDD)에 대해서 복수회의 Map 처리를 연속하여 실행하여 한층 더 Reduce한 결과를 Disk에 기입하지 않고 인메모리 상태로 한층 더 다음의 Map 처리를 그 데이터 세트에 대해서 행하는 방법을 취하고 있기 때문에, MapReduce에 비해 최대로 100배 이상의 처리 속도의 향상을 볼 수 있는 경우도 있다고 한다(기존의 MapReduce와 같이 처리 결과를 디스크에 쓸 수도 있다).&lt;/p&gt;
&lt;p&gt;스파크의 특징은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed
&lt;ul&gt;
&lt;li&gt;인메모리(In-Memory) 기반의 빠른 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ease of Use
&lt;ul&gt;
&lt;li&gt;다양한 언어 지원(Java, Scala, Python, R, SQL)을 통한 사용의 편이성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generality
&lt;ul&gt;
&lt;li&gt;SQL, Streaming, 머신러닝, 그래프 연산 등 다양한 컴포넌트 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run Everywhere
&lt;ul&gt;
&lt;li&gt;YARN, Mesos, Kubernetes 등 다양한 클러스터에서 동작 가능&lt;/li&gt;
&lt;li&gt;HDFS, Casandra, HBase 등 다양한 파일 포맷 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;apache-spark의-컴포넌트-구성&#34;&gt;Apache Spark의 컴포넌트 구성&lt;/h2&gt;
&lt;p&gt;Spark는 분산 처리 프레임워크로 다음 컴포넌트 요소로 구성된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spark Core (Scala, Java, Python, RAPI 포함)&lt;/li&gt;
&lt;li&gt;Spark SQL + DataFrames&lt;/li&gt;
&lt;li&gt;Spark Streaming&lt;/li&gt;
&lt;li&gt;MLlib&lt;/li&gt;
&lt;li&gt;GraphX&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spark-core&#34;&gt;Spark Core&lt;/h3&gt;
&lt;p&gt;Spark는 처리할 데이터를 RDD(Resilient Distributed Dataset) 형식으로 유지한다.&lt;br&gt;
RDD는 변하지 않고 병렬로 실행 가능한 컬렉션으로, 분산된 각 컴퓨터에 배치된다.&lt;br&gt;
Spark를 사용한 프로그래밍 모델에서는 이 RDD에 대해서 Spark Core에서 제공되고 있는 각종 메소드를 적응하면서 처리를 실시해 간다. Spark Core에서 제공하는 API를 통해 RDD를 조작할 때 개발자는 분산된 데이터를 의식하지 않고 분산 처리를 실행할 수 있다.&lt;br&gt;
이는 Spark의 특징의 하나의 유연한 처리를 용이하게 프로그래밍 할 수 있다고 하는 점이다.&lt;br&gt;
Spark Core에서 제공되는 API이지만, Spark의 개발 언어인 Scala 이외에도 Java, Python, R이라고 말한 언어로부터 호출 가능한 API가 표준으로 제공되고 있다. 또, 3rd-Party 라이브러리 중에는 Scala와 같이 JavaVM상에서 움직이는 함수형 언어의 Clojure로부터 Spark API를 호출하기 위한 라이브러리도 존재하고 있어, 또 다른 언어의 Spark API도 계속 늘어 날거라 예상된다.&lt;/p&gt;
&lt;h3 id=&#34;spark-sql--dataframes&#34;&gt;Spark SQL + DataFrames&lt;/h3&gt;
&lt;p&gt;Spark에서는 Spark에서 제공하는 API를 통해 RDD를 조작하는 방법 외에도 Spark SQL이라는 SQL과 같은 언어를 사용하여 DataFrames라는 데이터베이스 테이블과 같은 이름 열을 가진 추상화 된 데이터 세트를 조작 할 수 있다.&lt;br&gt;
이것은 Scala, Java, Python, R과 같은 언어를 습득하지 않은 사용자라도 SQL에 대한 지식이 있으면 Spark SQL을 통해 Spark를 사용하여 데이터를 처리 할 수있는 인터페이스이다.&lt;/p&gt;
&lt;h3 id=&#34;spark-streaming&#34;&gt;Spark Streaming&lt;/h3&gt;
&lt;p&gt;Spark에서 끊임없이 전송되는 Streaming 데이터에 실시간 분산 처리를 가능하게 하는 기능을 제공하는 엔진이다.&lt;br&gt;
마찬가지로 스트리밍 데이터를 처리하는 프레임 워크로 Apache Storm이 있다. Apache Storm이 스트리밍 데이터 처리에 특화된 프레임워크인 반면 Spark Streaming은 Spark에서 실시간 데이터를 처리하는 엔진으로서의 기능이다.&lt;br&gt;
그 외에도 Apache Flink라는 스트리밍 처리 프레임워크도 있다. 이쪽은 배치 처리도 가능한 데다, 기계 학습 라이브러리나 그래프 처리 라이브러리등도 존재하기 때문에, Spark에 꽤 닮은 구성으로 되어 있어, Spark의 대항마로 불리고 있다.&lt;/p&gt;
&lt;p&gt;Apache Storm&lt;br&gt;
&lt;a href=&#34;http://storm.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://storm.apache.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Flink&lt;br&gt;
&lt;a href=&#34;http://flink.apache.org/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://flink.apache.org/introduction.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mllib&#34;&gt;MLlib&lt;/h3&gt;
&lt;p&gt;Spark의 기계 학습 라이브러리이다. Spark의 유연한 처리 스타일로 기계 학습을 수행하는 프로그램을 작성할 수 있다.&lt;br&gt;
기계 학습 라이브러리로는 먼저 Hadoop과 연계하여 기계 학습을 수행하는 Mahout이라는 소프트웨어가 존재했지만, Hadoop + Mahout에서는 MapReduce의 프로그래밍 모델을 사용하여 기계 학습 프로그램을 만들어야 만  하 때문에 처리 속도의 저하라는 문제가 있었다.&lt;br&gt;
그에 비해 Spark는 Hadoop보다 고속으로 처리를 할 수 있어 Spark와 Spark가 제공하는 MLlib를 사용한 기계 학습이 효율이 좋다는 점에서 주목이 높아지고 있다.&lt;/p&gt;
&lt;p&gt;Apache Mahout&lt;br&gt;
&lt;a href=&#34;http://mahout.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://mahout.apache.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;graphx&#34;&gt;GraphX&lt;/h3&gt;
&lt;p&gt;GraphX는 Spark를 통해 그래프 데이터를 병렬 처리하는 API를 제공한다.&lt;br&gt;
Spark의 특징인 고속 처리 속도로 그래프 데이터의 병렬 처리가 가능하다.&lt;/p&gt;
&lt;p&gt;위에서 설명한 Spark를 형성하는 일부 컴포넌트에는 스토리지로 분류되는 것이 없다.
Spark에서는 읽기 쓰기로 기존의 각종 스토리지를 이용할 수 있다. 아래는 Spark와 연동 가능한 스토리지의 일부이다. (3rd-party 라이브러리 이용 포함)&lt;/p&gt;
&lt;p&gt;HDFS, Cassandra, HBase, S3, MongoDB, Couchbase, Riak, Neo4j, OrientDB&lt;/p&gt;
&lt;p&gt;또, 읽을 수 있는 데이터 소스로서는 CSV나 XML등의 파일로부터, Solr, Elasticsearch 등의 검색 엔진등 다양하다.&lt;/p&gt;
&lt;p&gt;Spark와 각종 데이터 소스와의 연계 패키지 목록&lt;br&gt;
&lt;a href=&#34;https://spark-packages.org/?q=tags%3A%22Data%20Sources%22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://spark-packages.org/?q=tags%3A%22Data%20Sources%22&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위에서 제시한 다양한 데이터 소스와의 연동을 가능하게 하는 패키지 이외에도 기존의 Spark ECO 시스템을 확장하기 위한 각종 패키지가 제공되고 있다.
이 패키지는 SparkPackage로 다음 사이트에 게시된다.&lt;br&gt;
&lt;a href=&#34;https://spark-packages.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://spark-packages.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;apache-spark의-운영-환경&#34;&gt;Apache Spark의 운영 환경&lt;/h2&gt;
&lt;p&gt;Spark가 동작 보증하고 있는 것은, 아래와 같은 OS가 된다. 또한 실행하려면 Java가 설치되어 있어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주요 리눅스 배포판&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;리눅스&lt;/li&gt;
&lt;li&gt;MacOSX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spark에서 제공하는 API가 지원하는 버전은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8, 11, 17 (Java 8u201 미만은 Spark3.2.0에서는 더 이상 사용되지 않음)&lt;/li&gt;
&lt;li&gt;Scala 2.12, 2.13 (Spark3.3.0은 호환되는 Scala2.12.x를 사용해야 함)&lt;/li&gt;
&lt;li&gt;Python 3.7 이상 (Python3.9의 경우 Apache Arrow와 pandas UDF가 작동하지 않을 수 있음)&lt;/li&gt;
&lt;li&gt;R 3.5 이상&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;apache-spark-라이센스-형식&#34;&gt;Apache Spark 라이센스 형식&lt;/h2&gt;
&lt;p&gt;Spark는 Apache의 최상위 프로젝트 중 하나이다.&lt;br&gt;
라이센스는 Apache License 2.0이며, 사용자는 소프트웨어의 사용, 배포, 수정 및 파생판 배포에 제한을 받지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;apache-spark-참고-정보&#34;&gt;Apache Spark 참고 정보&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spark 공식 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spark 공식 문서&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.databricks.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spark 커뮤니티 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spark 개발자들이 시작한 databricks라는 회사에 의해 제공되고 있다.&lt;/p&gt;

      </description>
      
      <category>BigData</category>
      
      <category>Apache Spark</category>
      
    </item>
    
    <item>
      <title>PySpark 개념 및 주요 기능</title>
      <link>https://www.devkuma.com/docs/pyspark/</link>
      <pubDate>Fri, 06 Jan 2023 12:36:13 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/pyspark/</guid>
      <description>
        
        
        &lt;h2 id=&#34;pyspark란&#34;&gt;PySpark란?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/api/python/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PySpark&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;는 실시간 대규모 데이터 처리를 위한 오픈 소스 분산 컴퓨팅 프레임워크 및 라이브러리 세트인 Apache Spark용 Python API이다. Python 및 Pandas와 같은 라이브러리에 이미 익숙하다면 PySpark는 보다 확장 가능한 분석 및 파이프라인을 만드는 방법을 배우기에 좋은 언어이다.&lt;/p&gt;
&lt;p&gt;아파치 스파크는 기본적으로 병렬 및 배치 시스템에서 처리하여 거대한 데이터 세트와 함께 작동하는 계산 엔진이다. Spark는 Scala로 작성되었으며 PySpark는 Spark와 Python의 협업을 지원하기 위해 출시되었다. Spark용 API를 제공하는 것 외에도 PySpark는 Py4j 라이브러리를 활용하여 RDD(Resilient Distributed Datasets)와의 인터페이스를 지원한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/apache-spark/python-spark-pyspark.png&#34; alt=&#34;Apache Spark 및 Python 로고&#34;&gt;&lt;/p&gt;
&lt;p&gt;PySpark에서 사용되는 주요 데이터 유형은 Spark 데이터 프레임이다. 이 개체는 클러스터 전체에 분산된 테이블로 생각할 수 있으며 R 및 Pandas의 데이터 프레임과 유사한 기능을 가지고 있다. PySpark를 사용하여 분산 계산을 수행하려면 다른 Python 데이터 유형이 아닌 Spark 데이터 프레임에서 작업을 수행해야 한다.&lt;/p&gt;
&lt;p&gt;Pandas와 Spark 데이터 프레임의 주요 차이점 중 하나는 즉시 실행과 지연 실행이다. PySpark에서는 결과가 파이프라인에서 실제로 요청될 때까지 작업이 지연된다. 예를 들어, Amazon S3에서 데이터 세트를 로드하고 데이터 프레임에 여러 변환을 적용하는 작업을 지정할 수 있지만 이러한 작업은 즉시 적용되지 않는다. 대신 변환 그래프가 기록되고 데이터가 실제로 필요하면(예: S3에 결과를 다시 쓸 때) 변환이 단일 파이프라인 작업으로 적용된다. 이 접근 방식은 전체 데이터 프레임을 메모리로 가져오는 것을 방지하고 시스템 클러스터 전체에서 보다 효과적인 처리를 가능하게 하는 데 사용된다. Pandas 데이터 프레임을 사용하면 모든 것을 메모리로 가져오고 모든 Pandas 작업이 즉시 적용된다.&lt;/p&gt;
&lt;h2 id=&#34;pyspark-기능-및-라이브러리&#34;&gt;PySpark 기능 및 라이브러리&lt;/h2&gt;
&lt;p&gt;Py4J는 PySpark 내에 통합되어 Python이 JVM(Java Virtual Machine) 개체와 동적으로 인터페이스할 수 있도록 하는 널리 사용되는 라이브러리이다. PySpark는 효율적인 프로그램 작성을 위한 꽤 많은 라이브러리를 제공한다. 또한 다음을 포함하여 호환되는 다양한 외부 라이브러리가 있다.&lt;/p&gt;
&lt;h3 id=&#34;pysparksql&#34;&gt;PySparkSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/docs/2.4.0/api/python/pyspark.sql.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PySparkSQL&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;는 대용량의 구조적 또는 반구조적 데이터에 SQL과 유사한 분석을 적용하는 PySpark 라이브러리이다. PySparkSQL과 함께 SQL 쿼리를 사용할 수도 있다.&lt;/p&gt;
&lt;h3 id=&#34;mllib&#34;&gt;MLlib&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/ml-guide.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MLlib&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;는 PySpark 및 Spark의 래퍼기계 학습(ML) 라이브러리이다. MLlib는 분류, 회귀, 클러스터링, 협업 필터링, 차원 감소 및 기본 최적화 프리미티브를 위한 많은 기계 학습 알고리즘을 지원한다.&lt;/p&gt;
&lt;h3 id=&#34;graphframes&#34;&gt;GraphFrames&lt;/h3&gt;
&lt;p&gt;(GraphFrames)[https://graphframes.github.io/graphframes/docs/_site/index.html]는 PySpark 코어 및 PySparkSQL을 사용하여 그래프 분석을 효율적으로 수행하기 위한 일련의 API를 제공하는 그래프 처리 라이브러리이다. 빠른 분산 컴퓨팅에 최적화되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리&lt;/h2&gt;
&lt;p&gt;Python은 알고 있지만 Scala는 모르는 데이터 엔지니어에게는 PySpark가 순수 Spark 보다 훨씬 사용하기 쉽지만 단점도 있다. PySpark 오류는 Java 스택 추적 오류와 Python 코드에 대한 참조를 모두 표시하므로 PySpark 애플리케이션 디버깅이 매우 어려울 수 있다.&lt;/p&gt;
&lt;p&gt;Spark는 다른 데이터 처리 옵션보다 더 많은 처리 오버헤드와 더 복잡한 설정을 포함한다. Ray 및 Dask가 최근에 등장하였다. Dask는 순수한 Python 프레임워크이므로 대부분의 데이터 엔지니어에게는 바로  즉시 Dask를 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.databricks.com/kr/glossary/pyspark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PySpark – Databricks&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dominodatalab.com/data-science-dictionary/pyspark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is PySpark? | Domino Data Science Dictionary&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>BigData</category>
      
      <category>Apache Spark</category>
      
      <category>PySpark</category>
      
    </item>
    
  </channel>
</rss>
