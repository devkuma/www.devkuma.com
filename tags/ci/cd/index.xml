<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – CI/CD</title>
    <link>https://www.devkuma.com/tags/ci/cd/</link>
    <image>
      <url>https://www.devkuma.com/tags/ci/cd/logo/180x180.jpg</url>
      <title>CI/CD</title>
      <link>https://www.devkuma.com/tags/ci/cd/</link>
    </image>
    <description>Recent content in CI/CD on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>CI/CD - 지속적 통합/지속적 배포</title>
      <link>https://www.devkuma.com/docs/ci-cd/</link>
      <pubDate>Mon, 05 Sep 2022 17:05:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/ci-cd/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cicd&#34;&gt;CI/CD&lt;/h2&gt;
&lt;h3 id=&#34;ci-지속적-통합-continuous-integration&#34;&gt;CI (지속적 통합, Continuous Integration)&lt;/h3&gt;
&lt;p&gt;애플리케이션의 코드를 추가 및 수정할 때마다 테스트를 실행하고 확실하게 작동하는 코드를 유지하는 방법을 지속성 통합(CI, Continuous Integration)이라고 한다. 지속성 통합은 소프트웨어의 향상을 목적으로 고안된 개발 프로세스이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빌드 및 테스트 자동화&lt;/li&gt;
&lt;li&gt;모든 개발이 끝난 이후에 코드 품질을 관리하는 고전적인 방식의 단점을 해소하기 위해 생긴 개념이다.&lt;/li&gt;
&lt;li&gt;개발을 하면서 &amp;lsquo;코드에 대한 통합&amp;rsquo;을 &amp;lsquo;지속적&amp;rsquo;으로 진행함으로써 품질을 유지하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cd-지속적-배포-continuous-deploy-또는-delivery&#34;&gt;CD (지속적 배포, Continuous Deploy 또는 Delivery)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포 자동화&lt;/li&gt;
&lt;li&gt;소프트웨어가 항상 신뢰 가능한 수준에서 배포될 수 있도록 지속적으로 관리하자는 개념이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fault-tolerant무정지-시스템&#34;&gt;Fault-tolerant(무정지) 시스템&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fault Tolerant 컴퓨터 시스템이란? 시스템 내에 어느 한 부품 또는 어느 한 모듈에 Fault(장애)가 발생하더라도 시스템운영에 전혀 지장을 주지 않도록 설계된 컴퓨터 시스템이다.&lt;/li&gt;
&lt;li&gt;결함 감내 시스템(Fault tolerant system)은 시스템을 구성하는 부품의 일부에서 결함(fault) 또는 고장(failure)이 발생하여도 정상적 혹은 부분적으로 기능을 수행할 수 있는 시스템이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;배포의-종류&#34;&gt;배포의 종류&lt;/h2&gt;
&lt;h3 id=&#34;rolling-deployment&#34;&gt;Rolling Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;롤링 업데이트 방식은 새 버전의 서버를 만들어가면서 트래픽을 구 버전 서버에서 신 버전 서버로 점차적으로 옮기는 형태이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blue-green-deployment&#34;&gt;Blue-Green Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 또는 마이크로서비스의 이전 버전에 있던 사용자 트래픽을 이전 버전과 거의 동일한 새 버전으로 점진적으로 이전하는 애플리케이션 릴리스 모델이다.&lt;/li&gt;
&lt;li&gt;이전 버전을 blue 환경으로, 새 버전은 green 환경으로 부를 수 있다. 프로덕션 트래픽이 blue에서 green으로 완전히 이전되면, blue는 롤백에 대비하여 대기 상태로 두거나 프로덕션에서 가져온 후 업데이트하여 다음 업데이트의 템플릿으로 삼을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;canary-deployment&#34;&gt;Canary Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;Canary&amp;rsquo;라는 용어의 어원을 알면 이해가 더 쉽다. Canary는 카나리아 라는 새를 일컫는 말인데, 이 새는 일산화탄소 및 유독가스에 매우 민감하다고 한다. 그래서 과거 광부들이 이 새를 옆에 두고 광산에서 일을 하다가 카나리아가 갑자기 죽게 되면 대피를 했다고 한다.&lt;/li&gt;
&lt;li&gt;Canary 배포는 카나리아 새처럼 위험을 빠르게 감지할 수 있는 배포 기법이다. 카나리 배포는 일부서버(10% 정도?)에만 신 버전을 배포하여 운영한 후 문제가 없는것이 확인되면 점차적으로 모든 서버에 신 버전을 배포하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ci--cd-도구&#34;&gt;CI / CD 도구&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Travice CI&lt;/li&gt;
&lt;li&gt;Bamboo&lt;/li&gt;
&lt;li&gt;Circle CI&lt;/li&gt;
&lt;li&gt;TeamCity&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>CI/CD</category>
      
    </item>
    
    <item>
      <title>CI/CD - 지속적 통합/지속적 배포</title>
      <link>https://www.devkuma.com/docs/ci-cd/</link>
      <pubDate>Mon, 05 Sep 2022 17:05:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/ci-cd/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cicd&#34;&gt;CI/CD&lt;/h2&gt;
&lt;h3 id=&#34;ci-지속적-통합-continuous-integration&#34;&gt;CI (지속적 통합, Continuous Integration)&lt;/h3&gt;
&lt;p&gt;애플리케이션의 코드를 추가 및 수정할 때마다 테스트를 실행하고 확실하게 작동하는 코드를 유지하는 방법을 지속성 통합(CI, Continuous Integration)이라고 한다. 지속성 통합은 소프트웨어의 향상을 목적으로 고안된 개발 프로세스이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빌드 및 테스트 자동화&lt;/li&gt;
&lt;li&gt;모든 개발이 끝난 이후에 코드 품질을 관리하는 고전적인 방식의 단점을 해소하기 위해 생긴 개념이다.&lt;/li&gt;
&lt;li&gt;개발을 하면서 &amp;lsquo;코드에 대한 통합&amp;rsquo;을 &amp;lsquo;지속적&amp;rsquo;으로 진행함으로써 품질을 유지하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cd-지속적-배포-continuous-deploy-또는-delivery&#34;&gt;CD (지속적 배포, Continuous Deploy 또는 Delivery)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포 자동화&lt;/li&gt;
&lt;li&gt;소프트웨어가 항상 신뢰 가능한 수준에서 배포될 수 있도록 지속적으로 관리하자는 개념이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fault-tolerant무정지-시스템&#34;&gt;Fault-tolerant(무정지) 시스템&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fault Tolerant 컴퓨터 시스템이란? 시스템 내에 어느 한 부품 또는 어느 한 모듈에 Fault(장애)가 발생하더라도 시스템운영에 전혀 지장을 주지 않도록 설계된 컴퓨터 시스템이다.&lt;/li&gt;
&lt;li&gt;결함 감내 시스템(Fault tolerant system)은 시스템을 구성하는 부품의 일부에서 결함(fault) 또는 고장(failure)이 발생하여도 정상적 혹은 부분적으로 기능을 수행할 수 있는 시스템이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;배포의-종류&#34;&gt;배포의 종류&lt;/h2&gt;
&lt;h3 id=&#34;rolling-deployment&#34;&gt;Rolling Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;롤링 업데이트 방식은 새 버전의 서버를 만들어가면서 트래픽을 구 버전 서버에서 신 버전 서버로 점차적으로 옮기는 형태이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blue-green-deployment&#34;&gt;Blue-Green Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 또는 마이크로서비스의 이전 버전에 있던 사용자 트래픽을 이전 버전과 거의 동일한 새 버전으로 점진적으로 이전하는 애플리케이션 릴리스 모델이다.&lt;/li&gt;
&lt;li&gt;이전 버전을 blue 환경으로, 새 버전은 green 환경으로 부를 수 있다. 프로덕션 트래픽이 blue에서 green으로 완전히 이전되면, blue는 롤백에 대비하여 대기 상태로 두거나 프로덕션에서 가져온 후 업데이트하여 다음 업데이트의 템플릿으로 삼을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;canary-deployment&#34;&gt;Canary Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;Canary&amp;rsquo;라는 용어의 어원을 알면 이해가 더 쉽다. Canary는 카나리아 라는 새를 일컫는 말인데, 이 새는 일산화탄소 및 유독가스에 매우 민감하다고 한다. 그래서 과거 광부들이 이 새를 옆에 두고 광산에서 일을 하다가 카나리아가 갑자기 죽게 되면 대피를 했다고 한다.&lt;/li&gt;
&lt;li&gt;Canary 배포는 카나리아 새처럼 위험을 빠르게 감지할 수 있는 배포 기법이다. 카나리 배포는 일부서버(10% 정도?)에만 신 버전을 배포하여 운영한 후 문제가 없는것이 확인되면 점차적으로 모든 서버에 신 버전을 배포하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ci--cd-도구&#34;&gt;CI / CD 도구&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Travice CI&lt;/li&gt;
&lt;li&gt;Bamboo&lt;/li&gt;
&lt;li&gt;Circle CI&lt;/li&gt;
&lt;li&gt;TeamCity&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>CI/CD</category>
      
    </item>
    
    <item>
      <title>Argo CD 개요</title>
      <link>https://www.devkuma.com/docs/argo-cd/overview/</link>
      <pubDate>Thu, 15 Sep 2022 00:29:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/argo-cd/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;argocd-개요&#34;&gt;ArgoCD 개요&lt;/h2&gt;
&lt;p&gt;Argo CD는 Argo 프로젝트의 하위 프로젝트 하나의 Kubernetes를 위한 GitOps 스타일의 배포를 지원하는 CD(Continuous Delivery) 도구이다.&lt;br&gt;
Git 저장소의 내용과 쿠버네티스 클러스터를 동기화해주는 역할을 하는 에이전트이며, 쿠버네티스 클러스터 내부에서 Pod 형태로 배포가 된다.&lt;/p&gt;
&lt;p&gt;2017년에 시작된 Argo 프로젝트는 Argo Workflows, Argo CD, Argo Events, Argo Rollouts 등의 하위 프로젝트를 가지고 있으며, 2020년 4월에는 CNCF(Cloud Native Computing Foundation) 인큐베이터 프로젝트가 되었다. Argo라는 이름은 그리스 신화의 아르고 배에서 채택되고 있으며, 그 마스코트는 같은 이름의 문어의 일종을 이미지 한 것으로 되어 있다.&lt;/p&gt;
&lt;p&gt;Agro CD는 &amp;ldquo;CD&amp;quot;라는 이름에서 알 수 있듯이 지속적인 배달을 전문으로하는 도구이며 CI(Continuous Integration) 기능이 없다. 따라서 CI 툴과는 별도로 다른 방법으로 통합해야 한다.&lt;/p&gt;
&lt;p&gt;Argo CD는 원하는 응용 프로그램의 상태를 정의하는 소스 (매니페스트)로 Git 저장소를 사용하는 &lt;a href=&#34;https://www.devkuma.com/docs/git-ops/&#34;&gt;GitOps&lt;/a&gt; 패턴을 따른다. Argo CD에서의 Kubernetes 매니페스트는 표준 YAML/json 이외에 Kustomize나 Helm chart, ksonnet, jsonnet 등 여러 방법으로 지정이 가능하다.&lt;/p&gt;
&lt;p&gt;Argo CD에서는 Git 리포지토리의 상태에 맞게 자동 배포를 수행한다. 애플리케이션 구성이 Git에서 관리되므로 특정 브랜치 및 태그 업데이트를 추적할 수 있다. 또한 배포된 응용 프로그램에 문제가 있는 경우에도 특정 커밋 버전으로 즉시 되돌릴 수 있다.&lt;/p&gt;
&lt;p&gt;Argo CD는 실행 중인 k8s 애플리케이션을 지속적으로 모니터링하며 현재 상태와 Git 저장소의 상태를 비교하는 Kubernetes 컨트롤러로 구현된다. 현재 상태와 Git 리포지토리의 상태에 차이가 있는 경우에 그 차이를 시각화하여 자동 또는 수동으로 어플리케이션의 동기화를 실시한다.&lt;/p&gt;
&lt;h2 id=&#34;argo-cd-주요-특징&#34;&gt;Argo CD 주요 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 정의, 구성 및 환경은 선언적이어야 하며 버전을 제어해야 한다.&lt;/li&gt;
&lt;li&gt;애플리케이션 배포 및 수명주기 관리는 자동화되고 확인하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;자동 배포&lt;/td&gt;
&lt;td&gt;지정된 환경에 응용 프로그램을 자동으로 배포&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;설정 관리/템플릿 도구 지원&lt;/td&gt;
&lt;td&gt;Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML 등을 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;멀티 클러스터 지원&lt;/td&gt;
&lt;td&gt;여러 k8s 클러스터 관리, 배포 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSO 통합&lt;/td&gt;
&lt;td&gt;OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn과 SSO 통합 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;허가 기능&lt;/td&gt;
&lt;td&gt;멀티 테넌트 및 RBAC 정책 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;롤백&lt;/td&gt;
&lt;td&gt;Git 저장소에 커밋된 애플리케이션의 어느 시점으로도 롤백 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;헬스 체크&lt;/td&gt;
&lt;td&gt;애플리케이션 리소스의 상태 상태 분석 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;드리프트 감지 및 시각화&lt;/td&gt;
&lt;td&gt;설정의 드리프트 감지 및 시각화를 자동으로 수행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;애플리케이션 동기화&lt;/td&gt;
&lt;td&gt;자동 또는 수동으로 이상적인 상태에 동기화 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;웹 UI&lt;/td&gt;
&lt;td&gt;실시간 뷰에서 애플리케이션 활동을 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CLI&lt;/td&gt;
&lt;td&gt;자동화 및 CI 통합을 위한 CLI 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webhook 통합&lt;/td&gt;
&lt;td&gt;GitHub, BitBucket, GitLab 등 Webhook 통합 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;자동화 토큰&lt;/td&gt;
&lt;td&gt;자동화를 위한 액세스 토큰을 프로젝트별로 발행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PreSync/Sync/PostSync 후크&lt;/td&gt;
&lt;td&gt;복잡한 애플리케이션 배포를 지원하기 위한 PreSync/Sync/PostSync 후크 지원(예: 블루 그린 배포 및 카나리 릴리스 등)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;감사 추적&lt;/td&gt;
&lt;td&gt;애플리케이션 이벤트 및 API 호출 감사 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prometheus 대응&lt;/td&gt;
&lt;td&gt;Prometheus 지표를 표준으로 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파라미터 오버라이&lt;/td&gt;
&lt;td&gt;Git의 ksonnet / helm 매개 변수 덮어 쓰기 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;작동-원리&#34;&gt;작동 원리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Argo CD는 원하는 애플리케이션 상태를 정의하기위한 소스로 Git repository를 사용하는 GitOps 패턴을 따른다.&lt;/li&gt;
&lt;li&gt;Kubernetes 매니페스트는 여러 방법으로 지정할 수 있다. (필자는 helm 차트를 사용하였습니다.)&lt;/li&gt;
&lt;li&gt;Argo CD는 지정된 대상 환경에서 원하는 애플리케이션 상태의 배포를 자동화한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;argo-cd-운영-환경&#34;&gt;Argo CD 운영 환경&lt;/h2&gt;
&lt;p&gt;Argo CD는 Kubernetes의 구성 요소로 작동하므로 온프레미스 또는 클라우드의 Kubernetes 환경에서 작동한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;온프레미스/클라우드에 독자적으로 구축한 Kubernetes 환경&lt;/li&gt;
&lt;li&gt;클라우드 관리 서비스의 Kubernetes 환경&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;유사한-기능을-가진-oss&#34;&gt;유사한 기능을 가진 OSS&lt;/h2&gt;
&lt;p&gt;Kubernetes/GitOps와 호환되는 오픈 소스 CD 도구는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins X&lt;/li&gt;
&lt;li&gt;FluxCD&lt;/li&gt;
&lt;li&gt;Spinnaker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;argo-cd-라이센스&#34;&gt;Argo CD 라이센스&lt;/h2&gt;
&lt;p&gt;Argo CD의 라이센스는 &amp;ldquo;Apache 라이센스 버전 2&amp;rdquo;(Apache License version2)라는 라이센스에 따라 공개되며, 영리, 비영리를 불문하고 누구나 자유롭고 무료로 이용, 변경, 재배포할 수 있게 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD 공식 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/argoproj/argo-cd/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD 다운로드 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithub.tistory.com/345&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD (GitOps) 간단하게 알아보기&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>CI/CD</category>
      
    </item>
    
    <item>
      <title>Argo CD 개요</title>
      <link>https://www.devkuma.com/docs/argo-cd/overview/</link>
      <pubDate>Thu, 15 Sep 2022 00:29:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/argo-cd/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;argocd-개요&#34;&gt;ArgoCD 개요&lt;/h2&gt;
&lt;p&gt;Argo CD는 Argo 프로젝트의 하위 프로젝트 하나의 Kubernetes를 위한 GitOps 스타일의 배포를 지원하는 CD(Continuous Delivery) 도구이다.&lt;br&gt;
Git 저장소의 내용과 쿠버네티스 클러스터를 동기화해주는 역할을 하는 에이전트이며, 쿠버네티스 클러스터 내부에서 Pod 형태로 배포가 된다.&lt;/p&gt;
&lt;p&gt;2017년에 시작된 Argo 프로젝트는 Argo Workflows, Argo CD, Argo Events, Argo Rollouts 등의 하위 프로젝트를 가지고 있으며, 2020년 4월에는 CNCF(Cloud Native Computing Foundation) 인큐베이터 프로젝트가 되었다. Argo라는 이름은 그리스 신화의 아르고 배에서 채택되고 있으며, 그 마스코트는 같은 이름의 문어의 일종을 이미지 한 것으로 되어 있다.&lt;/p&gt;
&lt;p&gt;Agro CD는 &amp;ldquo;CD&amp;quot;라는 이름에서 알 수 있듯이 지속적인 배달을 전문으로하는 도구이며 CI(Continuous Integration) 기능이 없다. 따라서 CI 툴과는 별도로 다른 방법으로 통합해야 한다.&lt;/p&gt;
&lt;p&gt;Argo CD는 원하는 응용 프로그램의 상태를 정의하는 소스 (매니페스트)로 Git 저장소를 사용하는 &lt;a href=&#34;https://www.devkuma.com/docs/git-ops/&#34;&gt;GitOps&lt;/a&gt; 패턴을 따른다. Argo CD에서의 Kubernetes 매니페스트는 표준 YAML/json 이외에 Kustomize나 Helm chart, ksonnet, jsonnet 등 여러 방법으로 지정이 가능하다.&lt;/p&gt;
&lt;p&gt;Argo CD에서는 Git 리포지토리의 상태에 맞게 자동 배포를 수행한다. 애플리케이션 구성이 Git에서 관리되므로 특정 브랜치 및 태그 업데이트를 추적할 수 있다. 또한 배포된 응용 프로그램에 문제가 있는 경우에도 특정 커밋 버전으로 즉시 되돌릴 수 있다.&lt;/p&gt;
&lt;p&gt;Argo CD는 실행 중인 k8s 애플리케이션을 지속적으로 모니터링하며 현재 상태와 Git 저장소의 상태를 비교하는 Kubernetes 컨트롤러로 구현된다. 현재 상태와 Git 리포지토리의 상태에 차이가 있는 경우에 그 차이를 시각화하여 자동 또는 수동으로 어플리케이션의 동기화를 실시한다.&lt;/p&gt;
&lt;h2 id=&#34;argo-cd-주요-특징&#34;&gt;Argo CD 주요 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 정의, 구성 및 환경은 선언적이어야 하며 버전을 제어해야 한다.&lt;/li&gt;
&lt;li&gt;애플리케이션 배포 및 수명주기 관리는 자동화되고 확인하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;자동 배포&lt;/td&gt;
&lt;td&gt;지정된 환경에 응용 프로그램을 자동으로 배포&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;설정 관리/템플릿 도구 지원&lt;/td&gt;
&lt;td&gt;Kustomize, Helm, Ksonnet, Jsonnet, plain-YAML 등을 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;멀티 클러스터 지원&lt;/td&gt;
&lt;td&gt;여러 k8s 클러스터 관리, 배포 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSO 통합&lt;/td&gt;
&lt;td&gt;OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn과 SSO 통합 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;허가 기능&lt;/td&gt;
&lt;td&gt;멀티 테넌트 및 RBAC 정책 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;롤백&lt;/td&gt;
&lt;td&gt;Git 저장소에 커밋된 애플리케이션의 어느 시점으로도 롤백 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;헬스 체크&lt;/td&gt;
&lt;td&gt;애플리케이션 리소스의 상태 상태 분석 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;드리프트 감지 및 시각화&lt;/td&gt;
&lt;td&gt;설정의 드리프트 감지 및 시각화를 자동으로 수행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;애플리케이션 동기화&lt;/td&gt;
&lt;td&gt;자동 또는 수동으로 이상적인 상태에 동기화 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;웹 UI&lt;/td&gt;
&lt;td&gt;실시간 뷰에서 애플리케이션 활동을 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CLI&lt;/td&gt;
&lt;td&gt;자동화 및 CI 통합을 위한 CLI 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webhook 통합&lt;/td&gt;
&lt;td&gt;GitHub, BitBucket, GitLab 등 Webhook 통합 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;자동화 토큰&lt;/td&gt;
&lt;td&gt;자동화를 위한 액세스 토큰을 프로젝트별로 발행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PreSync/Sync/PostSync 후크&lt;/td&gt;
&lt;td&gt;복잡한 애플리케이션 배포를 지원하기 위한 PreSync/Sync/PostSync 후크 지원(예: 블루 그린 배포 및 카나리 릴리스 등)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;감사 추적&lt;/td&gt;
&lt;td&gt;애플리케이션 이벤트 및 API 호출 감사 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prometheus 대응&lt;/td&gt;
&lt;td&gt;Prometheus 지표를 표준으로 지원&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파라미터 오버라이&lt;/td&gt;
&lt;td&gt;Git의 ksonnet / helm 매개 변수 덮어 쓰기 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;작동-원리&#34;&gt;작동 원리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Argo CD는 원하는 애플리케이션 상태를 정의하기위한 소스로 Git repository를 사용하는 GitOps 패턴을 따른다.&lt;/li&gt;
&lt;li&gt;Kubernetes 매니페스트는 여러 방법으로 지정할 수 있다. (필자는 helm 차트를 사용하였습니다.)&lt;/li&gt;
&lt;li&gt;Argo CD는 지정된 대상 환경에서 원하는 애플리케이션 상태의 배포를 자동화한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;argo-cd-운영-환경&#34;&gt;Argo CD 운영 환경&lt;/h2&gt;
&lt;p&gt;Argo CD는 Kubernetes의 구성 요소로 작동하므로 온프레미스 또는 클라우드의 Kubernetes 환경에서 작동한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;온프레미스/클라우드에 독자적으로 구축한 Kubernetes 환경&lt;/li&gt;
&lt;li&gt;클라우드 관리 서비스의 Kubernetes 환경&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;유사한-기능을-가진-oss&#34;&gt;유사한 기능을 가진 OSS&lt;/h2&gt;
&lt;p&gt;Kubernetes/GitOps와 호환되는 오픈 소스 CD 도구는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins X&lt;/li&gt;
&lt;li&gt;FluxCD&lt;/li&gt;
&lt;li&gt;Spinnaker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;argo-cd-라이센스&#34;&gt;Argo CD 라이센스&lt;/h2&gt;
&lt;p&gt;Argo CD의 라이센스는 &amp;ldquo;Apache 라이센스 버전 2&amp;rdquo;(Apache License version2)라는 라이센스에 따라 공개되며, 영리, 비영리를 불문하고 누구나 자유롭고 무료로 이용, 변경, 재배포할 수 있게 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD 공식 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/argoproj/argo-cd/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD 다운로드 사이트&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ithub.tistory.com/345&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo CD (GitOps) 간단하게 알아보기&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>CI/CD</category>
      
    </item>
    
  </channel>
</rss>
