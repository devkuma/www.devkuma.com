<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Swift</title>
    <link>https://www.devkuma.com/tags/swift/</link>
    <image>
      <url>https://www.devkuma.com/tags/swift/logo/180x180.jpg</url>
      <title>Swift</title>
      <link>https://www.devkuma.com/tags/swift/</link>
    </image>
    <description>Recent content in Swift on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Swift 입문 | Swift 사용 준비</title>
      <link>https://www.devkuma.com/docs/swift/swift-%EC%82%AC%EC%9A%A9-%EC%A4%80%EB%B9%84/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/swift-%EC%82%AC%EC%9A%A9-%EC%A4%80%EB%B9%84/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 애플의 순정 개발 환경인 &amp;ldquo;Xcode&amp;quot;로 이용한다. 우선 사용을 위한 준비를 하여 간단한 프로그램을 실행에 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | Swift 사용 준비 | Swift(스위프트)란?</title>
      <link>https://www.devkuma.com/docs/swift/swift-%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8%EB%9E%80/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/swift-%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8%EB%9E%80/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 2014년 6월에 개최된 애플 개발자 컨퍼런스에서 갑자기 발표된 완전히 새로운 프로그래밍 언어이다.&lt;/p&gt;
&lt;p&gt;기존에는 Mac OS X 및 iOS (iPhone과 iPad) 앱 개발은 &amp;ldquo;Objective-C (오브젝트-씨)&amp;ldquo;라는 프로그래밍 언어를 사용했었다. 이는 Mac OS X의 성립 유래에 따른다.&lt;/p&gt;
&lt;p&gt;Mac OS X은, 실은 그 이전에 있었던 &amp;lsquo;NeXT STEP&amp;rsquo;라는 OS를 기반으로 하고 있다. NeXT STEP은 원래 Objective-C라는 강력한 객체 지향 언어를 개발했을 때, 이 Objective-C에 의한 프로그램 작성 및 실행을 위한 플랫폼으로 만들어진 것이다. 즉, Objective-C와 NeXT STEP은 일심 동체에서 이 둘은 거의 같은 것으로 해도 좋을 정도로 밀접한 관계에 있었다. 이 NeXT STEP을 개발하고 있던 곳이 당시 NeXT사였고, CEO가 스티브 잡스였다.&lt;/p&gt;
&lt;p&gt;스티브 잡스가 애플에 복귀했을 때,이 NeXT STEP도 함께(?) 애플로 이적하고 이를 바탕으로 &amp;ldquo;Mac OS X&amp;quot;가 만들어 졌다. 물론 외관은 Mac 다워 졌지만, 내용은 NeXT STEP이었다. 그래서 Mac OS X도 &amp;ldquo;Objective-C 프로그램을 만들어 움직인다&amp;quot;것이 전제가 되어 있었다.&lt;/p&gt;
&lt;p&gt;이 대전제는 사실 지금도 바뀌지 않는다. Mac OS X (그리고, 이를 바탕으로 만들어진 iOS)는 Objective-C을 위해 준비된 프레임 워크 내부에 포함되어 있으며,이를 이용하여 모든 프로그램이 움직이고 있다. &amp;ldquo;Mac 또는 iPhone의 개발은 왜 Objective-C가 아니면 안되는 걸까&amp;rdquo; 이유는 이런 것이었다. 원래 &amp;ldquo;Objective-C로 만드는 것을 전제로 설계된 OS &amp;ldquo;이기 때문이다.&lt;/p&gt;
&lt;p&gt;이 Objective-C는 솔직히 매우 이해하기 어려운 언어이다. 이것은 C언어에 Smalltalk는 객체 지향 언어의 원조라고도 말할 수있는 것을 결합시킨 같은 언어로 하나의 언어에서 두 언어의 문법이 동거하고 있는 것 같은 이상한 문법으로 되어 있다. C의 또 다른 개체 언어 발전형인 C++, 이것에 문법이 가까운 Java, C # 등의 언어가 주류가 됨에 따라 이들로 부터 벗어난 Objective-C는 &amp;ldquo;보통의 언어와 다르고, 배우기 어려운 언어&amp;quot;라고 인식되어 갔다.&lt;/p&gt;
&lt;p&gt;Mac 또는 iPhone이 붐이 되어 많은 개발자가 이러한 응용 프로그램을 만들려고 모여들었다. 하지만 이 &amp;ldquo;Objective-C의 첫인상 어려움&amp;quot;에 질리게 되다. 왜 좀 더 이해하기 쉬운 언어를 사용할 수없는 거야? 라고 많은 개발자들이 생각하게 된다.&lt;/p&gt;
&lt;p&gt;이러한 상황은 애플에게도 바람직한 것은 아니다. 그래서 Objective-C와는 다른 새로운 &amp;ldquo;배우기 쉽고 알기 쉬운 사용하기 쉬운 언어&amp;quot;등장하게 된 것이다. 그것이 &amp;ldquo;Swift&amp;quot;이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | Swift 사용 준비 | Swift 특징</title>
      <link>https://www.devkuma.com/docs/swift/swift-%ED%8A%B9%EC%A7%95/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/swift-%ED%8A%B9%EC%A7%95/</guid>
      <description>
        
        
        &lt;p&gt;그럼, 이 Swift라는 것은 어떤 걸까? 그 특징을 간단하게 정리해 보겠다.&lt;/p&gt;
&lt;h2 id=&#34;현대-언어이다&#34;&gt;현대 언어이다&lt;/h2&gt;
&lt;p&gt;Objective-C는 현대의 언어가 채택하고 있는 다양한 &amp;ldquo;멋진 기능&amp;quot;을 많이 지원하지 않았다. Swift는 Objective-C에서는 사용할 수 없었던 다양한 언어의 기능을 사용할 수 있게 되어 있다. &amp;ldquo;클로져&amp;quot;라는 값 처럼 처리를 취급할 수 있는 기능과 제네릭이라는 다양한 종류의 값을 처리하는 기능 등이 준비되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;안전하다&#34;&gt;안전하다&lt;/h2&gt;
&lt;p&gt;Swift는 프로그램에 버그가 섞여 쉬운 다양한 기능을 코드에서 제거 문법이 있다. 예를 들어, 변수는 반드시 초기 값을 설정하지 않으면 안되게 하거나, 객체를 처리하는 변수에 &amp;ldquo;개체가 없는 텅 빈 상태&amp;quot;를 금지하고, 변수는 처음부터 형태를 설정하도록 되어 있고, 제어 구문에서는 반드시 {}으로 처리를 둘려싸지 않으면 안되거나&amp;hellip; 어쨌든 &amp;ldquo;프로그래머에 의한 무심코하게 되는 실수&amp;quot;를 없애도록 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;인터랙티브이다&#34;&gt;인터랙티브이다&lt;/h2&gt;
&lt;p&gt;Swift는 컴파일러 언어이다. 미리 프로그램을 컴파일 해두고 컴퓨터가 직접 실행할 수 있는 바이너리 코드로 프로그램을 작성한다. 그러나 동시에 인터프리터(순서대로 실행하는 방식)으로도 움직일 수 있다. Xcode는 &amp;ldquo;플레이 그라운드(play grount)&amp;ldquo;라는 것이 준비되어 그 자리에서 구문을 쓰고 실행하면서 움직일 수도 있다. 당분간은 이런 식으로 Swift의 기본을 배워나가게 될 것이다.&lt;/p&gt;
&lt;h2 id=&#34;수행이-빠르다&#34;&gt;수행이 빠르다.&lt;/h2&gt;
&lt;p&gt;이러한 다양한 기능이 포함되어 있기 때문에 &amp;ldquo;과연, 편리한 것 같지만, 그래도 작성한 응용 프로그램은 Objective-C 쪽이 척척 움직일 것 같다&amp;quot;고 생각할지 모른다. 하지만 실은 그렇지도 않는다. 애플에 따르면, Swift로 만들어진 프로그램은 Objective-C보다 빠르게 수행 할 수 있는 거다.&lt;/p&gt;
&lt;p&gt;그러나 다른 프로그래머들에 의하면 Swift에는 많은 병목 현상(bottleneck)이 존재하는 것으로 알려져 있으며, 현재 &amp;ldquo;Objective-C보다 빠르다&amp;quot;고 단언은 할 수 없지만, 어느쪽으로 정식 출시될 때에 아마 그만한 성능를 실현하고 있는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;사실-백본backbone은-objective-c와-같다&#34;&gt;사실 백본(backbone)은 Objective-C와 같다&lt;/h2&gt;
&lt;p&gt;원래 Mac과 iOS에서 Objective-C가 사용 된 것은 OS 자체가 이 언어를 위해 최적화되어 있었기 때문이었다. Swift와 같은 새로운 언어가 등장해도 이 점은 변함이 없다. Mac OS X/iOS에 내장된 프레임 워크 등은 Objective-C 용이며, Swift는 이것을 그대로 사용한다. 즉, 언어로는 새롭겠지만, 실제로 Mac OS X 및 iOS의 기능을 이용할 때는 Objective-C에서 사용하던 기능을 그대로 이용된다는 것이다. 따라서 &amp;ldquo;새로운 언어를 위한 모든 기능을 처음부터 모두 배우기&amp;quot;라는 것은 없다. 지금까지 Objective-C에서 배운 지식의 대부분은 그대로 활용할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | Swift 사용 준비 | Swift 사용하기 위한 준비</title>
      <link>https://www.devkuma.com/docs/swift/swift-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%A4%80%EB%B9%84/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/swift-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%A4%80%EB%B9%84/</guid>
      <description>
        
        
        &lt;p&gt;그럼 Swift를 사용할 수 있게 해보자. Swift는 애플이 제공하는 개발 환경 &amp;ldquo;Xocde6&amp;quot;이상에서 지원된다. 이 Xcode6은 2014 년 가을에 출시되었으며, 현재 Xcode7까지 나왔다(2017년 9월 기준).&lt;/p&gt;
&lt;p&gt;설치를 하기 위해서는앱스토어를 이용해도 됙, 애플 개발자 사이트에서 다운로드 받아서 설치를 하여도 된다. 단, 애플 개발자 사이트에서 다운 받기 위해서는 Apple Developer Program의 구성원이어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.apple.com/xcode/downloads/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;애플 개발자 사이트에서 다운로드 받았다면, 디스크 이미지(.dmg)를 마운트하여 Xcode을 그대로 복사하는 것만으로 설치가 완료된다.&lt;/p&gt;
&lt;p&gt;(단, 처음 시작할 때 구성 요소의 기본 작업을 수행하기 때문에, 처음 시작은 시간이 좀 걸린다. 구성 요소 기본 제공에 대한 확인 대화 상자가 나타나면 반드시 설치하도록 한다. 제대로 기동이 되었다면 설치가 완료된다.)&lt;/p&gt;
&lt;h2 id=&#34;플레이-그라운드를-사용하자&#34;&gt;플레이 그라운드를 사용하자&lt;/h2&gt;
&lt;p&gt;Xcode을 시작하면, 우선 &amp;lsquo;플레이 그라운드&amp;rsquo;를 만들어 보자. 이것은 Swift 프로그램을 바로 실행할 수 있는 특수 파일이다.&lt;/p&gt;
&lt;p&gt;Xcode를 시작할 때 나타나는 Welcome 창에서 &amp;ldquo;Get started with a playground&amp;quot;항목을 클릭을 한다. 그리고 나타난 대화 상자에서 name에 프로그램(파일)명과 Platform에 &amp;ldquo;OS X&amp;quot;을 선택한다. 그리고 저장할 폴더를 선택하고 저장하면 플레이 그라운드 윈도우가 나타난다. 이것으로 사용할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/swift/xcode_welcome.png&#34; alt=&#34;xcode welcome&#34;&gt;&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | Swift 사용 준비 | 플레이그라운드 실행</title>
      <link>https://www.devkuma.com/docs/swift/xcode-playground/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/xcode-playground/</guid>
      <description>
        
        
        &lt;p&gt;작성된 플레이 그라운드에는 기본적으로 간단한 문장이 적혀 있다 (아래 소스 코드 참조). 우선 이것의 의미를 이해해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Playground - noun: a place where people can play&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cocoa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, playground&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;라이브러리-가져오기&#34;&gt;라이브러리 가져오기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cocoa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것은 Cocoa 프레임워크의 라이브러리를 가져 오는 것이다. Mac 또는 iOS는 OS 고유의 기능을 처리하는 &amp;lsquo;Cocoa&amp;rsquo;라는 프레임워크가 포함되어 있으며, 이를 통해서 OS에 액세스하고 조작할 수 있다. 이 Cocoa를 프로그램 중에서 사용할 수 있도록 하는 것이, 이 import 문이다. import는 지정된 라이브러리를 로드하여 사용할 수 있도록 하는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;변수-사용&#34;&gt;변수 사용&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, playground&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것은 사실 여러가지 요소가 포함된 문장이다. 먼저 &amp;ldquo;var str&amp;quot;으로 변수 str을 만들고 있다. 또한 텍스트의 값은 큰 따옴표(&amp;quot;)를 사용하여 작성하고 있다.&lt;/p&gt;
&lt;p&gt;그리고 더 재미있는 것이 이 코드 편집기(var str ~) 오른쪽에 표시되는 &amp;ldquo;Hello, playground&amp;quot;라는 텍스트이다. 이것은 &amp;ldquo;var str ~ &amp;ldquo;문장의 실행 결과이다.&lt;/p&gt;
&lt;p&gt;플레이 그라운드는 쓴 문장이 그 자리에서 바로 실행 결과가 표시된다. 예를 들어 변수를 만들고 값을 할당하거나 하면 그 변수에 저장된 값이 오른쪽에 표시된다. 참 편리 기능이다.&lt;/p&gt;
&lt;p&gt;이 플레이 그라운드을 사용하면 조금씩 프로그램을 작성하고 그 자리에서 결과를 확인하는 것이 가능하다. 이제 Swift을 시험하는 환경이 우선 준비되었다.&lt;/p&gt;
&lt;p&gt;다음부터는 플레이 그라운드에서 여러 가지 써서 Swift의 기본적인 문법을 설명하겠다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/swift/xcode_playground.png&#34; alt=&#34;xcode playground&#34;&gt;&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 값, 변수, 연산</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B0%92-%EB%B3%80%EC%88%98-%EC%97%B0%EC%82%B0/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B0%92-%EB%B3%80%EC%88%98-%EC%97%B0%EC%82%B0/</guid>
      <description>
        
        
        &lt;p&gt;프로그래밍의 기본은 값, &amp;ldquo;변수, 연산이다. 이러한 가장 기본적인 것부터 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 값, 변수, 연산 | 리터럴(값)</title>
      <link>https://www.devkuma.com/docs/swift/%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%92/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%92/</guid>
      <description>
        
        
        &lt;p&gt;프로그래밍의 기본 중에 기본이 되는 것은 &amp;lsquo;값&amp;rsquo;과 &amp;lsquo;변수&amp;rsquo;이다. 우선 이들에 대해 대충 이해해 두도록 하자.&lt;/p&gt;
&lt;p&gt;우선 &amp;ldquo;리터럴(literal)&amp;ldquo;이다. 소스 코드에 직접 작성된 값을 일반적으로 &amp;ldquo;리터럴&amp;quot;라고 다. 리터럴 작성은 많은 프로그래밍 언어 대체로 공통적 비슷하다.&lt;/p&gt;
&lt;h2 id=&#34;숫자-리터럴&#34;&gt;숫자 리터럴&lt;/h2&gt;
&lt;p&gt;수치는 그냥 보통으로 숫자를 적으면 된다. &amp;ldquo;123&amp;rdquo; 또는 &amp;ldquo;0.45&amp;quot;식으로 작성하면 된다. 비교적 알기 쉽다. 이러한 일반적인 숫자의 작성뿐만 아니라 색다른 작성 법도 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;4-자리마다-밑줄&#34;&gt;4 자리마다 밑줄&lt;/h3&gt;
&lt;p&gt;숫자는 자리수가 많아지면 바로 알아보기가 힘들다. 그래서 일반 사회에서는, &amp;ldquo;1,000,000&amp;rdquo; 처럼 4자리마다 구분 기호를 붙여 작성하기도 한다. 이와 같은 것을 Swift도 가능하다. 그러나, 기호는 쉼표(,)가 아닌 밑줄(_)이다. 또한 자릿수를 가지런히 보여주기 위하여 처음에 숫자 0으로 쓸 수도 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;예) 0012_3456_7890 (1234567890와 동일)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-8-16-진수&#34;&gt;2, 8, 16 진수&lt;/h3&gt;
&lt;p&gt;보통 10진수 외에 2진수, 8진수, 16진수 값도 작성할 수 있다. 이것들은 각각 숫자의 시작 부분에 &amp;lsquo;0&amp;rsquo;로 시작하는 기호를 다음과 같이 붙인다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;진수&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;예시&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2진수&lt;/td&gt;
&lt;td&gt;&amp;ldquo;0b&amp;quot;를 시작 부분에 붙여 작성한다.&lt;/td&gt;
&lt;td&gt;0b11011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8진수&lt;/td&gt;
&lt;td&gt;&amp;ldquo;0o&amp;rdquo;(두 번째 문자는 알파벳 오)를 시작 부분에 붙여 작성한다.&lt;/td&gt;
&lt;td&gt;0o7623&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16진수&lt;/td&gt;
&lt;td&gt;&amp;ldquo;0x&amp;quot;를 시작 부분에 붙여 설명. 값은 0~9와 A~F를 사용하여 작성한다.&lt;/td&gt;
&lt;td&gt;0x5fa3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;텍스트-리터럴&#34;&gt;텍스트 리터럴&lt;/h2&gt;
&lt;p&gt;텍스트는 값 양쪽을 큰 따옴표(&amp;quot;)로 묶어 작성한다. 이는 많은 언어에서 사용되고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;예) &amp;#34;Hello&amp;#34;, &amp;#34;안녕하세요&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;이스케이프-기호&#34;&gt;이스케이프 기호&lt;/h3&gt;
&lt;p&gt;텍스트 리터럴에는 직접 문자로 표현할 수 없는 기호가 있다. 예를 들어, 큰 따옴표는 쓸 수 없다. 또 줄바꿈(carriage return)과 같은 제어 기호를 쓸 수 없다. 이들은 이스케이프 기호인 백슬래시(\) 기호로 작성한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;기호&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\&amp;rdquo;&lt;/td&gt;
&lt;td&gt;큰 따옴표 (&amp;rdquo;) 기호&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\&lt;/td&gt;
&lt;td&gt;백 슬래시 (\) 기호&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;수평 탭 기호&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;캐리지 리턴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;라인 피드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;널 문자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;예) &amp;#34;이것은\&amp;#34;더블\\쿼트\&amp;#34;기호\n&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;변수-포함&#34;&gt;변수 포함&lt;/h3&gt;
&lt;p&gt;리터럴에는 변수를 포함할 수 있다. 이것은 &amp;lsquo;\(변수)&amp;lsquo;와 같은 형태로 기술한다. 예를 들어, 변수 str 리터럴 내에 포함한다면 아래 같이 작성할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;예) &amp;#34;여기에 \(str)로 표시&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;부울&#34;&gt;부울&lt;/h2&gt;
&lt;p&gt;양자 택일의 상태를 나타내는데 사용하는 것이 부울이다. 실제 값은 &amp;ldquo;true&amp;rdquo;, &amp;ldquo;false&amp;quot;가 리터럴로 준비되어 있다. 이를 직접 작성하여 사용한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 값, 변수, 연산 | 변수, 정수 및 타입(유형)</title>
      <link>https://www.devkuma.com/docs/swift/%EB%B3%80%EC%88%98-%EC%A0%95%EC%88%98-%EB%B0%8F-%ED%83%80%EC%9E%85-%EC%9C%A0%ED%98%95/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%B3%80%EC%88%98-%EC%A0%95%EC%88%98-%EB%B0%8F-%ED%83%80%EC%9E%85-%EC%9C%A0%ED%98%95/</guid>
      <description>
        
        
        &lt;p&gt;변수는 미리 선언을 하고 사용한다. 선언하지 않고 사용하거나, 또는 이미 선언 한 변수를 다시 선언 할 때 오류가 발생한다. 변수의 선언은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var 변수 = 값
var 변수:유형 = 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로 초기값이 되는 값을 대입하는 형태로 선언하는 것이 일반적이다. &amp;ldquo;처음에 값을 할당하지 않고 싶다&amp;quot;면 아래와 같이 작성할 수도 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var 변수:유형
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;상수&#34;&gt;상수&lt;/h2&gt;
&lt;p&gt;변수는 일반적으로 값 변경이 가능하지만, &amp;ldquo;나중에 변경할 수 없도록 하고 싶다&amp;quot;면 상수를 사용할 수 있다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let 상수 = 값
let 상수:유형 = 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상수는 기본적으로 값을 대입 선언을 세트로 작성한다. 선언만 해 두었다가 나중에 값을 할당 할 수 없다. 선언시에 할당된 값이 상수의 값이 되고 이후 변경할 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;변수-타입&#34;&gt;변수 타입&lt;/h2&gt;
&lt;p&gt;보면 알 수 있듯이 변수(상수)를 선언할 때 변수 이름뿐만 아니라, 타입(유형)을 지정할 수도 있다. 이것을보고 &amp;ldquo;Swift 변수는 유형을 지정하지 않고 작성하는 방법과 지정하고 작성하는 방법이 있구나 &amp;lsquo;라고 생각해서는 안된다.&lt;/p&gt;
&lt;p&gt;Swift 변수는 기본적으로 모든 타입이 정해져 있다. 변수를 만들 때, 반드시 타입을 지정하지 않으면 안된다. 그럼, 왜 &amp;ldquo;var 변수 = 값&amp;rdquo; 이와 같이 작성도 할 수 있는가? 라고 하면 대입하는 값에서 타입을 유추하여 설정하기 때문이다. (그래서 &amp;ldquo;var 변수&amp;quot;뿐이라면, 오류가 발생한다.)&lt;/p&gt;
&lt;p&gt;Swift는 기본적으로 &amp;ldquo;정적 타이핑(static typing)&amp;ldquo;언어이다. 모든 변수는 최초에 반드시 타입을 지정하여 해당 타입의 값만 할당 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;타입의-종류&#34;&gt;타입의 종류&lt;/h2&gt;
&lt;p&gt;Swift는 많은 타입이 준비되어 있다. 주요 형태에 대해 여기서 정리해 두겠다.&lt;/p&gt;
&lt;h3 id=&#34;정수&#34;&gt;정수&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;일반적인 정수이다. 32bit 또는 64bit의 값이 된다. (실행하는 CPU에 따라 다르다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UInt&lt;/td&gt;
&lt;td&gt;Int와 동일하지만, 이는 플러스, 마이너스 부호가 없다. (즉, 마이너스를 사용할 수 없다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Byte&lt;/td&gt;
&lt;td&gt;8bit 폭의 값이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int8, Int16, Int32, Int64&lt;/td&gt;
&lt;td&gt;값의 크기를 지정하고 변수를 사용하는 것과 같은 경우, 이것들을 이용하는 것이 알기 쉬울 것이다. 각 변수의 bit 수를 나타낸다. 부호없는 정수 UInt8~ 등도 갖추어져 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;실수-부동-소수점&#34;&gt;실수 (부동 소수점)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;32bit 폭의 부동 소수점 값이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;64bit 폭의 부동 소수이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float32, Float64, Float80, Float96&lt;/td&gt;
&lt;td&gt;값의 크기를 지정하여 부동 소수점을 취급하고 싶은 경우에 사용한다. Double에서도 정밀도가 부족한 경우 96bit 폭까지 사용할 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;텍스트&#34;&gt;텍스트&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;이것이 일반적인 텍스트이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Character&lt;/td&gt;
&lt;td&gt;1개의 문자 텍스트이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;부울&#34;&gt;부울&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bool&lt;/td&gt;
&lt;td&gt;논리 값이다. (true, false)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;이것들은 이른바 기본형이라고도 할 수있 는 것으로, 이 외에도 Swift 값의 형태로 이용되는 것은 많이 있다. 배열이나 객체 &amp;ldquo;튜플(tuple)&amp;rdquo;, &amp;ldquo;옵션널(optional)&amp;ldquo;라는 값등이 있다. 이것들은 기본형에 비해 조금 어려운 때문에 별도로 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 값, 변수, 연산 | 기본 연산</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B8%B0%EB%B3%B8-%EC%97%B0%EC%82%B0/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B8%B0%EB%B3%B8-%EC%97%B0%EC%82%B0/</guid>
      <description>
        
        
        &lt;p&gt;값의 연산은 그다지 특수(?) 것은 없다. 주요 연산자에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;수치-연산&#34;&gt;수치 연산&lt;/h2&gt;
&lt;p&gt;수치 연산의 기본인 사칙 연산은 보통의 연산자를 그대로 사용 할 수 있다. 연산자의 설명은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A + B&lt;/td&gt;
&lt;td&gt;A와 B를 더한다. (덧셈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A - B&lt;/td&gt;
&lt;td&gt;A에서 B를 뺀다. (뺄셈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A * B&lt;/td&gt;
&lt;td&gt;A와 B를 곱한다. (곱셈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A / B&lt;/td&gt;
&lt;td&gt;A를 B로 나눈다. (나눗셈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A % B&lt;/td&gt;
&lt;td&gt;A를 B로 나눈 나머지를 계산한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이 밖에 ()에 의해 연산의 우선 순위 지정 등도 물론 있다. 수치 연산은 그다지 특별한 것은 없을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;텍스트-연산&#34;&gt;텍스트 연산&lt;/h2&gt;
&lt;p&gt;텍스트의 연산은 플러스(+) 기호로 텍스트 연결을 한다. &amp;ldquo;Hello&amp;rdquo;+ &amp;ldquo;Swift&amp;quot;라고 하면 &amp;ldquo;HelloSwift&amp;quot;라는 텍스트를 얻을 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;대입-연산자&#34;&gt;대입 연산자&lt;/h2&gt;
&lt;p&gt;이미 등장하고 있었지만, 값의 대입은 등호(=)를 사용한다. 그러면 오른쪽의 값을 왼쪽 변수 등에 대입한다. 보통 다른 사칙 연산과 대입을 동시에 하기 때문에, 다음과 같은 연산자를 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;수식&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A += B&lt;/td&gt;
&lt;td&gt;A에 B를 가산한다. (A = A + B와 동일)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A -= B&lt;/td&gt;
&lt;td&gt;A에서 B를 감산한다. (A = A - B와 동일)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A *= B&lt;/td&gt;
&lt;td&gt;A에 B를 곱한다. (A = A * B와 동일)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A /= B&lt;/td&gt;
&lt;td&gt;A를 B로 나누한다. (A = A / B와 동일)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A %= B&lt;/td&gt;
&lt;td&gt;A를 B로 나눈 나머지를 A에 대입한다. (A = A % B와 동일)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;증가감소-연산자&#34;&gt;증가/감소 연산자&lt;/h2&gt;
&lt;p&gt;변수의 값을 1증가 하거나1감소 시키고 하기 위한 연산자이다. 연산자의 설명은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;수식&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;++A, A++&lt;/td&gt;
&lt;td&gt;A의 값을 1 증가시킨다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;A, A&amp;ndash;&lt;/td&gt;
&lt;td&gt;A의 값을 1 감소시킨다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;변수 앞에 붙이는 경우와 뒤에 붙이는 경우가 있다. 이것은 값의 평가와 갱신의 타이밍 차이이다. ++A인 경우 값을 1증가하고 A의 값을 가져온다. 즉, 얻을 수 있는 값은 1 증가했다. 이에 비해, A++는 A를 취득한 후에 값을 1 증가시킨다. 즉, A의 값은 1 증가 전의 것으로, 그것이 사용된 후에 값이 변경된다.&lt;/p&gt;
&lt;h3 id=&#34;비교-연산자&#34;&gt;비교 연산자&lt;/h3&gt;
&lt;p&gt;제어 구문의 조건 등에 많이 사용되는 연산이다. &amp;ldquo;A와 B는 같다&amp;rdquo; 혹은 &amp;ldquo;A는 B보다 크다&amp;quot;라는 식으로 두 값을 비교하고 그것이 맞으면 true, 그렇지 않으면 false를 반환하는 연산자이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;수식&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A == B&lt;/td&gt;
&lt;td&gt;A와 B는 같다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A! = B&lt;/td&gt;
&lt;td&gt;A와 B는 다르다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;lt; B&lt;/td&gt;
&lt;td&gt;A는 B보다 작다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;lt;= B&lt;/td&gt;
&lt;td&gt;A는 B보다 작거나 같다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;gt; B&lt;/td&gt;
&lt;td&gt;A는 B보다 크다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;gt;= B&lt;/td&gt;
&lt;td&gt;A는 B보다 크거나 같다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;논리-연산자&#34;&gt;논리 연산자&lt;/h2&gt;
&lt;p&gt;부울 값의 의해 부울 값을 반환하는 연산자이다. 구문의 조건으로 여러 비교 연산 식을 함께 설정하는데 사용된다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;수식&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;amp;&amp;amp; B&lt;/td&gt;
&lt;td&gt;AND 연산이다. A와 B 모두 true이면 true, 그 이외는 모두 false이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A || B&lt;/td&gt;
&lt;td&gt;OR 연산이다. A와 B의 어느 한쪽이 true라면 true, 모두 false인 경우에만 false이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A ^ B&lt;/td&gt;
&lt;td&gt;XOR 연산이다. A와 B가 서로 다른 값이면 true, 같은 값이면 false이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!A&lt;/td&gt;
&lt;td&gt;NOT 연산이다. A가 true라면 false, false이면 true이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 값, 변수, 연산 | 그밖에 알아야 하는 기초 지식</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B7%B8%EB%B0%96%EC%97%90-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B8%B0%EC%B4%88-%EC%A7%80%EC%8B%9D/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B7%B8%EB%B0%96%EC%97%90-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B8%B0%EC%B4%88-%EC%A7%80%EC%8B%9D/</guid>
      <description>
        
        
        &lt;p&gt;이상, 값, 변수, 연산에 대해 설명하였다. 이 외에도 보충으로 알아야 할 지식에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;텍스트는-여러-행-또는-세미콜론으로-구분&#34;&gt;텍스트는 여러 행 또는 세미콜론으로 구분&lt;/h2&gt;
&lt;p&gt;Swift는 문장의 끝은 일반적으로 줄 바꿈으로 구분된다. 한 문장씩 줄 바꿈하여 써서 넣어야만 문장의 끝으로 의식하는 것은 아니다.여러 문장을 하나로 통합하여 쓰고 싶은 경우에는 세미콜론(;)으로 구분하여 작성할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;주석은--또는--으로&#34;&gt;주석은 // 또는 /* */으로&lt;/h2&gt;
&lt;p&gt;주석은 두 종류의 작성법이 있다. // 이후에 한줄이 끝날때까지 모든 텍스트를 주석으로 간주한다. /* */는 /*에서 */까지의 모든 문장을 주석로 간주한다.&lt;/p&gt;
&lt;p&gt;또한 /* */ 주석의 계층화를 지원한다. 주석에 다시 주석을 작성할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* comment is /* THIS! */ text. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;변수-선언과-대입는-괄호로-모을-수-있다&#34;&gt;변수 선언과 대입는 괄호로 모을 수 있다.&lt;/h2&gt;
&lt;p&gt;여러 변수를 제공하는 경우, 각각을 하나 하나 문장 쓰는 것보다 한꺼번에 쓰는 것이 편하다. Swift는 이런 작성법이 가능하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (변수1, 변수2, ...) = (값1, 값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 &amp;ldquo;변수1&amp;quot;에는 &amp;ldquo;값1&amp;rdquo;, &amp;ldquo;변수2&amp;quot;에는 &amp;ldquo;값2&amp;rdquo; &amp;hellip;&amp;hellip;라는 식으로 순서대로 값이 할당된다.&lt;/p&gt;
&lt;h2 id=&#34;오버플로우-방지를-위한-&#34;&gt;오버플로우 방지를 위한 &amp;ldquo;&amp;amp;&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;큰 숫자를 처리하는 경우, 오버플로우나 언더플로우의 발생에 주의하지 않으면 안된다. 오버플로우는 자릿수가 넘쳐서, 정수로 그 형태로 취급할 수 있는 상한과 하한을 초과하는 것이다. 또한 언더플로우는 부동 소수로 취급하는 자릿수를 초과하는 것이다. 이 밖에 연산시 발생하는 오류로 &amp;ldquo;0으로 나누기&amp;quot;등도 있다.&lt;/p&gt;
&lt;p&gt;이러한 연산을 할 시에 오류 발생을 고려해야 할 경우, &amp;ldquo;값이 이상해져도 좋으니까 오류를 발생시키지 말았으면&amp;quot;할 때도 있을 것이다. 이러한 경우에 연산자 앞에 &amp;ldquo;&amp;amp;&amp;ldquo;를 붙여서 오류를 발생시키지 않도록 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;값-연산할-때-캐스팅형-변환하기&#34;&gt;값 연산할 때 캐스팅(형 변환)하기&lt;/h2&gt;
&lt;p&gt;Swift는 각각의 값의 유형은 정적으로 정해져 있다. 값이 다른 것끼리 연산하고자 하는 경우에는 어느 한쪽 유형으로 캐스팅해서 맞춰야 한다. 이것은 &amp;ldquo;타입명(값)&amp;ldquo;의 형태로 할 수 있다. 예를 들면 아래와 같은 방식이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 정수로 변환&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;45.67&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 텍스트로 변환&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;456&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;매우 대충이지만 어째든 값, 변수, 연산의 기본에 대해 대략적으로 정리했다. 이것들은 프로그래밍의 기본 중의 기본이기 때문에, 여기에서 제대로 기억하기로 하자. 다음은 문법의 핵심이되는 &amp;ldquo;제어 구문&amp;quot;에 대해 설명하겠다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 제어 구문</title>
      <link>https://www.devkuma.com/docs/swift/%EC%A0%9C%EC%96%B4-%EA%B5%AC%EB%AC%B8/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%A0%9C%EC%96%B4-%EA%B5%AC%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;제어 구문은 복잡한 프로그램을 작성하는데 있어서 필수적인 것이다. if, switch for, while. 이러한 4가지 기본 구문에 대해 여기서 정리하여 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 제어 구문 | if 문에 의한 조건 분기</title>
      <link>https://www.devkuma.com/docs/swift/if-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EC%A1%B0%EA%B1%B4-%EB%B6%84%EA%B8%B0/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/if-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EC%A1%B0%EA%B1%B4-%EB%B6%84%EA%B8%B0/</guid>
      <description>
        
        
        &lt;p&gt;이번에는 Swift의 제어 구문에 대해 설명하겠다. 제어 구문은 조건 분기와 반복으로 구성된다. 우선 조건 분기의 기본이다 if문부터 설명하겠다.&lt;/p&gt;
&lt;p&gt;이미 다른 프로그래밍 언어를 경험한 사람이라면 if문이 무슨 뜻인지 알고 있을 거다. 이것은 조건에 따라 수행할 작업을 설정하는 것이다. 이 if문은 다음과 같이 작성한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;if문의 기본형 (1)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if 조건문 {
    ...... 조건이 옳았을 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;if문의 기본형 (2)&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if 조건문 {
    ...... 조건이 옳았을 처리 ......
} else {
    ...... 조건이 틀렸을 때 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if문 이 후에 조건문을 작성한다. 이는 기본적으로 &amp;ldquo;사실 값으로 얻을 수 있는 것&amp;quot;이라면 어떤 것이라도 작성할 수 있다. 값, 변수, 수식, 함수나 메소드 등이 해당된다. 다른 언어의 경험이 있으면, 바로 &amp;ldquo;조건은 괄호로 둘러싼다&amp;quot;라고 생각할 수 있는데, Swift의 경우 괄호는 없어도 된다. 물론 있어도 괜찮다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;◯ if (x == 0) {...}
◯ if x == 0 {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한 조건 후에 수행할 작업과 else 다음에 수행할 작업 부분은 반드시 {} 기호로 묶어야 한다. 다른 언어에서는 한문장 밖에 처리가 제공되지 않는 경우는 {}를 생략할 수도 있지만, Swift는 반드시 {}가 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;else-if-대해&#34;&gt;else if 대해&lt;/h2&gt;
&lt;p&gt;조건이 성립하지 않으면 else에 if를 붙여 &amp;ldquo;else if&amp;quot;로 다음과 조건문을 이어서 계속 쓸 수 있다. 아래와 같은 방식이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if 조건문 {
    ...... 처리 ......
} else if 조건문 {
    ...... 처리 ......
} else if ...... 필요한 만큼 계속 쓴다 ......

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 경우에도 &amp;ldquo;else if&amp;quot;가 성립되지 않으면, else를 붙이거나 거듭해서 &amp;ldquo;else if&amp;quot;를 다음의 조건문으로 작성할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 제어 구문 | switch 문에 의한 여러 분기</title>
      <link>https://www.devkuma.com/docs/swift/switch-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EC%97%AC%EB%9F%AC-%EB%B6%84%EA%B8%B0/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/switch-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EC%97%AC%EB%9F%AC-%EB%B6%84%EA%B8%B0/</guid>
      <description>
        
        
        &lt;p&gt;if는 부울값으로 조건을 확인하기 위해, 양자 택일의 형태밖에 처리를 분기할 수 없었다. 값을 확인하고 다수의 분기할 수 있도록 하는 것이 &amp;ldquo;switch&amp;quot;문이다.&lt;/p&gt;
&lt;p&gt;switch는 체크하는 값을 준비하고, 그 값에 따라 처리 부분에 점프하는 동작을 한다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;h2 id=&#34;switch-문장의-기본&#34;&gt;switch 문장의 기본&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch 체크 값 {
case 값 :
    ...... 수행 할 작업 ......
case 값, 값 ... :
    ...... 수행 할 작업 ......

default :
    ...... 다른 경우의 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;체크-값&#34;&gt;체크 값&lt;/h3&gt;
&lt;p&gt;switch문 이후에 체크하는 값을 작성한다. 이것은 값, 변수, 수식 등 값으로 취급할 것이면 무엇이든 작성할 수 있다. 이 값의 부분도 괄호는 없어도 된다 (붙여도 상관없다).&lt;/p&gt;
&lt;p&gt;체크하는 값은 숫자, 텍스트, 논리값 어떤 것도 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;case&#34;&gt;case&lt;/h3&gt;
&lt;p&gt;case에는 값을 작성한다. 그러면 switch 마련한 값이 case 값과 일치하는 처리를 실행되게 된다. 이 case에는 값을 여러개를 작성할 수 있다. 이 경우 콤마(,)로 값을 계속 작성할 수도 있다.&lt;/p&gt;
&lt;p&gt;많은 언어에서는 case가 수행하는 작업의 마지막 구문을 빠져 위한 지침을 제공하지만 swift 필요없다(예로 break등 있다). swift에서는 case에 있는 모든 처리를 수행하면, 다음의 case 전에 자동으로 구문을 빠져 나오게 된다.&lt;/p&gt;
&lt;h3 id=&#34;default&#34;&gt;default&lt;/h3&gt;
&lt;p&gt;switch의 마지막에는 반드시 default:를 준비해야 한다. 이것은 모든 case에 일치하는 항목이 없는 경우의 처리이다. 많은 언어에서 이는 선택 사항이지만, swift의 경우 반드시 준비하는 것이 기본이다.&lt;/p&gt;
&lt;h2 id=&#34;range-의한-범위-지정&#34;&gt;range 의한 범위 지정&lt;/h2&gt;
&lt;p&gt;case에는 여러 값을 지정할 수 있지만, 값이 방대해 지면 일일이 쓸 수 없게 된다. 이러한 경우에 편리한 것이 &amp;ldquo;range&amp;quot;연산자를 사용하여 범위 지정이다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;최소값 ... 최대값
최소값 ..&amp;lt; 최대값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;range를 사용하여 최소값에서 최대값까지의 범위의 모든 값을 지정할 수 있다. &amp;ldquo;&amp;hellip;&amp;ldquo;는 최소값에서 최대값까지 &amp;ldquo;.. &amp;lt;&amp;ldquo;는 최소값에서 최대값 미만 (최대 값은 포함되지 않음)를 범위로 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;아래에 range를 이용한 switch에 대한 예제는 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-switf&#34; data-lang=&#34;switf&#34;&gt;var x = 300
 
switch x {
case 0:
    &amp;#34;zero&amp;#34;
case 1...9:
    &amp;#34;1번&amp;#34;
case 10...99:
    &amp;#34;2번&amp;#34;
case 100...999:
    &amp;#34;3번&amp;#34;
default:
    &amp;#34;없다&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 식으로, range를 이용해서 수치에 대한 범위를 정하여 분기 처리를 쉽게 할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 제어 구문 | for 문에 의한 반복</title>
      <link>https://www.devkuma.com/docs/swift/for-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B0%98%EB%B3%B5/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/for-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B0%98%EB%B3%B5/</guid>
      <description>
        
        
        &lt;p&gt;이어서 반복문이다. 반복에는 몇가지 문법이 준비되어 있다. 가장 많이 사용되는 것은 &amp;ldquo;for&amp;rdquo; 문이다. 이것은 두 가지 형태로 되어 있다. 각각 정리하자면 아래와 같다.&lt;/p&gt;
&lt;h2 id=&#34;for-in의-기본형&#34;&gt;for in의 기본형&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 변수 이름 in 여러 요소와 값 {
    ...... 반복 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 배열이나 range처럼 여러 값을 모은 것을 이용하여 반복한다. for의 변수 명을 준비하고 in 후 배열이나 range 값을 작성한다. 이후에 {} 내에 반복 처리를 작성한다.&lt;/p&gt;
&lt;p&gt;for는 in 이후에 배열 등 순서대로 값을 꺼내어 for 변수에 할당하고 처리를 수행하는 작업을 모든 요소에 대해 반복한다. 예를 들어, 1에서 10까지 값을 변수로 설정하고 실행한다면 아래와 같이 작성된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for index in 1...10 {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한, 순서대로 추출 값은 따로 사용하지 않는 경우에는 변수 이름을 언더스코어(_)로 할 수도 있다. 아래와 같이 작성된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for _ in 1...10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면 10회 반복 처리를 만들 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;for-기본형&#34;&gt;for 기본형&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 초기화 처리; 조건; 후 처리 {
    ...... 반복 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 더 세세하게 반복하고 싶은 경우에 사용한다. for 후에는 초기화 처리, 조건, 후 처리의 3 가지 요소가 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;요소&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;초기화 처리&lt;/td&gt;
&lt;td&gt;반복을 시작하기 전에 수행할 처리을 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;조건&lt;/td&gt;
&lt;td&gt;반복할 때마다 이 조건을 확인한다. true이면 반복하고, false이면 구문을 빠져 나간다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;후 처리&lt;/td&gt;
&lt;td&gt;반복 처리를 실행 후, 여기에 준비한 처리를 수행하고 다음 반복으로 진행한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이런 for 문이 언어의 경험이 있으면 더 친숙한 것이다. 대부분의 경우 초기화로 변수를 초기화하고, 후 처리에서 그 값을 증감시켜 반복을 수행시키도록 한다. 예를 들면, 아래와 같은 방식이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for var i = 0; i &amp;lt;10; i ++ {
    &amp;#34;index :&amp;#34;+ String (i)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기서 변수 i를 초기화하고, 그 값을 0에서 10까지 카운트하면서 반복을 실행한다. 반복은 String(i)라고하는 것은 이전에 전했었다. 텍스트로 형변환하는 처리이다.&lt;/p&gt;
&lt;p&gt;이것으로 일단 반복 처리가 실행된다. 그저 이것이라면 for in에 range를 사용하여 쓴 편이 알기 쉬울 것이다. 일부러 이 for를 사용하는 이점은 별로 느껴지지 않을지도 모르겠다.&lt;/p&gt;
&lt;p&gt;여기 for는 후 처리 및 조건을 자유롭게 작성할 수 있는 것이 장점이다. 예를 들어, &amp;ldquo;변수를 2씩 늘려간다&amp;quot;라는 것도 쉽게 할 수 있다. 단순히 1씩 값을 늘려 간다면 for in이 좋지만, 좀 더 정교한 것을 처리하고 싶은 경우는 여기에 for가 편리하다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 제어 구문 | while 문에 의한 반복</title>
      <link>https://www.devkuma.com/docs/swift/while-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B0%98%EB%B3%B5/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/while-%EB%AC%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B0%98%EB%B3%B5/</guid>
      <description>
        
        
        &lt;p&gt;for는 반복마다 변화하는 장치가 구문에 있다. 하지만, 더 간단하게 조건을 확인하고 반복 여부를 결정만 하는 단순한 반복 구문도 있다. 그것이 while 문이다.&lt;/p&gt;
&lt;p&gt;while은 조건이 붙는 위치에 따라 두 가지 방법이 있다. (후자는 do while 문이라고 하기도 한다).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while의 기본형&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;조건&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;반복&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;do while의 기본형&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;반복&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;처리&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;......&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;조건&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;while 이 후에 조건이 되는 것을 작성한다. 이 조건이 true이면 반복을 실행하고, false가 되면 반복을 빠져 나가는  간단한 구조이다.&lt;/p&gt;
&lt;p&gt;간단하면서도 왜 2개의 작성법이 있는가. 그것은 조건을 체크하는 타이밍의 차이이다. 전자(구문 최초에 while이 있는 것)은 먼저 while 뒤에 있는 조건을 확인하고 그것이 true라면 다음 {} 부분을 실행한다.&lt;/p&gt;
&lt;p&gt;후자(구문의 마지막에 while이 있는 것)은 반복 수행하는 {} 부분을 먼저 실행하고 끝나고 나서 while 조건을 확인한다. 결국은 처음부터 조건이 false하더라도 반드시 한번은 {} 부분을 실행하게 된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 간단한 반복을 비교해 보자&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;index:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;index:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;전자는 index:1 ~ index:10 형태로 값을 얻을 수 있다. 반면 후자는 index:0~index:9 형태이다. 조건문에 ++로 변수를 증가 시키고 있기 때문에, 조건이 앞에 있는지 뒤에 있는지에 따라 숫자가 벗어난다.&lt;/p&gt;
&lt;p&gt;이런 식으로 섬세한 동작을 보면 양자는 미묘하게 달라진다. 개인적으로는 기본은 while에서 작성, do while은 특별한 사정이 있는 경우에만 사용할 것이라고 생각두면 좋은 것 같다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수</title>
      <link>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;함수는 처리를 모와서 호출할 수 있게 하는 것이다. 프로그램을 구조화하는 중요한 기능이다. Swift의 함수는 상세한 점까지 사용하기 쉽게 되어있다. 매우 독특한 기능이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | 함수 정의 및 사용</title>
      <link>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;지금까지는 단지 작성한 프로그램을 순차적으로 실행하는 것만 예제만 있었지만, 프로그램이라는 것은 물론 그렇게 간단한 것은 아니다.&lt;/p&gt;
&lt;p&gt;사용성이 높은 처리는 하나의 묶음으로 만들어 언제 어디서라도 호출할 수 있도록 해야 한다. 이를 위해 준비되어 있는 것이 &amp;ldquo;함수&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;Swift는 많이 사용되는 처리는 함수로 정의하고, 호출할 수 있다. 이것은 다음과 같은 형태로 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func 함수명(인수) -&amp;gt; 반환 값 {
    ...... 수행할 작업 ......
    return 값
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;함수명 다음에 ()로 인수의 지정한다. 이 인수는 &amp;ldquo;변수명:유형&amp;quot;과 같이 이름과 유형을 세트로 작성한다. 복수의 인수가 있는 경우 쉼표로 구분하여 작성한다.&lt;/p&gt;
&lt;p&gt;-&amp;gt; 다음에는 그 함수의 반환 값의 유형을 작성한다. 값을 반환하지 않는 경우에는 &amp;ldquo;Void&amp;quot;를 지정한다. 또는 반환 값의 지정을 생략해도 자동으로 Void 판단한다.&lt;/p&gt;
&lt;p&gt;반환 값은 return을 사용하여 작성한다. Void가 지정된 경우는 return는 필요없다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 함수의 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서는 정수를 인수로 호출하면 1부터 입력된 인수값까지의 합을 계산하여 반환하는 함수 calc를 선언하고 이를 호출한다. 여기에서는 calc(num : Int)와 같은 형태로 작성하고 Int형의 값을 하나 인수에 전달하고 있다. 또한 -&amp;gt; Int라고 지정되어 있기에, Int 형의 값이 반환되는 것을 알 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | 인수의 외부명</title>
      <link>https://www.devkuma.com/docs/swift/%EC%9D%B8%EC%88%98%EC%9D%98-%EC%99%B8%EB%B6%80%EB%AA%85/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%9D%B8%EC%88%98%EC%9D%98-%EC%99%B8%EB%B6%80%EB%AA%85/</guid>
      <description>
        
        
        &lt;p&gt;인수는 가인수이 되는 변수명 외에 외부명을 가질 수 있다. 이는 아래와 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(외부명 변수명:유형)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 외부명이라는 것은 그 함수를 호출할 때 인수에 이름을 지정하는데 사용한다. 이는 실제 예제을 보면 알 수 있다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 함수의 사용 예제가 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tax는 가격과 세율을 인수로 지정해 호출하면 세금 포함 가격을 계산하여 반환하는 함수이다. 여기에서는 다음과 같이 인수 부분을 정의하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;인수명은 p와 r이다. 함수 내부에서는 이러한 변수를 사용하여 계산하고 있다. 그럼 이를 호출하는 부분을 살펴 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;외부명으로 price과 rate를 지정하고 값을 작성하고 있다. 이렇게 하면 각각 인수의 역할은 명확하다.&lt;/p&gt;
&lt;p&gt;복수의 인수를 가지는 함수의 경우, 어떤 인수가 무슨 역할을 하는지 외형으로는 알 수 없다. 그 함수의 레퍼런스 등으로 조사해 확인하고, 호출해 보지 않으면 쉽게 알 수 없다. 이 외부명을 사용하면, 하나씩 하나의 인수 역할을 한눈에 알 수 있다. 이렇게 함으로써 함수 호출에 관련하는 버그를 최초화 할 수 있다. 외부명을 사용하지 않으면 함수 호출은 아래 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 작성을 하면 코드를 작성한 본인 이외는 무슨 일을 하고 있는지 모른다. 외부명은 코드를 보다 알기 쉽게하는데 필수적인 기능이라고 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;숏헤드shorthand에-대해&#34;&gt;숏헤드(shorthand)에 대해&lt;/h2&gt;
&lt;p&gt;외부명이 중요하다는 것을 알았다. 그렇지만 &amp;ldquo;일일이 외부명과 변수명을 2개나 이름을 작성하는 것은 귀찮은 일이다&amp;quot;라고 생각하는 사람도 많을 것이다. 이 경우는 변수명을 그대로 외부명으로 사용할 수 있도록 할 수 있다. 예를 들어, 예제 tax 함수라면 이렇게 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;인수의 변수명에 외부명만 사용하였다. 이것은 숏헤드(shorthand)라는 설정이다. 이렇게 하면 변수명이 그대로 외부명으로 사용할 수 있게 된다. 함수 내에서 사용할 변수명과 외부명이 같기 때문에 소스 코드도 깔끔해지고 가독성 높아진다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift</title>
      <link>https://www.devkuma.com/docs/swift/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/swift/swift.jpg&#34; alt=&#34;Swift&#34;&gt;&lt;/p&gt;
&lt;p&gt;Swift(스위프트)는 Mac OS X 및 iOS (iPhone, iPad) 앱을 만들기 위해 새롭게 개발 된 프로그래밍 언어이다. Swift의 기본을 배워서 앱 개발에 도전해 보자!&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | 여러 반환값와 튜플(tuple)</title>
      <link>https://www.devkuma.com/docs/swift/%EC%97%AC%EB%9F%AC-%EB%B0%98%ED%99%98%EA%B0%92%EC%99%80-%ED%8A%9C%ED%94%8C-tuple/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%97%AC%EB%9F%AC-%EB%B0%98%ED%99%98%EA%B0%92%EC%99%80-%ED%8A%9C%ED%94%8C-tuple/</guid>
      <description>
        
        
        &lt;p&gt;Swift 함수는 매우 재미있는 특징을 가지고 있다. 그 중에서도 중요한 것은 여러 값을 반환하는 기능이다.&lt;/p&gt;
&lt;p&gt;이것은 사실 Swift 함수에 비밀이 있는 것은 아니다. Swift 준비되어 있는 &amp;ldquo;튜플(tuple)&amp;ldquo;값에 비밀이 있다.&lt;/p&gt;
&lt;p&gt;튜플은 여러 값을 한곳에 모아 처리하는 것이다. 이는 ()를 사용하여 쉽게 작성할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(이름:값, 이름:값, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 생성된 튜플은 그것을 할당한 변수 등에서 이름을 지정하고 값을 얻어 낼 수 있다. 예를 들어, 이런한 형태이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;person&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서 name과 age라는 값으로부터 튜플로 변수 person에 대입하고 있다. 이 값은 person.name과 person.age 형태로 꺼낼 수 있게 된다.&lt;/p&gt;
&lt;h2 id=&#34;튜플tuple을-반환-값으로-사용&#34;&gt;튜플(tuple)을 반환 값으로 사용&lt;/h2&gt;
&lt;p&gt;이 튜플의 개념을 알면 &amp;ldquo;여러 값을 반환&amp;quot;하는 함수도 간단하게 만들 수 있다.&lt;/p&gt;
&lt;p&gt;아래 예제를 살펴 보도록 하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func tax(price:Int) -&amp;gt; (kakaku:Int, zei:Int) {
    let zei:Int = Int(Double(price) * 0.08)
    let kakaku:Int = price - zei
    return (kakaku:kakaku, zei:zei)
}

var res = tax(10000)
res.kakaku
res.zei
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 다음과 같이 반환 값을 지정할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-&amp;gt; (kakaku:Int, zei:Int)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 kakaku과 zei 두 값을 되는 튜플을 반환 값으로 지정된다. 그 후로는 함수의 반환값을 할당한 변수에서 kakaku과 zei값을 꺼내 사용하면 된다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | 인수의 기본값</title>
      <link>https://www.devkuma.com/docs/swift/%EC%9D%B8%EC%88%98%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%9D%B8%EC%88%98%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92/</guid>
      <description>
        
        
        &lt;p&gt;함수의 인수에 대해서 이 외에도 배워 두어야 하는 기능이 있다. 여기서는 &amp;ldquo;기본(default)값&amp;quot;에 대해 설명한다.&lt;/p&gt;
&lt;p&gt;함수의 인수에는 미리 기본값을 지정해 둘 수 있다. 이는 인수에 마련한 변수에 등호(=)로 값을 대입하는 것만으로 가능하다. 아래와 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func 함수명(인수명:유형 = 기본값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기본값을 지정하면 인수명은 자동으로 외부명이 되고, 외부에서 지정할 수 있게 된다. 그래서 샵(#)을 붙여 숏헤드 지정을 할 필요가 없다.&lt;/p&gt;
&lt;p&gt;기본값을 지정하는 것은 &amp;ldquo;인수는 생략해도 좋다&amp;quot;라는 것이 된다. 결국은 함수를 호출 할 때, 그 인수가 있는지 없는지 몰라도 된다는 것이다 (없어도 상관없으니까). 이를 위해 기본값을 지정한 인수는 반드시 외부명을 지정해서 그것이 어떤 인수 값인지 알 수 있게 한다.&lt;/p&gt;
&lt;p&gt;아래에 기본값의 이용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func tax(#price:Int, rate:Double = 0.08) -&amp;gt; Int {
    return Int(Double(price) * (1.0 + rate))
}
 
var res:Int = tax(price:10000, rate:0.08)
var res3:Int = tax(price:12300)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;rate 인수를 생략하면 자동으로 0.08이 사용된다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | 가변 인수</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%88%98/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;인수로 전달되는 항목이 몇개 인지 모르다&amp;hellip;&amp;hellip;라는 경우에 사용되는 것이 가변 인수이다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(인수명:유형 ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 작성된 인수는 여러 값을 쉼표(,)로 연결해 쓸 수 있다. 호출된 함수 측에서는 이러한 값은 배열에 모은다. 즉, 가변 인수는 &amp;ldquo;배열을 인수로 지정하는 것&amp;quot;이라고 생각하면 좋을 것이다.&lt;/p&gt;
&lt;p&gt;아래에 가변 인수의 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;calc(nums:Int...) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이와 같이 인수를 지정하고 있다. 그 호출 부분을 보면 아래와 같이 되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;calc(1,2,3,4,5) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;보면 알 수 있듯이, nums에 여러 값이 작성되어 있다. 이런 식으로 많은 값을 인수로 전달할 수 있는 것이 가변 인수이다. 함수의 처리를 보면,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for num in nums {...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이와 같이 인수 값을 for로 반복 처리하고 있다. 가변 인수의 값은 요소 수가 일정하지 않은 배열로, 이 같이 for문으로 처리하는 것이 기본이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 | INOUT 인수</title>
      <link>https://www.devkuma.com/docs/swift/inout-%EC%9D%B8%EC%88%98/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/inout-%EC%9D%B8%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;Swift의 함수에서 다른 하나 더 알아야 하는 것이 &amp;ldquo;INOUT&amp;quot;인수이다. 이는 전달된 인수 자체를 다시 작성할 수 있는 특수 인수이다. 이것은 인수 전에 &amp;ldquo;inout&amp;quot;을 붙여야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;inout&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;인수명&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;유형&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 INOUT 인수에 지정된 변수는 변수명 앞에 &amp;ldquo;&amp;amp;&amp;ldquo;를 붙인다. 또한, 당연하지만 리터럴 인수에 지정할 수 없다 (왜냐하면 리터럴은 고쳐 쓸 수 없기 때문이다).&lt;/p&gt;
&lt;p&gt;아래에 INOUT 인수에 대한 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;inout&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Void&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 함수의 정의를 다음과 같이 작성하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;inout&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Double&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.08&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;첫 번째 price가 INOUT 인수로 되어 있다. 반환 값은 Void이다. 이 함수의 호출을 보면 이렇게 되어 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;tax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 변수 num의 값이 직접적으로 변경된다. 값을 돌려주는 것이 함수의 기본이지만, 이렇게 직접 고쳐 쓰는 것이 가능하게 된 것으로, 값 자체를 변경하는 변수를 사용할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본</title>
      <link>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B3%B8/</guid>
      <description>
        
        
        &lt;p&gt;객체 지향 언어에서는 &amp;lsquo;클래스&amp;rsquo;를 정의하여 객체를 만들고 사용할 수 있다. 이 &amp;ldquo;클래스&amp;quot;의 기본적인 사용법에 대해 알아보겠다. 그리고, 클래스의 특성을 더욱 이해하기 위해 &amp;ldquo;상속&amp;rdquo;, &amp;ldquo;오버라이드&amp;rdquo;, &amp;ldquo;Computed 속성&amp;rdquo;, &amp;ldquo;클래스 속성/클래스 메소드&amp;quot;에 대해서도 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 클래스(class) 정의</title>
      <link>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-class-%EC%A0%95%EC%9D%98/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-class-%EC%A0%95%EC%9D%98/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 객체 지향 언어이다. 이는 물론 객체(object)를 사용할 수 있다는 의미가 된다.&lt;/p&gt;
&lt;p&gt;Swift의 객체 지향은 일반적으로 &amp;ldquo;클래스 기반&amp;quot;라는 것이다. &amp;ldquo;클래스&amp;quot;는 객체의 설계도에 해당하는 것을 정의 해두고,이를 바탕으로 개체를 만든다.&lt;/p&gt;
&lt;p&gt;클래스에서 생성된 객체를 &amp;ldquo;인스턴스&amp;quot;라고 한다. Swift는 정의된 클래스에서 실제로 작업할 수 있는 인스턴스를 만들어 사용한다는 것이다.&lt;/p&gt;
&lt;p&gt;클래스에는 값을 저장하는 변수와 처리를 하는 함수를 넣어 둘 수 있다. 클래스에 제공되는 변수를 &amp;ldquo;속성(property)&amp;rdquo;, 클래스에서 제공되는 함수를 &amp;ldquo;메소드(method)&amp;ldquo;라고 한다.&lt;/p&gt;
&lt;h2 id=&#34;클래스의-정의&#34;&gt;클래스의 정의&lt;/h2&gt;
&lt;p&gt;클래스 정의의 가장 간단한 형태는 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class 클래스명 {
    ...... 속성과 메소드를 작성한다 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;class 〇〇&amp;quot;라고 작성한 후에 {}를 붙여 그 안에 클래스에 속성과 메소드를 작성하는 형태이다.&lt;/p&gt;
&lt;p&gt;아래에 &amp;ldquo;Helo&amp;quot;클래스의 정의를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import Cocoa

class Helo {
    var name = &amp;#34;Taro&amp;#34;;
    
    func say(){
        print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 클래스에는 name이라는 속성과 say라는 메소드가 작성되어 있다. 이것들이 Helo 클래스에 제공되는 기능이라는 것이다.&lt;/p&gt;
&lt;p&gt;say 메소드 안에 name 속성이 사용되고 있다. 이런 식으로 클래스에 있는 메소드의 내부는 그 클래스에 있는 속성과 메소드를 그대로 사용할 수 있도록 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;어시스트-에디터assistant-editer&#34;&gt;어시스트 에디터(Assistant Editer)&lt;/h2&gt;
&lt;p&gt;여기에는 println이라는 것을 사용하고 있는데, 이것은 값을 표준 출력으로 내보내는 함수이다. Xcode의 플레이 그라운드에서 실행하는 경우, &amp;ldquo;어시스트 에디터(Assistant Editer)&amp;ldquo;라는 것을 표시하는 것이 편리하다.&lt;/p&gt;
&lt;p&gt;Xcode의 [View] 메뉴에서 [Assistant Editor]-[Show Assistant Editor]를 선택한다. 화면 오른쪽에 새로운 영역이 표시된다. 이것이 &amp;ldquo;어시스트 에디터&amp;quot;이다. println 등이 실행되면 여기에 &amp;ldquo;Console Output&amp;quot;라는 항목이 자동으로 표시되고 println한 결과가 나타나게 된다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 클래스 이용</title>
      <link>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B4%EC%9A%A9/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B4%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;클래스를 실제로 사용하기 위해서는 해당 클래스를 바탕으로 &amp;ldquo;인스턴스&amp;quot;를 만들고 그 안에 속성과 메소드를 이용하는 방법을 이해하지 않으면 안된다.&lt;/p&gt;
&lt;h2 id=&#34;인스턴스-생성&#34;&gt;인스턴스 생성&lt;/h2&gt;
&lt;p&gt;클래스에서 인스턴스를 생성하려면 해당 클래스명을 함수처럼 호출할 뿐이다. 예를 들어, &amp;ldquo;Abc&amp;quot;라고 하는클래스가 있었다면, 다음과 같이 인스턴스를 생성할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var obj:Abc = Abc();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;인수에는 일반적으로 아무것도 지정하지 않다 (인스턴스 작성 시에 인수를 지정할 수 있다. 이것은 나중에 설명하겠다). 이런 식으로 클래스명의 함수를 호출하여 인스턴스를 생성할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;속성--메소드-호출&#34;&gt;속성 / 메소드 호출&lt;/h2&gt;
&lt;p&gt;속성과 메소드의 호출은 인스턴스를 얻은 변수 뒤에 점(.)으로 속성 및 메서드를 호출하도록 작성한다. 예를 들어, 클래스 Abc에 efg라는 속성 xyz라는 메소드가 있었다고 하면 이런 식으로 사용할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var obj:Abc = Abc();
var x = obj.efg; // efg 값을 추출한다
obj.efg = 〇〇; // efg 값을 변경한다
obj.xyz(); // xyz를 호출한다
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이전에 Helo 클래스를 사용하는 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import Cocoa

class Helo {
    var name = &amp;#34;Taro&amp;#34;;
    
    func say(){
        print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34;);
    }
}

var obj:Helo = Helo();
obj.say();
 
obj.name = &amp;#34;Hanako&amp;#34;;
obj.say();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 Helo 인스턴스를 만들어 say 메소드로 메시지를 표시한다. 그 후에 인스턴스의 name 속성을 다시 변경하여 say를 호출한다.&lt;/p&gt;
&lt;p&gt;인스턴스를 생성할때, 그 안에 클래스의 내용이 통째로 제공된다. 이는 여러 인스턴스를 만들 때마다 각 인스턴스마다 독립적으로 속성이 저장되는 것을 의미한다. 예를 들어, 이 예제라면 인스턴스마다 name 값은 다르게 설정할 수 있다. 그렇게 되면, 같은 Helo 클래스에서 만든 인스턴스이기에 say로 표시되는 메시지는 인스턴스마다 달라진다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 클래스 상속</title>
      <link>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D/</guid>
      <description>
        
        
        &lt;p&gt;클래스를 사용하면 무엇이 유용한 것인가. 관계가 있는 함수나 변수를 한곳에 모아 넣을 수 있다는 것도 있지만, 그 이상으로 큰 것은 &amp;ldquo;프로그램의 재사용을 쉽게 할 수있다&amp;quot;라는 것이다. 클래스를 복사하면 어디서나 동일한 기능을 사용할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;이 &amp;ldquo;클래스의 재사용&amp;quot;라는 것을 크게 확장하는 것이 &amp;ldquo;상속&amp;quot;라고 하는 기능이다. 상속은 이미 클래스의 모든 기능을 이어 받아 새로운 클래스를 정의하는 것이다. 즉, 이미 편리한 클래스가 있으면, 그것을 계승하여 자신의 고유한 기능을 덧붙여서 새로운 클래스를 쉽게 만들 수 있다.&lt;/p&gt;
&lt;p&gt;상속을 사용한 클래스의 정의는 아래와 같은 식으로 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class 클래스명:슈퍼 클래스명 {
    ...... 클래스의 내용 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;상속 근원이 되는 클래스를 &amp;ldquo;슈퍼 클래스&amp;quot;라고 한다. 또한 그것을 계승하여 만든 클래스를 &amp;ldquo;서브 클래스&amp;quot;라고 한다. 서브 클래스는 슈퍼 클래스의 기능을 모두 사용할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;실제로 상속을 사용해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Cocoa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Helo&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Hello&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Helo&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;YAMADA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;say2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hi,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Hello&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Hello&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;TANAKA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;say2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위에 예제은 Helo 클래스를 상속한 &amp;lsquo;Hello&amp;rsquo;클래스를 만들어 사용하고 있다. Hello 클래스의 인스턴스에는 Hello에 추가한 name2 속성과 say2 메소드를 사용할 뿐만 아니라, 슈퍼 클래스의 Helo의 name이나 say도 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;Hello 클래스에 추가한 say2 메소드를 보면, 그 속에서 슈퍼 클래스에 있는 name 속성을 사용하는 것을 알았다. 이런 식으로 슈퍼 클래스에 있는 것은 모두 그 클래스에 있는 것으로 간주하고 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;슈퍼-클래스의-메소드-호출&#34;&gt;슈퍼 클래스의 메소드 호출&lt;/h2&gt;
&lt;p&gt;아래에 또 다른 상속 샘플을 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Friend&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BestFriend&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Friend&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;you&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BestFriend&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;you&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;you&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 Friend 클래스를 상속해서 BestFriend 클래스를 만들고 있다. 보면 알 수 있듯이, BestFriend에는 name 속성은 없지만 문제없이 동작한다. 슈퍼 클래스의 Friend에 name이 있기 때문에 BestFriend에도 작동하는 것이다.&lt;/p&gt;
&lt;p&gt;BestFriend의 이니셜라이저에는 &amp;ldquo;super.init(name:name)&amp;ldquo;라는 문장이 있는데, 이 &amp;ldquo;super&amp;quot;는 슈퍼 클래스를 나타내는 키워드이다. 이렇게 하여 슈퍼 클래스인 Friend의 이니셜라이저를 호출한다. 슈퍼 클래스의 메소드는 모두 이처럼 &amp;lsquo;super.〇〇&amp;rsquo;라는 형태로 호출 할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 메소드 오버라이드(override)</title>
      <link>https://www.devkuma.com/docs/swift/%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-override/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-override/</guid>
      <description>
        
        
        &lt;p&gt;상속을 이용하면 이미 있는 클래스에 새로운 기능을 추가할 수 있는 것은 알았다. 하지만 그것만으로는 부족한다. 이미 있는 클래스의 기능을 변경할 수 있어야 한다.&lt;/p&gt;
&lt;p&gt;여기에는 &amp;lsquo;오버라이드(override)&amp;lsquo;라는 기능을 사용한다. 오버라이드는 슈퍼 클래스에 있는 메소드를 재정의하는 기술이다. 이것은 메소드의 정의를 다음과 같이 작성하면 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;override func 메소드명() {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;처음에 override를 붙이는 것으로, 슈퍼 클래스의 메소드를 새롭게 정의된 메소드로 덧쓰기를 한다. 이렇게 하면, 그 메소드를 호출했을 때의 동작을 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;오버라이드를 사용하는 경우, 메소드명뿐만 아니라 인수와 반환 값도 정확하게 슈퍼 클래스의 메소드와 동일해야 한다.&lt;/p&gt;
&lt;p&gt;아래에 실제 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import Cocoa

class Helo {
    var name:String = &amp;#34;Taro&amp;#34;;
    
    func say(){
        print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34;);
    }
}

class Hello:Helo {
    var name2:String = &amp;#34;YAMADA&amp;#34;;
    
    override func say(){
        print(&amp;#34;Hi,&amp;#34; + name + &amp;#34;-&amp;#34; + name2 + &amp;#34;!&amp;#34;);
    }
}

var obj:Hello = Hello();
obj.say();

obj.name = &amp;#34;Hanako&amp;#34;;
obj.name2 = &amp;#34;TANAKA&amp;#34;;
obj.say();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 이전에 언급한 예제를 이용하여 say 메서드를 재정의하는 형태로 변경한 것이다. say 메소드를 호출하면 Helo 클래스에있는 say 대신에 Hello에서 재정의되는 say가 호출되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;오버라이드-상세&#34;&gt;오버라이드 상세&lt;/h2&gt;
&lt;p&gt;상속을 이용하면 슈퍼 클래스의 속성과 메소드를 그대로 사용할 수 있다. 예를 들어 슈퍼 클래스의 기능을 서브 클래스에서 변경하려는 생각도 있을 것이다. 그럴 때 사용되는 것이 &amp;lsquo;오버라이드&amp;rsquo;이다.&lt;/p&gt;
&lt;p&gt;오버라이드는 슈퍼 클래스에 있는 기능을 서브 클래스에서 덮어 변경하는 것이다. 예를 들어 슈퍼 클래스 &amp;lsquo;A&amp;rsquo;라는 메소드가 있었을 때, 그 서브 클래스에서 &amp;ldquo;A&amp;quot;를 호출하면 슈퍼 클래스에 있는 A라는 메소드가 그대로 실행된다. 상속을 했기 때문이다.&lt;/p&gt;
&lt;p&gt;그럼, 서브 클래스에 똑같은 &amp;lsquo;A&amp;rsquo;라는 메소드가 있다면 어떻게 될까? 그러면 서브 클래스에서 &amp;ldquo;A&amp;quot;를 호출하면, 서브 클래스에 추가한 A 메소드가 호출하고, 슈퍼 클래스에 있는 A는 더 이상 호출되지 않을 것이다. 이것이 오버라이드 개념이다.&lt;/p&gt;
&lt;p&gt;오버라이드하는 메서드는 메서드의 시작 부분에 &amp;lsquo;override&amp;rsquo;라는 수식자를 지정한다. 또한 메소드명, 인수 , 반환 값은 모두 동일해야 한다. 어떤 거라도 다르면, 그것은 &amp;ldquo;다른 메소드&amp;quot;라고 판단되어서 오버라이드가 되지 않는다.&lt;/p&gt;
&lt;p&gt;아래에 또 다른 오버라이드 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Friend {
    var name:String
     
    init(name:String) {
        self.name = name
    }
     
    func printData() {
        println(&amp;#34;\(self.name)&amp;#34;)
    }
}
 
class BestFriend : Friend {
    var age:Int
     
    init(name:String, age:Int) {
        self.age = age
        super.init(name:name)
    }
     
    override func printData() {
        println(&amp;#34;\(self.name) (\(you.age))&amp;#34;)
    }
}
 
var you = BestFriend(name: &amp;#34;Taro&amp;#34;, age: 30)
you.printData()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 printData라는 메소드를 하위 클래스에서 오버라이드 한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 이니셜라이저</title>
      <link>https://www.devkuma.com/docs/swift/%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80/</guid>
      <description>
        
        
        &lt;p&gt;여기까지 인스턴스 생성은 모든 Helo();와 같이 인수없이 만들었다. 이 인스턴스를 만들 때 필요한 값 등을 인수로 전달할 수 있다면 매우 편리할 것이다.&lt;/p&gt;
&lt;p&gt;이런 때에 이용되는 것이 &amp;ldquo;이니셜라이저(initialize)&amp;ldquo;이다. 이것은 인스턴스를 만들 때 자동으로 호출되는 초기화 처리 전용의 메소드이다. 이 이니셜라이저는 다음과 같이 정의한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;init (인수) {
    ...... 초기화 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;func init로 쓸 필요는 없다. 단, init만 작성하면 된다. 이니셜라이저는 특별한 방법이므로 func 정의할 필요가 없는 거다.&lt;/p&gt;
&lt;p&gt;이 init의 ()에 인수를 선언하면 인스턴스 생성시에 값을 전달할 수 있게된다. 아래에 간단한 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import Cocoa

class Helo {
    var name:String;
    
    init(name:String){
        self.name = name;
    }
    
    func say(){
        print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34;);
    }
}

var obj:Helo = Helo(name:&amp;#34;Taro&amp;#34;);
obj.say();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 Helo 클래스에서 init(#name:String) 형태로 이니셜라이저가 작성되어 있다. 이렇게 하면 인스턴스 생성시에는 Helo(name:&amp;ldquo;Taro&amp;rdquo;);와 같이 인수를 지정하여 쓰면 된다.&lt;/p&gt;
&lt;p&gt;또한, 이 이니셜라이저에서 인수로 전달된 변수 name을 Helo 클래스의 name 속성에 할당하기 위해, &amp;ldquo;self.name&amp;quot;라고 작성을 하고 있다. 이 &amp;ldquo;self&amp;quot;는 인스턴스 자신을 나타내는 특별한 값이다. 이와 같이 작성하는 것으로, &amp;ldquo;이 인스턴스 자신의 name 속성&amp;quot;을 지정하고 있다. 클래스 정의에서 자주 사용하는 것이므로 모두 기억하도록 하자.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | Computed 속성</title>
      <link>https://www.devkuma.com/docs/swift/computed-%EC%86%8D%EC%84%B1/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/computed-%EC%86%8D%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;상속 외에도 이것은 기억 두지 않으면 안되는 기능이 몇 가지 있다. 그것에 대해서도 설명하겠다. 먼저 &amp;ldquo;Computed 속성&amp;quot;을 설명하겠다.&lt;/p&gt;
&lt;p&gt;속성이라는 것은 클래스에 값을 보관할 변수이다. 이것은 그대로 값을 교체할 수 있기 때문에, 어떤 값이 될지 모른다. 여기서 값의 입출력을 프로그래밍으로 제어할 수 있도록 한 것이 Computed 속성이다.&lt;/p&gt;
&lt;p&gt;Computed 속성은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var 속성 : 유형 {
    get {
        ...... 처리 ......
        return 값
    }
    set {
        ...... 처리 ......
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;속성의 선언 뒤에 {}가 있고, 그 안에 get 및 set이라는 것이 작성하고, 여기에서 값을 읽고 쓰기 위한 처리를 작성한다. get만 작성하고 set를 작성하지 않으면, 값을 얻기만 가능하고 수정할 수 없는 속성이 된다. 반대로 set만 작성하면, 값 변경만 가능하고 얻을 수 없는 속성이 된다.&lt;/p&gt;
&lt;p&gt;아래 Computed 속성의 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Friend&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;old&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;old&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;newValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;old&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;newValue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;old&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;you&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Friend&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;you&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 age라는 Computed 속성을 사용하고 있다. 실제 값은 old라는 속성에 보관하고 있다. Computed 속성은 이 처럼 실제 값을 보관해 두기 위한 장소를 따로 마련할 필요가 있는 것이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 클래스 기본 | 유형 속성 및 유형 메소드</title>
      <link>https://www.devkuma.com/docs/swift/%EC%9C%A0%ED%98%95-%EC%86%8D%EC%84%B1-%EB%B0%8F-%EC%9C%A0%ED%98%95-%EB%A9%94%EC%86%8C%EB%93%9C/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%9C%A0%ED%98%95-%EC%86%8D%EC%84%B1-%EB%B0%8F-%EC%9C%A0%ED%98%95-%EB%A9%94%EC%86%8C%EB%93%9C/</guid>
      <description>
        
        
        &lt;p&gt;일반적 속성과 메서드는 인스턴스를 생성해야만 사용할 수 있다만, 클래스에서 바로 직접 이용할 수 있는 속성과 메소드도 제공할 수 있다. 이는 &amp;ldquo;유형 속성(type property)&amp;rdquo;, &amp;ldquo;유형 메소드(type method)&amp;ldquo;라고 한다.&lt;/p&gt;
&lt;p&gt;유형 속성과 유형 메소드를 선언할 때는 앞에 &amp;ldquo;class&amp;quot;라는 수식자를 붙여 클래스에 배치된다. 그러면 클래스에서 직접 호출될 수 있다.&lt;/p&gt;
&lt;p&gt;유형 속성 및 유형 메소드를 사용할 때 몇 가지 주의해야 할 점이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;유형 속성으로 만들 수 있는 것은 &amp;ldquo;Computed 속성&amp;quot;이다. 보통의 변수에 할당하는 속성은 제공되지 않는다. 또한 클래스에 저장할 변수를 제공되지 않기 때문 때문에, Computed 속성의 set도 거의 사용할 수 없다고 생각해도 좋을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유형 메소드 내에서 이용할 수 있는 것은 유형 메소드 및 유형 속성뿐이다. 일반 (인스턴스에서 사용하는) 속성과 메소드는 사용할 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에 실제 사용 예를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Exchange {
    class var rate:Double {
        return 1005.0
    }
    
    class func DollarToWon(d:Double)-&amp;gt;Int {
        return Int(d * rate)
    }
    
    class func WonToDollar(y:Int)-&amp;gt;Double {
        return Double((y * 100) / Int(rate)) / 100
    }
}

print(Exchange.DollarToWon(1.5))
print(Exchange.WonToDollar(1500))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 원화에서 달러로, 달러에서 원화로 환산하면 Exchange 클래스를 준비했다. rate 유형 속성과 계산을 할 두 가지 유형 메소드를 제공하고 있다. 이러한 계산을 중심으로한 클래스는 일일이 인스턴스를 만들 필요가 없기 때문에, 클래스 메소드로 제공하는 편이 효율적으로 사용할 수 있는 것이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전</title>
      <link>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%82%AC%EC%A0%84/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EA%B3%BC-%EC%82%AC%EC%A0%84/</guid>
      <description>
        
        
        &lt;p&gt;다수의 값을 함께 관리하는 것이 &amp;lsquo;배열&amp;rsquo;과 &amp;lsquo;사전(Dictionary) &amp;ldquo;이다. 이에 대해 기본 작업에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전 | 배열의 기본 사항</title>
      <link>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD/</guid>
      <description>
        
        
        &lt;p&gt;여러 값을 한꺼번에 관리하는 데 사용되는 것이 &amp;lsquo;배열&amp;rsquo;이다. 배열은 동일한 유형의 값을 다수 정리하여 보관한다. 배열에는 여러 값을 저장할 수 있는 장소가 준비되어 있어, 이를 0부터 시작되는 일련 번호(인덱스 번호)가 붙여진다. 이를 이용하여 특정 번호의 값을  얻거나, 다른 값을 저장하거나 하는 것이 가능하다.&lt;/p&gt;
&lt;p&gt;배열은 최초에 &amp;ldquo;몇 개의 값을 저장할지&amp;quot;를 지정해서 생성한다. 예를 들어 &amp;ldquo;10개 저장할 수 있는 배열&amp;quot;을 만들면, 인덱스 번호 0~9의 저장고(1~10가 아니다는 것을 주의하자!)에 값을 저장할 수 있다. 저장고가 확보되지 않은 번호를 지정하여 값을 읽거나 쓰려고 하면 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;그럼 배열의 기본적인 사용법을 간단하게 정리해 보겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;배열 만들기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var 변수:유형 = [유형] ()
var 변수:유형 = [유형](count : 수, repeatedValue : 값)
var 변수:유형 = [값 1, 값 2, ...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;값 읽고 쓰기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 배열[번호]
배열[번호] = 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;배열은 유형으로 유형명의 앞뒤를 [] 기호로 묶는다. 예를 들어 String의 값을 저장하는 배열이라면, [String]과 같이 유형을 지정한다.&lt;/p&gt;
&lt;p&gt;배열의 생성은 &lt;a href=&#34;&#34;&gt;유형&lt;/a&gt; 이렇게 해서 만들 수 있다. 그러나 이것으로 만들어지는 것은 빈공간의 배열이므로 일반적으로 제공하는 보관 저장소의 수와 초기 값의 값을 지정하여&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[유형] (count : 준비하는 보관 장소의 수, repeatedValue : 초기 값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런 상태로 지정해 작성한다. 또는, [값1, 값2, &amp;hellip;]과 같이 배열을 리터럴로 작성하여 만들 수 있다. 예를 들어, 다음의 2개는 같은 배열이 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var arr1 : [Int] = [Int] (count : 10, repeatedValue : 0)
var arr2 : [Int] = [0,0,0,0,0,0,0,0,0,0]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 정도의 요소 수인 경우에는 리터럴으로 작성하는 것이 편리할 것이다. 그러나 예를 들어 &amp;ldquo;저장할 수 있는 요소의 수가 1만개&amp;quot;라고 경우에는 [0,0,0 &amp;hellip;&amp;hellip;]와 같이 하는 것이 불가능하기 때문에, (count : 10000, repeatedValue : 0)로 작성하는 것이 간단하다.&lt;/p&gt;
&lt;p&gt;또한 Swift의 특징으로, 대입하는 값에서 유형이 명확하게 알 수 있다면 변수 선언에 있는 유형은 생략할 수 있어서, 위의 문장은 다음과 같이 작성해도 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var arr1 = [Int] (count : 10, repeatedValue : 0)
var arr2 = [0,0,0,0,0,0,0,0,0,0]
&lt;/code&gt;&lt;/pre&gt;
      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전 | 배열과 for-in 구문</title>
      <link>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EA%B3%BC-for-in-%EA%B5%AC%EB%AC%B8/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4%EA%B3%BC-for-in-%EA%B5%AC%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;배열은 인덱스 번호를 지정하여 하나씩 꺼내 처리할 수 있지만, 데이터 관리 등에 이용하는 경우에는 모든 요소를 동일하게 처리하는 작업이 필요하다.&lt;/p&gt;
&lt;p&gt;이러한 경우에 사용되는 것이 for-in 구문인데, 아래와 같은 방식이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for 변수 in 배열 {
    ...... 수행할 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for-in는 배열에서 순서대로 값을 꺼내 변수에 할당하고, 그 후에 {} 부분을 실행하는 것을 반복하고 있다. 이 {} 안에 변수를 사용하는 형태로 작업을 준비하면 배열의 모든 요소에 대해 동일한 작업을 할 수 있다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;total: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;배열 data의 값을 모두 꺼내서 합계하여 표시하는 것이다. for num in data라고 해서 data부터 순서대로 값을 num으로 꺼내 처리하고 있는 것을 알 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전 | 배열 요소 작업</title>
      <link>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EC%9E%91%EC%97%85/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EC%9E%91%EC%97%85/</guid>
      <description>
        
        
        &lt;p&gt;배열은 만들 때 요소 수를 지정하면 나중에 보관할 수 있는 저장고를 늘리거나 줄일 수 없다. &amp;hellip;&amp;hellip;라고 하는 것은 옛날 이야기이다. Swift는 나중에 배열의 요소를 변경할 수 있다. 그것은 배열 메소드를 이용한다.&lt;/p&gt;
&lt;p&gt;메소드? 그렇다 배열도 사실 오브젝트이다. 그래서 그 안에 포함되어 있는 속성과 메소드를 호출해 처리할 수 있다. 추가로, 연산자 덧셈하기 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;배열끼리 1개로 정리&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 배열 + 배열
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;배열의 끝에 값을 추가&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.append(값)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;지정된 위치에 값을 삽입&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.insert(값, atIndex : 삽입 위치)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;마지막 항목을 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.removeLast()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;지정된 인덱스 번호의 값을 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.removeAtIndex(번호)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;지정한 범위의 값을 제거&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.removeRange(레인지)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;모든 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;배열.removeAll()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;현재의 요소 수 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수:Int = 배열.count
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;첫 번째 요소, 마지막 요소 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 배열.first
변수 = 배열.last
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;지정 위치에 값을 삽입하는 insert는 atIndex에 삽입 위치를 나타내는 정수를 지정한다. 첫번째 앞(인덱스 0의 요소 앞)이 0, 인덱스 0과 1사이가 1, &amp;hellip;&amp;hellip;라는 식으로 지정된다.&lt;/p&gt;
&lt;p&gt;또한 지정 범위의 값을 삭제하는 removeRange와 제거하는 요소의 인덱스 번호를 사용하여 범위를 제공한다. 예를 들면, removeRange(3 &amp;hellip; 5)이라면, 인덱스 번호 3~5의 요소를 제거한다.&lt;/p&gt;
&lt;p&gt;우선, 여기 메소드와 속성이 대충 사용할 수 있게 되면, 배열도 자유 자재로 다룰 수 있게 될 것이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전 | 사전(Dictionary)</title>
      <link>https://www.devkuma.com/docs/swift/%EC%82%AC%EC%A0%84-dictionary/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%82%AC%EC%A0%84-dictionary/</guid>
      <description>
        
        
        &lt;p&gt;배열은 단순히 값을 순서대로 정렬하여 관리하는 것만으로, 저장된 값을 인덱스 숫자로 이용해서 꺼냈다. 때로는, 이 숫자보다는 이름으로 관리하는 편이 좋은 경우도 있다.&lt;/p&gt;
&lt;p&gt;그런 경우에 사용되는 것이 &amp;ldquo;사전 (Dictionary)&amp;ldquo;이다. 사전은 &amp;ldquo;키&amp;quot;라는 값을 사용하여 관리한다. 각각의 값은 인덱스 번호 대신에 키가 붙여져 있고, 키를 사용하여 값을 제거하거나 변경하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사전 만들기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var 변수 : [유형 : 유형] = [유형 : 유형]()
var 변수 : [유형 : 유형] = [키1 : 값1, 키2 : 값2, ...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;값에 액세스&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전 [키]
사전 다음 키 = 값
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;for-in-의한-반복&#34;&gt;for-in 의한 반복&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for (변수1, 변수2) in 사전 {
    ...... 반복 처리 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전은 []로 두 가지 데이터 유형을 지정한다. 이는 키와 값의 유형을 지정한다. 예를 들어, String의 키에 Int 형의 값을 보관한다면, [String : Int]와 같이 지정한다. 그대로, [String : Int]()를 변수에 할당하면 값이 아무것도 없는 공백의 사전이 만들어 진다.&lt;/p&gt;
&lt;p&gt;사전는 배열과 달리, 최초에 정해진 수의 저장 공간를 준비할 필요는 없다. 키를 사용하여 값을 저장하
면, 그 키가 사전에 추가된다(기존에 같은 키가 있으면, 그 값이 변경된다).&lt;/p&gt;
&lt;p&gt;for-in는, 배열과 사용 방법이  조금 다르다. for 후에 (변수1, 변수2)와 같이 튜플 변수를 제공한다. 이렇게하면 사전에서 검색한 요소의 키와 값을 각각의 변수에 할당한다.&lt;/p&gt;
&lt;p&gt;아래에 실제 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let data:[String:Int] = [&amp;#34;국어&amp;#34;:98,&amp;#34;수학&amp;#34;:76,&amp;#34;영어&amp;#34;:54]
var total = 0
for (key, val) in data {
    total += val
    println(&amp;#34;add \(key)&amp;#34;)
}
println(&amp;#34;Total: \(total)&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3과목의 점수를 사전에 모와서, 그것로 부터 요소를 꺼내서 합계를 계산한다. 실행하면 값을 꺼낼 때마다 &amp;ldquo;add 〇〇&amp;quot;과 키가 출력되고, 마지막으로 총 합계가 표시된다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 배열과 사전 | 사전을 활용하는 방법</title>
      <link>https://www.devkuma.com/docs/swift/%EC%82%AC%EC%A0%84%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%82%AC%EC%A0%84%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;p&gt;사전도 배열과 같은 개체이므로 속성과 메소드를 가지고 있다. 이 메소드들은 호출하여 사전의 내용을 조작할 수 있다. 그러나 배열과 달리 사전은 키를 지정하여 간단히 새로운 값을 추가할 수 있으므로 값의 삽입하는 메소드는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;지정된 키 값을 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;사전.removeValueForKey(키)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;모든 값을 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;사전.removeAll()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;키 값을 모두 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전.keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;보관되어 있는 값을 모두 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 = 사전.values
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;요소 수를 얻기&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수 : Int = 사전.count
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이들 중 좀 유심히 봐야 하는 것은 &amp;ldquo;keys&amp;quot;와&amp;quot;values&amp;quot;이다. 이 두개는 키와 값을 함께 저장하는 속성이다. 이 두개의 반환 값은 LazyBidirectionalCollection라는 생소한 컬렉션 클래스의 인스턴스인데, 이것은 그대로 for-in에서 차례로 값을 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;아래에 사전과 관련되 샘플을 보도록 하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var data:[String:Int] = [&amp;#34;국어&amp;#34;:98,&amp;#34;수학&amp;#34;:76,&amp;#34;영어&amp;#34;:54]
let keys = data.keys
let vals = data.values
for key in keys {
    println(key)
}
for val in vals {
    println(val)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사전에서 keys와 values에서 각 값을 얻어서, 그 값들 for-in으로 출력한다. 이로 보관된 키와 값이 표시되는 것을 확인할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 구조체, 열거형, 튜플</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%97%B4%EA%B1%B0%ED%98%95-%ED%8A%9C%ED%94%8C/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%97%B4%EA%B1%B0%ED%98%95-%ED%8A%9C%ED%94%8C/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 복잡한 구조를 가진 값이 많이 등장한다. 그 중에서, 구조체, 열거형(enum), 튜플(Tuple) 같은 것에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 구조체, 열거형, 튜플 | 구조체(struct)</title>
      <link>https://www.devkuma.com/docs/swift/%EA%B5%AC%EC%A1%B0%EC%B2%B4-struct/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EA%B5%AC%EC%A1%B0%EC%B2%B4-struct/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 클래스나 배열 등의 것 외에도 복잡한 성질을 가진 값이 있다. 이 대해 정리해 보겠다. 우선 &amp;ldquo;구조&amp;quot;부터 설명하겠다.&lt;/p&gt;
&lt;p&gt;구조체는 값을 저장한 속성과 처리를 구현하는 메소드이다. 구조체를 이용하려면 먼저 정의를 작성하고 이를 바탕으로 인스턴스를 생성한다. ~라고하면 &amp;ldquo;어? 클래스와 같은 아니야?&amp;ldquo;라고 생각할지도 모르겠다.&lt;/p&gt;
&lt;p&gt;분명히, 기본적인 구조와 구성는 클래스와 거의 동일하고, 속성과 메소드의 처리도 전혀 차이가 없자만, 섬세한 점에서 차이가 있다.&lt;/p&gt;
&lt;h2 id=&#34;정의-struct를-사용&#34;&gt;정의 struct를 사용&lt;/h2&gt;
&lt;p&gt;클래스의 정의는 &amp;ldquo;class 이름&amp;quot;형태로 작성되지만, 구조체의 경우 &amp;ldquo;struct 이름&amp;quot;이다. 속성과 메소드 작성은 클래스와 동일하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct 이름 {
    ...... 속성, 메서드의 작성 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;상속되지-않는다&#34;&gt;상속되지 않는다.&lt;/h2&gt;
&lt;p&gt;구조체는 클래스와 같은 객체 지향 구조를 가지고 있지 않는다. 어디까지나 &amp;ldquo;값과 처리를 하나로 묶기 위한 것&amp;quot;이며, 계승하여 새로운 구조체를 만들거나 할 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;이니셜라이저-필요-없다&#34;&gt;이니셜라이저 필요 없다.&lt;/h2&gt;
&lt;p&gt;클래스는 인자가 없는 기본 이니셜라이저는 자동으로 제공되지만, 속성 값을 인수 가진 이니셜라이저 등은 추가 작성하지 않으면 안되지만, 이 구조체는 속성을 포함하면 그 값을 인수로 가지는 이니셜라이저가 자동으로 생성된다.&lt;/p&gt;
&lt;h2 id=&#34;참조는-않는다&#34;&gt;참조는 않는다.&lt;/h2&gt;
&lt;p&gt;이것은 중요하다. 클래스의 경우, 인스턴스를 작성하면 해당 참조가 변수에 할당되었다. 인스턴스는 메모리의 어딘가에 보관되어 그 위치를 나타내는 값(참조)을 변수에 넣고 조작한다. 따라서 인스턴스가 포함된 변수를 다른 변수에 할당한 경우에도 참조가 복사 될 뿐이므로, 두 변수도 동일한 인스턴스를 참조한다.&lt;/p&gt;
&lt;p&gt;구조체는 이런 참조를 하지 않는다. 따라서 인스턴스를 할당한 변수를 반면에 변수에 할당하면 구조 자체가 복사되어 두 변수는 서로 다른 인스턴스를 갖게 된다. 이 차이는 확실히 알고 있어야 한다.&lt;/p&gt;
&lt;p&gt;아래에 간단한 구조의 이용 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyData&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Taro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;data2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hanako&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;data2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 MyData 구조를 만들고 그 인스턴스를 만들어 사용하고 있다. 인스턴스 생성은 MyData(age : 99, name : &amp;ldquo;Taro&amp;rdquo;)으로 하고 있지만, 이를 위한 이니셜라이저는 없다. Swift가 자동으로 이니셜라이저를 제공 해 주고 있는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;또한, 작성한 인스턴스 data를 그대로 data2에 대입하고 있지만, 속성 값을 변경하여 출력시켜 보면, 양자가 각각 별도의 인스턴스를 보유하고 있는 것을 알 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 구조체, 열거형, 튜플 | 열거형(enum)</title>
      <link>https://www.devkuma.com/docs/swift/%EC%97%B4%EA%B1%B0%ED%98%95-enum/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%EC%97%B4%EA%B1%B0%ED%98%95-enum/</guid>
      <description>
        
        
        &lt;p&gt;enum은 한국어로 &amp;lsquo;열거형&amp;rsquo;라는 한다. 이는 여러 값 중 하나를 선택하는 경우에 사용된다.&lt;/p&gt;
&lt;p&gt;이 enum은 &amp;ldquo;enum&amp;quot;라는 키워드를 사용하여 정의한다. 다음과 같은 형태이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum 이름 {
    case 값 1
    case 값 2
    ...... 중략 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;enum 후에 이름을 지정한다. 그리고 {} 내에 case를 사용하여 준비하는 값을 작성한다. 또는 case 후에 여러 값을 함께 쓸 수도 있다. 모두 동작은 동일하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum 이름 {
    case 값1, 값2, ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 생성된 enum은 &amp;lsquo;이름, 값&amp;rsquo;이라는 식으로 하여 값을 지정 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;enum은 &amp;ldquo;기본값&amp;quot;을 지정할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum 이름 : 유형 {
    case 값 1 = 기본값
    case 값 2 = 기본값
    ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;클래스의 상속과 같은 느낌으로, enum의 이름 뒤에 기본값의 형식을 지정한다. 그리고 각각의 값 뒤에 등호(=)로 기본값을 할당한다. 이렇게 생성된 enum 값은 &amp;ldquo;rawValue&amp;quot;라는 속성을 호출하는 것으로 기본값을 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 실제 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;enum Janken {
    case Choki
   case Goo
    case Paa
}

enum 가위바위보 : String {
    case Choki = &amp;#34;가위&amp;#34;
    case Goo = &amp;#34;바위&amp;#34;
    case Paa = &amp;#34;보&amp;#34;
}

var me = Janken.Goo
var you = 가위바위보.Goo
print(me)
print(you.rawValue)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위에 Janken과 가위바위보에  두 가지의 enum을 정의하고 사용하고 있다. 가위바위보에서는 각 값에 String의 기본값을 지정하고 있다.&lt;/p&gt;
&lt;p&gt;Janken.Goo를 print하면 Goo라고 표시되지만, 가위바위보.Goo는 기본값인 &amp;ldquo;바위&amp;quot;가 표시된다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 구조체, 열거형, 튜플 | 튜플(Tuple)</title>
      <link>https://www.devkuma.com/docs/swift/%ED%8A%9C%ED%94%8C-tuple/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%8A%9C%ED%94%8C-tuple/</guid>
      <description>
        
        
        &lt;p&gt;튜플은 이미 여러번 등장 했었다. 종류가 다른 여러 값을 한곳에 모아 처리 할 수 있는 것이다. 이것은 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(값1, 값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이와 같이, 단지 값을 () 안에 쉼표(,)로 구분하여 써 나가는 것만으로 튜플을 만들 수 있다. 이 안에 있는 값은 &amp;ldquo;〇〇.1&amp;quot;과 같이 튜플의 값을 저장한 변수 뒤에 점으로 번호를 지정하여 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;그러나 번호 지정 방식은 제대로 값 순서를 이해하고 있지 않으면 실수도 있다. 그래서 튜플에는 사전처럼 키 이름을 붙여 두는 것도 가능하게 되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(키1 : 값1, 키2 : 값2, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 작성된 튜플은 &amp;ldquo;〇〇.키&amp;quot;와 같이 숫자가 아닌 키를 사용하여 값을 꺼낼 수 있다. 이것은 단지 배열과 사전의 차이 같은 느낌 생각하면 좋을 것이다.&lt;/p&gt;
&lt;p&gt;그럼 아래에 튜플도 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func MakeTuple(name:String, age:Int)-&amp;gt;(name:String, age:Int) {
    return (name:name, age:age)
}

var me = MakeTuple(&amp;#34;Yamada&amp;#34;, age: 99)
var you = MakeTuple(&amp;#34;Hanako&amp;#34;, age: 36)

print(me.name)
print(you.age)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위 예제는 정해진 형식의 튜플을 만드는 기능을 제공하고, 이를 이용하여 튜플을 만들어 값을 표시하는 예제이다.&lt;/p&gt;
&lt;p&gt;튜플은 원하는대로 값 구성을 만들 수 있기 때문에, 너무 자유로워서  반대로 내용이 뿔뿔이 흩어지고 질 수도 있는 문제도 있지만, 이런 식으로하면 같은 형식의 튜플을 만들 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 리터럴 및 클로저</title>
      <link>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EB%B0%8F-%ED%81%B4%EB%A1%9C%EC%A0%80/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EB%B0%8F-%ED%81%B4%EB%A1%9C%EC%A0%80/</guid>
      <description>
        
        
        &lt;p&gt;Swift에는 &amp;ldquo;클로저(Closure)&amp;ldquo;라는 기능이 있다. 이것은 함수를 &amp;ldquo;값&amp;quot;으로 처리하는 구조이다. 이 클로저와 값으로 함수의 사용에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 리터럴 및 클로저 | 함수는 &#34;값&#34;이다!</title>
      <link>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98%EB%8A%94-%EA%B0%92%EC%9D%B4%EB%8B%A4%21/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98%EB%8A%94-%EA%B0%92%EC%9D%B4%EB%8B%A4%21/</guid>
      <description>
        
        
        &lt;p&gt;Swift 함수에는 매우 중요한 고유의 특성이 있다. 그것은 &amp;ldquo;값으로 취급&amp;quot;하는 것이다. 함수는 처리를 요약 한 것이지만, 이 함수 자체도 Swift에서는 &amp;ldquo;값&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;실제로 간단한 예제를 실행해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;calc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위에 예제는 calc라는 함수를 정의하고 있다. 그리고 이 calc을 변수 f1에 대입한 다음에 이 변수 f1에 인수로 호출한다.&lt;/p&gt;
&lt;p&gt;이제 제대로 calc의 처리가 실행되고 결과를 얻을 수 있다. 즉, 변수 f1에 calc 함수가 할당되어 제대로 작동하고 있다.&lt;/p&gt;
&lt;p&gt;이 &amp;ldquo;함수는 값이다&amp;quot;라는 특징 덕분에, Swift에는 다양한 형태로 함수를 취급할 수 있다. 우선 이 &amp;ldquo;함수는 값&amp;quot;이라는 점을 확실히 기억하도록 하자.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 리터럴 및 클로저 | 클로저 (Closure)</title>
      <link>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%A1%9C%EC%A0%80-closure/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%81%B4%EB%A1%9C%EC%A0%80-closure/</guid>
      <description>
        
        
        &lt;p&gt;이 &amp;ldquo;값으로써의 함수&amp;quot;의 기본을 알았으니, 이제 Swift의 중심 기능인 &amp;ldquo;클로저(Closure)&amp;ldquo;를 사용해 보기로하자.&lt;/p&gt;
&lt;p&gt;클로저라고 하는 것은 &amp;ldquo;값으로써 함수를 인수로 지정하고 다른 함수에 전달하여 사용한다&amp;quot;는 방식이다. 함수는 값이기에 함수 자체를 인자로 지정한 함수도 만들 수 있다.&lt;/p&gt;
&lt;p&gt;이렇게 함수의 처리 자체를 인수로 지정하고 다른 함수에 전달하는 기능이 클로저이다.&lt;/p&gt;
&lt;p&gt;이는 실제로 보지 않으면 왠지 생소하게 느껴질 것이다. 아래에 간단한 사용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func calc(num:Int)-&amp;gt;Int {
    var res = 0
    for n in 0...num {
        res += n
    }
    return res
}

func printResult(function:(num:Int)-&amp;gt;Int, n:Int) {
    print(function(num: n))
}

printResult(calc, n: 123)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 calc와 printResult라는 2개의 함수를 정의하고 있다. calc는 이전까지의 샘플과 동일하고 0부터 인수 값까지의 합을 계산하여 반환하는 예제이다. 클로저를 사용하는 함수는 printResult이다.&lt;/p&gt;
&lt;p&gt;이 printResult에서는 함수와 Int 값을 인수로 전달된다. 함수의 형태는 &lt;code&gt;(num:Int)-&amp;gt;Int&lt;/code&gt;으로 지정되어 있다. 이것으로 calc 함수를 인수로 전달하여 호출하면 내부적으로 함수를 실행하고 결과가 출력되는 거다.&lt;/p&gt;
&lt;p&gt;이 printResult은 단순히 &amp;ldquo;calc의 결과를 출력한다&amp;quot;는 것은 아니다. 인수 전달은 calc가 아니어도 상관없다. Int 값을 인수로 전달 Int 값을 반환하는 함수라면 무엇이든 전달해서 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;즉, 클로저를 사용하면 &amp;ldquo;처리를 외부로 분리할 수 있다&amp;quot;라는 장점이 있다. 이것이 클로저를 사용하는 큰 장점이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 함수 리터럴 및 클로저 | 함수 리터럴</title>
      <link>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4/</guid>
      <description>
        
        
        &lt;p&gt;클로저를 사용할 때 함수를 값으로 전달해야 한다. 앞의 예제처럼 함수를 미리 정의 해두고, 그것을 인수로 지정해도 물론 가능하다.&lt;/p&gt;
&lt;p&gt;하지만 너무 복잡한 처리가 아니라면, 그리고 한 곳에서만 사용하고, 다른 곳에서 쓸 수도 없다면 일부러 함수를 정의하는 것이 귀찮을 수도 있다.&lt;/p&gt;
&lt;p&gt;이러한 경우 클로저를 사용한 함수를 사용할 때 함수를 인수로 그 곳에 직접 작성할 수도 있다. 이는 &amp;ldquo;함수 리터럴&amp;quot;형식으로 작성한다. 함수 리터럴의 작성은 매우 간단하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{... 처리 작성 ...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것뿐이다. 사실은 Swift에서는 {} 내에 처리를 작한 것은 모든 함수로 취급한다. 다만, 이것만을 인수의 값으로 전달할 수 없기 때문에, 실제로는 다음과 같이 쓰는 경우가 많을 것이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{인수 in ... 처리 작성 ...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;인수가 여러 개인 경우 쉼표로 구분하여 작성한다. 이와 같이 함수 리터럴을 사용하여 함수의 값을 직접 인수를 작성하면, 미리 필요한 함수를 정의해 두지 않아도 된다.&lt;/p&gt;
&lt;p&gt;아래에 그 이용 예제를 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-switf&#34; data-lang=&#34;switf&#34;&gt;func printResult(function:(num:Int)-&amp;gt;Int, n:Int) {
    print(function(num: n))
}

printResult({n in n * 2}, n: 10)

printResult({n in
    var re:Int = 0
    for num in 0...n {
        re += num
    }
    return re
}, n: 100)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서는 이전 printResult을 정의해서 그것을 호출 처리로 쓰고 있다. 보면 알 수 있듯이, calc 함수는 더 이상 사용하지 않는다. 그 대신에, printResult를 호출할 때 함수 리터럴로 처리를 직접 작성하고 있다.&lt;/p&gt;
&lt;p&gt;함수 리터럴은 단순히 하나의 계산식만으로 결과를 얻을 수 있는 경우는 한줄에 함께 쓸 수 있다. in 후에 단지 간단한 식을 쓰는 것만으로 끝난다.&lt;/p&gt;
&lt;p&gt;여러 행을 전달하는 처리가 되면 나름대로 복잡하게 되지만, 한줄의 함수 리터럴이라면 간단히 사용하기 쉽다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;클로저와 함수 리터럴에 익숙해지지 않으면 왠지 어려울 것 보일 수도 있지만, &amp;ldquo;함수를 값으로 처리하는 구조다&amp;quot;라는 것만 기억한다면 그렇게 복잡한 것은 아니다. 실제로 샘플을 여러 번 수정해 가면서 실행해 보면 금방 익숙해 질 것이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 프로토콜 및 확장</title>
      <link>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%B0%8F-%ED%99%95%EC%9E%A5/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%B0%8F-%ED%99%95%EC%9E%A5/</guid>
      <description>
        
        
        &lt;p&gt;Swift에는 클래스를 확장하는데 도움이 되는 기능이 포함되어 있다. 프로토콜은 메소드의 구현을 의무화할수 있기에, 확장(extension)는 메소드를 나중에 추가한다. 이 두개를 합한 기술을 설명한다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 프로토콜 및 확장 | 프로토콜(Protocol)</title>
      <link>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-protocol/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-protocol/</guid>
      <description>
        
        
        &lt;p&gt;Swift는 클래스에 포함된 메소드를 호출해 처리한다. 어떤 오브젝트를 처리할 때 &amp;ldquo;그 안에 어떤 메소드가 준비되어 있는가&amp;quot;를 생각하게 된다.&lt;/p&gt;
&lt;p&gt;여기에 완전히 다른 클래스 객체가 여러개가 있었다고 하자. 그것들 모와서 어떠한 처리할 때 &amp;ldquo;모두에 공통된 메소드&amp;quot;를 제공하게 되면 매우 도움이 될 것이다.&lt;/p&gt;
&lt;p&gt;그렇지만, 클래스가 다른 경우 각각에 같은 메소드가 준비되어 있을 지에 대해 전혀 알 수가 없다. 각각의 클래스가 상속 관계에 있으면, 슈퍼 클래스에 메소드를 준비해 두는 것으로 어떻게든 되겠지만, 상속 관계가 없는 클래스에 대해서는 같은 메소드가 있다는 것을 보증할 수 없다. &amp;ldquo;프로그래머가 신경을 써서 공통의 것을 준비해 둔다&amp;quot;가 아니라, &amp;ldquo;반드시 이 메소드가 준비되어 있다&amp;quot;고 확신할 수 있는가 라는 것이다.&lt;/p&gt;
&lt;p&gt;이것을 가능하게 하는 것이 &amp;ldquo;프로토콜&amp;quot;이다. 프로토콜은 속성과 메소드 선언만 작성한 클래스와 같은 모양을 하고 있다. 작성 방법을 정리하면 이렇게 될 것이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protocol 프로토콜 이름 {
    ...... 속성과 메소드의 선언 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;메소드는 {} 안에 구현 부분은 필요 없다. 단순히 &amp;ldquo;func ○○ (✕✕) -&amp;gt; △△;&amp;ldquo;라고 선언 부분만 있으면 된다.&lt;/p&gt;
&lt;p&gt;이렇게 작성된 프로토콜은 클래스에 통합 이용된다. 이것은 클래스 상속과 기본적으로 유사하게 작성을
한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class 클래스명 : 프로토콜명 {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;클래스의 상속을 하고 있는 경우는 &amp;ldquo;클래스명 : 슈퍼 클래스 이름, 프로토콜 이름 &amp;hellip;&amp;hellip;&amp;ldquo;와 같이, 상속 클래스명 뒤에 쉼표로 구분하여 작성한다. 또한 프로토콜은 다중를 설정할 수 있기에 이런 경우에도 각각을 쉼표로 구분하여 작성해 주면 된다.&lt;/p&gt;
&lt;p&gt;이렇게 프로토콜을 설정된 클래스는 프로토콜에 포함된 모든 메소드를 구현해야 한다. 구현하지 않으면 오류가 발생하여 실행할 수 없다. 여러 클래스에 프로토콜을 설정하면, 그 클래스에 반드시 프로토콜의 메소드가 구현되어야 한다는 것이다.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;그러면 실제로 프로토콜을 사용한 간단한 예제를 만들어 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyProtocol&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PersonData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyProtocol&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;[name: &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;.]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MemoData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyProtocol&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MyProtocol&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PersonData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kimkc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MemoData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;아침 9시부터 회의&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 MyProtocol라는 프로토콜을 정의하고 거기에 데이터를 출력하는 printData라는 메소드가 작성되어 있다. 그리고 이 프로토콜을 구현한 클래스로 &amp;ldquo;PersonData &amp;ldquo;과 &amp;ldquo;MemoData&amp;quot;를 작성했다. PersonData는 개인 정보를 관리하는 것이고, MemoData 메모를 보관하는 것이다. 어느 쪽도 전혀 상속 관계도 없고, 사용할 수 있는 속성도 다르다.&lt;/p&gt;
&lt;p&gt;클래스 정의 후에 이를 이용한 간단한 처리가 있다. PersonData과 MemoData를 배열로 모와서 반복적으로 내용을 출력한다.&lt;/p&gt;
&lt;p&gt;여기에서는 MyProtocol의 배열을 만들고, 거기에 PersonData과 MemoData을 보관하고 있다. 프로토콜은 클래스과 같이 유형(타입)으로 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;MyProtocol 배열에는 MyProtocol를 구현한 클래스의 인스턴스라면 어떤 것이라도 넣을 수 있다. 그리고 MyProtocol에 캐스팅된 인스턴스에서 for문으로 printData를 호출하고 있다.&lt;/p&gt;
&lt;p&gt;이 처럼, &amp;lsquo;프로토콜의 인스턴스로 캐스팅하고 메서드를 호출&amp;rsquo;이라는 방식으로 PersonData과 MemoData는 상속 관계도 아무것도 전혀 무관한 클래스를 한꺼번에 처리 할 수 있게 되는 것이다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 프로토콜 및 확장 | 확장(Extension)</title>
      <link>https://www.devkuma.com/docs/swift/%ED%99%95%EC%9E%A5-extension/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%99%95%EC%9E%A5-extension/</guid>
      <description>
        
        
        &lt;p&gt;프로토콜은 클래스 메소드의 구현을 의무화하는 것이었지만, 확장 (Extension)는 클래스에 직접 메소드를 덧붙이는 기능이다. 이는 사용법도 매우 간단하고, 아래와 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;extention 클래스 이름 {
    ...... 추가 내용 ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;클래스명&amp;quot;에는 기능을 추가하는 클래스명을 지정한다. 정말 간단하다.&lt;/p&gt;
&lt;p&gt;추가할 수 있는 것은 메소드뿐만 아니라, 속성도 가능하다. 단, 속성의 경우 &amp;ldquo;Computed 속성&amp;quot;만 추가할 수 있다. 메소드처럼 get/set 처리를 준비하는 유형(타입)의 속성이다.&lt;/p&gt;
&lt;p&gt;이 확장은 자작 클래스뿐만 아니라 Swift 시스템 라이브러리로 제공되는 클래스와 iOS 프레임워크의 클래스 등도 확장할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, Int 클래스를 확장하여 1부터 주어진 숫자의 합계를 얻는 메소드 getTotal을 추가해 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getTotal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;total&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;getTotal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기에서는 extension Int와 같이 하여 Int 클래스를 확장하고 있다. 이렇게 함으로써, Int 형의 값 모두에 getTotal 메소드가 추가 되었다. &lt;code&gt;var num = 1234&lt;/code&gt;와 같이 일반적으로 작성된 Int 변수도 getTotal를 사용할 수 있게 된 것이다. 예를 들어, &amp;ldquo;100까지의 합을 알고 싶다&amp;quot;고 한다면 단지 &amp;ldquo;100.getTotal()&amp;ldquo;실행하면 된다.&lt;/p&gt;
&lt;p&gt;Int와 String 같이, Swift의 가장 기본적인 것에 대해서도 이렇게 확장에서 쉽게 기능을 추가 할 수 있다.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
    <item>
      <title>Swift 입문 | 프로토콜 및 확장 | 프로토콜과 확장을 결합</title>
      <link>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%ED%99%95%EC%9E%A5%EC%9D%84-%EA%B2%B0%ED%95%A9/</link>
      <pubDate>Sun, 24 Sep 2017 21:56:54 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%ED%99%95%EC%9E%A5%EC%9D%84-%EA%B2%B0%ED%95%A9/</guid>
      <description>
        
        
        &lt;p&gt;이 프로토콜과 확장을 결합하면, 재미있는 것을 할 수 있다.&lt;/p&gt;
&lt;p&gt;확장은 메소드와 속성뿐만 아니라 프로토콜을 추가하는 것도 가능하다. 이는 이미 있는 여러 클래스에 공통된 기능을 구현하여 함께 처리할 수도 있다.&lt;/p&gt;
&lt;p&gt;이것도 실제 사용 예제를 살펴 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyDataPrintable&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyDataPrintable&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;문자열 : &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyDataPrintable&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;숫자 : &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12345&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;printData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위에 예제는 MyDataPrintable라는 프로토콜을 작성하고, 거기에 printData 메소드가 작성되어 있다. 그리고 확장을 사용하여 이와 같이 String과 Int에 MyDataPrintable 프로토콜을 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;extension String: MyDataPrintable {...}
extension Int: MyDataPrintable {...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면 모든 String 값이나 Int 값이 MyDataPrintable로 취급할 수 있게 된다. 즉, String과 Int를 같은 프로토콜 클래스로 동일하게 모와서 처리할 수 있게 되는 것이다.&lt;/p&gt;
&lt;p&gt;이와 같이, 확장 및 프로토콜은 단순히 자신의 클래스를 강화할 뿐만 아니라 Swift에 포함되어 있는 모든 클래스에 자신의 확장을 실행 시킬 수 있고, 나름대로 커스텀마이징 하는 것을 허용한다. 꽤 강력한 기능이므로 꼭 기억해 두도록 하자.&lt;/p&gt;

      </description>
      
      <category>Swift</category>
      
    </item>
    
  </channel>
</rss>
