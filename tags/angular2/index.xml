<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Angular2</title>
    <link>https://www.devkuma.com/tags/angular2/</link>
    <image>
      <url>https://www.devkuma.com/tags/angular2/logo/180x180.jpg</url>
      <title>Angular2</title>
      <link>https://www.devkuma.com/tags/angular2/</link>
    </image>
    <description>Recent content in Angular2 on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/angular2/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Angular2 | Angular 설정</title>
      <link>https://www.devkuma.com/docs/angular2/overview/</link>
      <pubDate>Wed, 27 Dec 2017 23:04:14 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/angular2/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;angularjs와-angular2&#34;&gt;AngularJS와 Angular2&lt;/h2&gt;
&lt;p&gt;Angular는 Google이 중심이 되어 개발하는 JavaScript 프레임워크이다. 이것은 원래 &lt;strong&gt;AngularJS&lt;/strong&gt;라는 이름으로 개발되고 있었다. 그런데 그 후에 내용을 대폭 수정하여 새로운 &lt;strong&gt;Angular2&lt;/strong&gt; 로 다시 등장하게 된 것이다. 이 때에 이름부터 2를 붙여서 &amp;ldquo;Angular&amp;quot;로 변경되었다.&lt;/p&gt;
&lt;p&gt;이 새로운 Angular는 어떤 프레임워크인가. 그 특징을 한마디로 표현한다면 &amp;ldquo;컴포넌트 지향&amp;quot;이 될 것이다.&lt;/p&gt;
&lt;p&gt;이전 AngularJS는 이른바 &lt;strong&gt;MVC 아키텍처&lt;/strong&gt;를 염두에 두고 설계되어 있었다. 컨트롤러에 처리를 준비하고, 뷰에서 표시를 준비한다는 스타일이다.&lt;/p&gt;
&lt;p&gt;하지만, 이 방식은 아무래도 프런트엔드 의 표시를 만들 수 핵심되는 JavaScript에는 최적의 것이라고는 할 수 없을 것이다. 좀 더 JavaScript에 있던 아키텍처가 있을 것이다. 그래서 Angular 팀이 생각한 것이 &lt;strong&gt;컴포넌트&lt;/strong&gt;였다.&lt;/p&gt;
&lt;p&gt;Web을 구성하는 요소 하나 하나의 독립적인 구성 요소로 정리 재구성한다. 뷰와 컨트롤러를 분리보다, 컴포넌트에 표시부터 처리까지 모두 갖추어져 있고, 컴포넌트를 배치하면 그것으로 끝이라는 스타일의 것이 Web 만들기에 훨씬 더 적합하다. 그래서 Angular는 내용을 완전히 바꾸고 새로운 프레임워크로 다시 태어나게 된 것이다.&lt;/p&gt;
&lt;p&gt;이 Angular는 현재 아래 주소에서 공개되고 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://angular.io/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;덧붙여서, 지금까지의 AngularJS도 아직 존재하고 있다. 아래 주소이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angularjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://angularjs.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;angular-cli로-설치&#34;&gt;Angular CLI로 설치&lt;/h2&gt;
&lt;p&gt;Angular를 이용하려면 몇 가지 방법이 있다. 다만, 누군가 바로 생각할 수 있는 것이 &amp;ldquo;파일을 다운로드하여 프로젝트에 복사한다&amp;quot;라고 하는 방법일 것이다. 그러나 유감스럽게도 현재 시점에는 준비되어 있지 않다. Angular 사이트에서 파일 다운로드를 하지 않는다.&lt;/p&gt;
&lt;p&gt;다음 생각나는 것이라면 npm을 이용하는 방법이다. 명령 프롬프트 또는 터미널에서 Web 응용 프로그램 디렉터리로 이동하여 아래와 같이 실행을 하게 되면 설치가 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install angular2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래는 실행 결과이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm WARN deprecated angular2@2.0.0-beta.21: This version of Angular has been
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm WARN Angular2 No license field.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ angular2@2.0.0-beta.21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;added &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; package in 6.706s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 현재점(2017년 12월)에서 &lt;code&gt;npm install angular2&lt;/code&gt;에 설치되는 것은 베타이며, 이후에 RC 버전은 준비되어 있지 않은 것 같다. (&lt;code&gt;npm install angular&lt;/code&gt;는? 라고 생각한 사람이 있을 수 있는데, 그렇게 하면 이전 1.x가 설치되어 버린다)&lt;/p&gt;
&lt;p&gt;그럼 어떻게 하는 것이 좋은가. 아마도 가장 좋은 방법은 &lt;strong&gt;Angular CLI&lt;/strong&gt;를 이용하는 방법이다. 이 방법은 Angular를 이용하기 위한 전용 도구로 아래의 URL에 공개되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cli.angular.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cli.angular.io/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;그런데, 이 사이트에서 파일을 다운로드하는 것은 아니다. 여기에서는 사용법 등의 문서가 있다. 설치는 npm을 사용한다. 명령 프롬프트이나 터미널을 시작하여 아래와 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ npm install -g @angular/cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 Angular CLI가 설치된다.&lt;/p&gt;
&lt;p&gt;혹시 설치중에 권한 관련 문제가 생기면 아래 링크로 해결하길 바란다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.npmjs.com/getting-started/fixing-npm-permissions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.npmjs.com/getting-started/fixing-npm-permissions&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;angular-설치&#34;&gt;Angular 설치&lt;/h3&gt;
&lt;p&gt;이 Angular CLI는 커멘드 라인에서 실행하는 도구이다. Angular를 사용하려면 먼저 명령 프롬프트 등을 시작하고, 프로젝트를 만들 위치에 cd 명령으로 이동한다. (cd {디렉터리명})&lt;/p&gt;
&lt;p&gt;그리고 다음과 같이 명령을 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng new 프로젝트명
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 Angular를 이용하는 프로젝트가 생성된다. 예를 들어 &amp;ldquo;myapp&amp;quot;라는 이름으로 작성한다면 &lt;code&gt;ng new myapp&lt;/code&gt;라고 실행하면 &amp;ldquo;myapp&amp;quot;폴더가 만들어 지고, 그 안에 필요한 파일이 생성된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng new myapp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;응용-프로그램-실행&#34;&gt;응용 프로그램 실행&lt;/h3&gt;
&lt;p&gt;응용 프로그램의 실행도 Angular CLI를 사용 할 수 있다. cd 명령으로 프로젝트 디렉터리로 이동하고 &lt;code&gt;ng serve&lt;/code&gt;라고 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng serve
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 내장 서버를 기동하고, 다음 주소에서 응용 프로그램에 액세스할 수 있다. (다만, 처음에는 빌드를 위해 시작하는데 조금 시간이 걸린다)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:4200/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:4200/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;화면에 &amp;ldquo;Welcome to app!&amp;ldquo;라는 문구와 함께 로고가 표시되면, 응용 프로그램이 제대로 실행되고 있는 거다. 아래 화면이 이 예제에서 생성되는 Angular 어플리케이션의 Web 페이지 화면이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/angular2/welcome_angular2.png&#34; alt=&#34;Welcome to App!&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;angular-응용-프로그램-구성&#34;&gt;Angular 응용 프로그램 구성&lt;/h2&gt;
&lt;p&gt;생성된 Angular 응용 프로그램 중에는 다수의 파일이나 폴더가 많이 들어 있다. 이것은 Angular CLI가 기본적으로 npm을 이용하여 패키지를 설치하고 있기에, Node.js 관련 패키지가 다수 포함되어 있는 것이다.&lt;/p&gt;
&lt;p&gt;응용 프로그램에서 파일들은 대부분이 JSON 파일이다. 이 파일들은 각종 도구의 설정 정보를 기술한 것이으로, 직접 편집하는 일은 별로 없을 것이다. 폴더들에 대한 기본적인 역할은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.git 폴더&lt;/strong&gt; : Git 관련 파일이 들어 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node_modules 폴더&lt;/strong&gt; : 노드 관련 모듈 관련 파일이 들어 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e2e 폴더&lt;/strong&gt; &amp;ndash;end-to-end 테스트 관련 파일이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src 폴더&lt;/strong&gt; -  Web 페이지 관련 파일이 들어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;src-폴더-내용&#34;&gt;src 폴더 내용&lt;/h3&gt;
&lt;p&gt;응용 프로그램에서 표시하는 Web 페이지 파일은 src 폴더에 정리되어 있다. 이 부분이 실질적으로 Angular 응용 프로그램의 중심 부분이라고 할 수 있다. 이 src 폴더에는 다음과 같은 파일이 준비되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;app 폴더&lt;/strong&gt; : Angular 구성 요소들 들어 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;favicon.ico&lt;/strong&gt; : 아이콘 파일이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; : 이 파일은 디폴트로 표시되는 Web 페이지이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main.ts&lt;/strong&gt; : 시작할 시에 실행되는 스크립트이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt; :  TypeScript의 설정 파일이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typings.d.ts&lt;/strong&gt; :  Typings는 TypeScript 정의 관리자의 설정 파일이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 ts 확장자의 파일이 보일 것이다. 이는 TypeScript 스크립트 파일이다. Angular는 JavaScript뿐만 아니라 TypeScript도 사용할 수 있다. Angular CLI에서 생성된 프로젝트는 기본적으로 TypeScript를 사용하게 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;app-폴더-및--컴포넌트&#34;&gt;app 폴더 및  컴포넌트&lt;/h3&gt;
&lt;p&gt;src 폴더 안에는 &amp;ldquo;app 폴더가 있다. 이것이 Angular의 중심 부분이다.&lt;/p&gt;
&lt;p&gt;이것은 Angular의 &lt;strong&gt;컴포넌트&lt;/strong&gt;에 관한 파일들이 있다. 이 컴포넌트라는 것을 만드는 것이 Angular의 기본이다.&lt;/p&gt;
&lt;p&gt;컴포넌트란, 화면 표시 및 내부 처리 등을 패키지하여 어디서나 사용할 수 있도록 한 것이다. 이것은 HTML 파일, 스크립트 파일, 스타일 시트 파일 등의 조합으로 구성된다. 이 컴포넌트는 HTML의 사용자 정의 태그를 사용하여 HTML에 작성하여 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, &amp;ldquo;my-component&amp;quot;라는 컴포넌트를 만들면, HTML에 &lt;code&gt;&amp;lt;my-component&amp;gt;&lt;/code&gt;라는 태그를 쓰는 것만으로 컴포넌트에 의해 표시 및 동작 등을 하게 된다는 것이다.&lt;/p&gt;
&lt;p&gt;기본적으로 다음과 같은 파일이 폴더에 포함되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.ts&lt;/strong&gt; : 컴포넌트 관련하여 기본적으로 로드되는 스크립트이다. 컴포넌트 전반에서 로드되는 라이브러리 등을 여기에 작성되어 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;environment.ts&lt;/strong&gt; :개발중이거나 정식 배포 등의 상황에 따른 처리을 기술한 것이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app.component.html&lt;/strong&gt; : 샘플 구성 요소의 HTML 템플릿이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app.component.ts&lt;/strong&gt; : 샘플 구성 요소의 처리를 포함하는 스크립트이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app.component.css&lt;/strong&gt; : 샘플 구성 요소에서 사용하는 스타일 시트이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app.component.spec.ts&lt;/strong&gt; : 샘플 컴포넌트의 테스트 스크립트이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;index.ts과 environment.ts는 컴포넌트 전체에 관한 것으로, 우선은 편집할 수 없다. 여기에서 염두에 두고 싶은 샘플에 포함되어있는 구성 요소 파일이다. &amp;ldquo;app.component&amp;quot;라는 파일이 3개 준비되어 있는데,이 3가지가 세트로 되어 컴포넌트를 구축하고 있다. (app.component.spec.ts는 테스트 용이므로 컴포넌트 본체에는 포함되지 않는다고 생각해도 된다)&lt;/p&gt;
&lt;p&gt;컨포넌트는 이 같이 HTML, 스크립트, 스타일시트에 같은 이름의 파일을 작성하여 만든다. 이 파일들을 만든 것이 컴포넌트를 만든다는 것이며, Angular 프로그래밍의 가장 기본이되는 것이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;우선, 프로젝트 전체의 구성이 대체로 알게 되었고, 다음에서 컴포넌트 작성에 대해 설명하겠다.&lt;/p&gt;

      </description>
      
      <category>Angular2</category>
      
      <category>WEB</category>
      
    </item>
    
    <item>
      <title>Angular2 컴포넌트 기본 코드</title>
      <link>https://www.devkuma.com/docs/angular2/component/</link>
      <pubDate>Wed, 27 Dec 2017 23:04:14 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/angular2/component/</guid>
      <description>
        
        
        &lt;h2 id=&#34;appcomponentts&#34;&gt;app.component.ts&lt;/h2&gt;
&lt;p&gt;앞에서 Angular 기본적인 파일 구성에 대해 설명했었다. 그것으로 src 폴더에 있는 app 폴더 안에 컨포넌트 파일이 준비되어 샘플에서는 app.component 라는 컴포넌트 파일이 포함되어 있다는 것을 알 수 있었다.&lt;/p&gt;
&lt;p&gt;이 app.component의 내용이 어떻게 되어 있는지 알게 되면, 컴포넌트가 어떻게 만들어지고 있는지 알 수 있다. 그럼 app.component.ts에서 대해서 보도록 하자.&lt;/p&gt;
&lt;p&gt;app.component.ts는 TypeScript 스크립트 파일이다. 아래에 디폴트 그대로 작성되어 있는 내용은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;app-root&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;templateUrl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./app.component.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;styleUrls&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;./app.component.css&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AppComponent&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것이 Angular 컴포넌트의 소스 코드이다. 이것을 좀 더 정리보면 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(...&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;설정&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;정보&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;컴포넌트명&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;필요한&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;정보&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;처음에 import는 모듈을 로드하기 위한 것이다. Angular에서는 다양한 기능이 준비되어 있는데, 모두 모듈화되어 있다. 모듈은 이 import라는 것을 사용하여 로드한다. 이것은 아래와 같은 식으로 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import 로드하는 객체 from 모듈 지정;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;로드하는 객체는 {} 안에 콤마(,)로 구분하여 여러 개를 작성할 수 있다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;code&gt;@angula /core&lt;/code&gt;라는 모듈에 있는 Component라는 것을 로드한다. 이는 다음에 있는 &lt;code&gt;@Component&lt;/code&gt;라는 어노테이션 객체이다.&lt;/p&gt;
&lt;p&gt;어노테이션라는 것은 코드에 다양한 정보를 추가하기 위한 것이다. 이 &lt;code&gt;@Component&lt;/code&gt;는 아래에 정의된 클래스에 콤포넌트로 사용하기 위한 여러 기능을 포함되이 있는 것이다. 쉽게 말하면, 클래스 정의 앞에 &lt;code&gt;@Component&lt;/code&gt; 어노테이션을 지정하면, 그 클래스는 컨포넌트로 인식되게 된다는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;component-설정-및-export되는-클래스&#34;&gt;@Component 설정 및 export되는 클래스&lt;/h3&gt;
&lt;p&gt;그럼, @Component 어노테이션을 살펴 보도록 하자. 이 어노테이션 다음 ()에는 인수로 객체가 지정되어 있다. 이 객체에 컴포넌트에 전달되는 각종 설정 정보가 포함된다. 여기에서 지정되어 있는 것은 다음과 같은 항목이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;moduled&lt;/strong&gt; : 모듈 이름을 지정한다. 여기에서는 module.id 값이 지정되어 있다. 모듈의 ID를 그대로 moduleId로 설정하는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;selector&lt;/strong&gt; : 이것은 컨포넌트를 식별하기 위한 이름이다. 여기에서는 &lt;code&gt;app-root&lt;/code&gt;로 지정되어 있어서, 이 컴포넌트는 &lt;code&gt;app-root&lt;/code&gt;라는 이름으로 식별된다. 이는 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;라는 태그에 이 컴포넌트를 사용할 수 있게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;templateUrl&lt;/strong&gt; : 컴포넌트의 표시에 사용하는 템플릿 파일의 URL을 지정한다. 여기에서는 app.component.html를 지정하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;styleUrls&lt;/strong&gt; : 이것은 스타일 시트의 URL을 지정하는 것이다. 이것은 배열되어 있고, 사용하는 CSS 파일을 모와서 지정한다. 여기에서는 app.component.css 만 사용하도록 되어 있다.&lt;/p&gt;
&lt;p&gt;이 중에 가장 중요한 것은 selector와 templateUrl이다. selector는 컴포넌트를 HTML에 배치할 때 사용자 정의 태그명을 지정하고, templateUrl에는 사용하는 템플릿 파일을 지정한다. 이 2가지를 모르면 어떤 파일을 어떻게 수정해야 할지 알 수가 없다.&lt;/p&gt;
&lt;h3 id=&#34;export-의한-클래스-내보내기&#34;&gt;export 의한 클래스 내보내기&lt;/h3&gt;
&lt;p&gt;그런데, &lt;code&gt;@Component&lt;/code&gt; 어노테이션을 붙여서 생성되는 것은 &amp;lsquo;AppComponent &amp;ldquo;라는 클래스이다. 이는 &lt;code&gt;export class 클래스명&lt;/code&gt;이라는 형태로 작성되어 있다. export는 객체 내보내기(외부에서 사용할 수 있도록)하는 것이다. export한 클래스는 import으로 다른 위치에서 로드해서 이용할 수 있다.&lt;/p&gt;
&lt;p&gt;여기에서는 AppComponent 클래스를 export할 때에, title이라는 변수에 값을 대입하고 있다. 여기에 대입된 값은 이 후에 템플릿에서 사용할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이것으로 AppComponent를 컴포넌트의 기본 소스 코드가 어떻게 되어 있는지 알게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;html과-스타일-시트&#34;&gt;HTML과 스타일 시트&lt;/h2&gt;
&lt;p&gt;앞에서 스크립트에 대해서 설명을 하였다면, 이제 HTML과 CSS에 대해서 설명하겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;app.component.html&lt;/strong&gt;
app.component.html이 어떻게 되어 있는지 보면 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text-align:center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Welcome to {{ title }}!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.... 이하 생략 ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 태그를 출력하고 있고, 해당 콘텐츠는 &lt;code&gt;{{ title }}&lt;/code&gt;이라는 것이 작성되어 있다. 이 &lt;code&gt;{{}}&lt;/code&gt;라는 기호는 JavaScript 문장을 작성해서 그 결과를 출력하는데 사용된다.&lt;/p&gt;
&lt;p&gt;여기에서는 title 값을 출력하며, 이것은 앞에서 작성한 스크립트에서 작성한 &lt;code&gt;export class&lt;/code&gt;에서 만든 변수이다. 스크립트에서 만든 변수를 템플릿에서 이와 같이 이용할 수 있는 것이다.&lt;/p&gt;
&lt;p&gt;나머지 생략된 부분에는 로그 이미지 및  Angular와 관련된 몇가지 링크들이 있다. 이는 특별한 것이 없기 때문에 넘어간다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;app.component.css&lt;/strong&gt;&lt;br&gt;
다음으로 스타일 시트(app.component.css)을 열어 보면, 내용이 비어 있다. 여기에 필요에 따라 스타일을 작성하면 된다.&lt;/p&gt;
&lt;h3 id=&#34;사용자-정의-표시&#34;&gt;사용자 정의 표시&lt;/h3&gt;
&lt;p&gt;여기서 컨포넌트의 기본 구조 알았다. 그럼 약간의 응용하여 컴포넌트의 표시를 약간 수정하여 보자.&lt;/p&gt;
&lt;p&gt;아래에 &lt;code&gt;app.component.html&lt;/code&gt;과 &lt;code&gt;app.component.css&lt;/code&gt; 예제는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;app.component.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;rect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;AppComponent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;{{&amp;#39;이것은, &amp;#34;&amp;#39; + title + &amp;#39;&amp;#34;라는 컴포넌트입니다.&amp;#39;}}&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;app.component.css&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rect&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lightgray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;darkgray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이와 같이 파일을 수정하여 응용 프로그램을 다시 표시해 보자. 이번에는 사각형 테두리 안에 제목과 메시지가 표시된다.&lt;/p&gt;
&lt;p&gt;여기에서는 app.component.css에 rect라는 클래스를 정의해 두고, 이를 app.component.html 에서 &lt;code&gt;&amp;lt;div class=&amp;quot;rect&amp;quot;&amp;gt;&lt;/code&gt;와 같이 지정하여 사용하고 있다. 이것으로 HTML과 스타일 시트를 다시 쓰는 것만으로 간단히 컨포넌트의 표시를 사용자 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;그런데, HTML 파일의 템플릿에는 app.component.css을 읽어 오기 위한 태그가 없는 것을 이상하게 생각한 사람도 있을지도 모른다. 이는 app.component.ts 스크립트에서  &lt;code&gt;@Component&lt;/code&gt; 어노테이션으로 이렇게 설정되어 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;styleUrls&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;app.component.css&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 스타일 시트를 로드되기에, 스타일 시트를 로드하는 태그를 따로 작성할 필요가 없는 것이다.&lt;/p&gt;

      </description>
      
      <category>Angular2</category>
      
      <category>WEB</category>
      
    </item>
    
    <item>
      <title>Angular2</title>
      <link>https://www.devkuma.com/docs/angular2/</link>
      <pubDate>Wed, 27 Dec 2017 23:04:14 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/angular2/</guid>
      <description>
        
        
        &lt;p&gt;Angular2(AngularJS의 다음 버전)는 Google이 개발하는 오픈 소스 JavaScript 프레임워크이다. AngularJS와 전혀 다른 것으로 진화한 새로운 프레임워크의 사용법을 설명한다.&lt;/p&gt;

      </description>
      
      <category>Angular2</category>
      
      <category>WEB</category>
      
    </item>
    
  </channel>
</rss>
