<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – dto</title>
    <link>https://www.devkuma.com/tags/dto/</link>
    <image>
      <url>https://www.devkuma.com/tags/dto/logo/180x180.jpg</url>
      <title>dto</title>
      <link>https://www.devkuma.com/tags/dto/</link>
    </image>
    <description>Recent content in dto on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/dto/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>DTO, VO, Entity</title>
      <link>https://www.devkuma.com/docs/dto-vo-entity/</link>
      <pubDate>Tue, 06 Jul 2021 11:04:23 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/dto-vo-entity/</guid>
      <description>
        
        
        &lt;h2 id=&#34;dtodata-transfer-object-란&#34;&gt;DTO(Data Transfer Object) 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터 전송(이동) 객체라는 의미를 가지고 있다.&lt;/li&gt;
&lt;li&gt;계층간 데이터 교환을 위한 객체(Java Beans)이다.
&lt;ul&gt;
&lt;li&gt;DB에서 데이터를 얻어 Service나 Controller 등으터 보낼 때 사용하는 객체를 말한다.&lt;/li&gt;
&lt;li&gt;로직을 갖고 있지 않는 순수한 데이터 객체이며, Getter와 Setter 메서드만을 갖는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vovalue-object-란&#34;&gt;VO(Value Object) 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VO(Value Object)는 말 그대로 값 객체라는 의미를 가지고 있다.&lt;/li&gt;
&lt;li&gt;객체의 불변성(객체의 정보가 변경하지 않음)을 보장한다.
&lt;ul&gt;
&lt;li&gt;Getter 메서드만 가질 수 있다.&lt;/li&gt;
&lt;li&gt;값은 생성자를 통해서 설정할 수 있고, 이때 Builder 패턴을 사용하면 편하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서로 다른 이름을 갖는 VO 인스턴스더라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체라고 할 수 있다.
&lt;ul&gt;
&lt;li&gt;이를 위해 VO에는 Object 클래스의 &lt;code&gt;equals()&lt;/code&gt;와 &lt;code&gt;hashcode()&lt;/code&gt;를 오버라이딩해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VO 내부에 선언된 속성(필드)의 모든 값들이 VO 객체마다 값이 같아야, 똑같은 객체라고 판별한다.&lt;/li&gt;
&lt;li&gt;테이블 내에 있는 속성 외에 추가적인 속성을 가질 수 있다.&lt;/li&gt;
&lt;li&gt;여러 테이블(A, B, C)에 대한 공통 속성을 모아서 만든 BaseVO 클래스를 상속받아서 사용할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;entity-란&#34;&gt;Entity 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;실제 DB의 테이블과 매핑되는 객체이다.&lt;/li&gt;
&lt;li&gt;데이터의 집합을 의미한다.&lt;/li&gt;
&lt;li&gt;저장되고, 관리되어야 하는 데이터이다.&lt;/li&gt;
&lt;li&gt;개념, 장소, 사건 등을 가리킨다.&lt;/li&gt;
&lt;li&gt;유형 또는 무형의 대상을 가리킨다.&lt;/li&gt;
&lt;li&gt;ID를 통해 각각의 Entity를 구분하고 유일한 식별자를 갖고 있어야 한다.
&lt;ul&gt;
&lt;li&gt;ID, 회원번호 등&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;반드시 속성이 한개 이상 존재해야 한다.
&lt;ul&gt;
&lt;li&gt;이름, 주소 등&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;영속적으로 존재하는 인스턴스의 집합이다.&lt;/li&gt;
&lt;li&gt;반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DTO는 계층(Layer)간 데이터 이동을 위해 사용되는 객체&lt;/li&gt;
&lt;li&gt;VO는 값을 갖는 순수한 도메인&lt;/li&gt;
&lt;li&gt;Entity는 이를 DB 테이블과 매핑하는 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/dto-vo-entity/layer.png&#34; alt=&#34;계층간의 구분&#34;&gt;&lt;/p&gt;

      </description>
      
      <category>dto</category>
      
      <category>vo</category>
      
      <category>entity</category>
      
    </item>
    
  </channel>
</rss>
