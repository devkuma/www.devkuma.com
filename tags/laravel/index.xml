<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Laravel</title>
    <link>https://www.devkuma.com/tags/laravel/</link>
    <image>
      <url>https://www.devkuma.com/tags/laravel/logo/180x180.jpg</url>
      <title>Laravel</title>
      <link>https://www.devkuma.com/tags/laravel/</link>
    </image>
    <description>Recent content in Laravel on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Laravel 시작 및 프로젝트 생성</title>
      <link>https://www.devkuma.com/docs/laravel/start/</link>
      <pubDate>Wed, 10 Jan 2018 21:43:13 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/laravel/start/</guid>
      <description>
        
        
        &lt;h2 id=&#34;laravel-준비&#34;&gt;Laravel 준비&lt;/h2&gt;
&lt;p&gt;Laravel은 PHP Web 응용 프로그램 프레임워크이다. Model-View-Controller에 의해 응용 프로그램을 구성하는 이른바 &amp;lsquo;MVC 아키텍처 &amp;ldquo;에 기초하여 만들어진 것으로, 예를 들어 CakePHP 등과 같은 역할을 한다.&lt;/p&gt;
&lt;p&gt;Laravel은 다음 사이트에서 공개되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://laravel.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://laravel.com/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;한국어 싸이트는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://laravel.kr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://laravel.kr/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기에서 Laravel의 소프트웨어를 다운로드하고 설치하는 방식은 하지 않는다. Laravel은 패키지 관리 도구를 사용하여 설치한다. 여기에서는 PHP 패키지 관리 도구 &amp;ldquo;Composer&amp;quot;를 이용하기로 한다.&lt;/p&gt;
&lt;h3 id=&#34;composer-준비&#34;&gt;Composer 준비&lt;/h3&gt;
&lt;p&gt;Composer는 다음의 주소에서 공개되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://getcomposer.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://getcomposer.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기에서 Comoser 설치 프로그램을 다운로드하여 설치한다. 프로젝트의 작성 등은 모두 Composer를 이용하여 실시한다. 따라서 Laravel 자체를 설치하는 작업은 특별히 필요 없다.&lt;/p&gt;
&lt;p&gt;이 Composer는 명령 프롬프트에서 명령으로 실행한다. 명령 프롬프트를 기동하고 &amp;ldquo;composer&amp;quot;고 실행한다. 그러면 Composer 명령 목록이 나타나는 것이다. 이 목록이 나오면 Composer를 사용할 수 있게 된 것이다.&lt;/p&gt;
&lt;p&gt;만약 &amp;ldquo;composer는 내부 또는 외부 명령, 실행할 수 있는 프로그램 또는 배치 파일이 인식되지 않다&amp;quot;라는 메시지가 나타나면 Composer 경로가 들어가 있지 않는 것이다. Composer는 다음 중 하나에 저장되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\ProgramFies(x86)\ComposerSetup\bin;
C:\ProgramData\ComposerSetup\bin;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이중 하나에 composer.bat가 있을 것이므로, 파일이 있는 쪽의 경로를 path 변수에 추가하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;laravel-프로젝트-생성&#34;&gt;Laravel 프로젝트 생성&lt;/h2&gt;
&lt;p&gt;Laravel 예제를 만들어 보자. Laravel은 &amp;ldquo;프로젝트&amp;quot;를 작성하고 개발한다.&lt;/p&gt;
&lt;p&gt;프로젝트라는 것은 만드는 응용 프로그램에 필요한 파일과 설정 등을 모두 한 묶음으로 모은 것으로, Laravel의 개발은 기본적으로 프로젝트를 만들고, 거기에 필요한 파일을 추가하거나 편집하고 가는 방식으로 한다.&lt;/p&gt;
&lt;p&gt;이 프로젝트 생성은 명령 프롬프트를 사용하여 composer 명령을 실행한다.&lt;/p&gt;
&lt;h3 id=&#34;laravel-프로젝트-만들기&#34;&gt;Laravel 프로젝트 만들기&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;composer create-project laravel/laravel 프로젝트명 --prefer-dist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;composer create-project laravel/laravel&lt;/code&gt;는 조금 긴데, 이는 composer으로 Laravel 프로젝트를 만드는 명령이다. 이 명령 이후에 프로젝트명을 넣는다. 그러고 &lt;code&gt;--prefer-dist&lt;/code&gt;라는 것은 패키지의 다운로드 하는 위치에 관한 것으로, &lt;code&gt;--prefer-source&lt;/code&gt;와 &lt;code&gt;--prefer-dist&lt;/code&gt; 중 하나를 지정한다.&lt;/p&gt;
&lt;p&gt;그럼, &amp;ldquo;myapp&amp;quot;라는 프로젝트를 만들어 보자. 명령 프롬프트를 열고, 프로젝트를 저장할 위치로 cd로 이동하고, 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;composer create-project laravel/laravel myapp --prefer-dist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 현재 디렉토리에 &amp;ldquo;myapp&amp;quot;이라는 폴더가 생성되고, 그 안에 필요한 파일들이 저장된다.&lt;/p&gt;
&lt;h3 id=&#34;laravel-설치에-대해&#34;&gt;Laravel 설치에 대해&lt;/h3&gt;
&lt;p&gt;Laravel 이용은 Composer를 사용하여 수행할 수 있지만, 좀 더 쉽게 사용할 수 있도록 하고 싶다면 Laravel 인스톨러을 이용하면 된다. 이는 명령 프롬프트에서 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;composer global require &amp;#34;laravel/installer=~1.1&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이제 Laravel 프로그램이 포함된다. 그러고 Laravel 설치 프로그램의 위치를 path 변수에 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\사용자명\AppData\Roaming\Composer\vendor\bin;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;사용자명&amp;quot;은 각각의 맞는 이름으로 대체한다. 이것으로 Laravel 설치 프로그램을 사용할 수 있게 된다. 이것을 사용하면 다음과 같이 쉽게 프로젝트를 만들 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;laravel new 프로젝트명
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;명령 프롬프트에서 이렇게 실행하면 프로젝트를 만들 수 있다. myapp라면 &lt;code&gt;laravel new myapp&lt;/code&gt;라고 입력만 하면 된다.&lt;/p&gt;
&lt;p&gt;Composer를 사용하여도, Laravel 인스톨러에서 생성되어도 프로젝트에는 차이가 없다. 어느 방법이라도 선호하는 방법으로 하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;laravel-프로젝트-실행&#34;&gt;Laravel 프로젝트 실행&lt;/h2&gt;
&lt;p&gt;생성된 프로젝트를 동작시켜 보자.&lt;/p&gt;
&lt;p&gt;생성된 Laravel 프로젝트에 대한 작업은 &amp;ldquo;artisan&amp;quot;라는 프로그램을 사용한다. 우선 cd 명령으로 프로젝트로 이동한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd myapp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 내장 서버를 시작한다. Laravel은 내장의 서버 프로그램을 사용하여 로컬 환경에서 프로젝트를 Web 응용 프로그램으로 시작할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ php artisan serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;artisan는 PHP 프로그램이다. &lt;code&gt;php artisan&lt;/code&gt;라는 명령 뒤에 옵션으로 실행하는 내용을 지정한다. &amp;ldquo;serve&amp;quot;를 지정하면 내장 서버를 시작한다. 실행이 되면, Web 브라우저에서 다음 주소를 접근해 본다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:8000/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8000/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;화면의 중앙에 &amp;ldquo;Laravel 5&amp;quot;라고 표시된 페이지가 나타난다. 이것이 만든 프로젝트의 실행 화면이다. 프로젝트에는 기본적으로 이러한 페이지가 샘플로 준비되어 있다.&lt;/p&gt;
&lt;p&gt;프로그램을 종료하려면, 실행중인 명령 프롬프트를 선택하고 &lt;code&gt;Ctrl + C&lt;/code&gt; 키를 눌러 작업을 중단하면 된다. 그러면, 서버 프로그램도 실행을 중단하고 입력 대기 상태로 돌아간다.&lt;/p&gt;
&lt;h2 id=&#34;laravel-프로젝트-구성&#34;&gt;Laravel 프로젝트 구성&lt;/h2&gt;
&lt;p&gt;만든 프로젝트 폴더를 열어 보면 살펴 보자. 많은 폴더가 있을 것이다. 여기서 대략 적은 설명을 하겠다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;app 폴더&lt;/strong&gt; : 어플리케이션의 본체 부분이다. 응용 프로그램 개발을 할 때 여기에 PHP 프로그램을 배치하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bootstrap 폴더&lt;/strong&gt; : 어플리케이션의 부트스트랩 프로그램이다. 기동을 하고 각종 처리가 준비되어 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;config 폴더&lt;/strong&gt; : 어플리케이션의 각종 설정 정보 파일이 있는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;database 폴더&lt;/strong&gt; : 데이터베이스 관련 파일을 정리된 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;public 폴더&lt;/strong&gt; : 공개 폴더이다. MVC 아키텍처를 사용하지 않는 일반 HTML 파일 등은 여기에 배치한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;resources 폴더&lt;/strong&gt; : 어플리케이션에서 사용하는 리소스 파일을 두는 폴더이다. MVC의 뷰(화면)의 템플릿 파일 등은 여기에 놓는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;storage 폴더&lt;/strong&gt; : 데이터 저장을 위한 폴더이다. 세션 및 캐시 등의 저장 파일이 작성된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tests 폴더&lt;/strong&gt; : 단위 테스트 관련 파일의 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;vendor 폴더&lt;/strong&gt; : 공급 업체가 만드는 프로그램등이 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 밖에 파일들도 여러가지 저장되어 있지만, 우리가 작업해야 하는 것은 특별히 없으므로 생략한다. 많이 있지만, 중요한 것은 app, config, public, resources 정도 일것이다.&lt;/p&gt;
&lt;p&gt;app는 실제 프로그래밍을 할 때마다 사용한다. config는 예를 들어 사용하는 데이터베이스를 설정할 때 사용한다. public은 보통의 HTML 파일 등을 설치하는데 사용하는 것이다. resources는 화면 표시를 위한 템플릿을 설치하는데 사용한다.&lt;/p&gt;
&lt;p&gt;이것 외에는 즉시 사용하지 않으므로 일단은 기억해 두지 않아도 된다. 우선, 이 4 개의 폴더의 역할 정도는 대충 기억한다.&lt;/p&gt;
&lt;h3 id=&#34;app-폴더&#34;&gt;app 폴더&lt;/h3&gt;
&lt;p&gt;프로젝트에 포함되어 있는 폴더 중에서 가장 중요한 것이 app 폴더 것이다. 이 폴더는 Laravel 응용 프로그램의 주요 부분을 배치하는 곳이다.&lt;/p&gt;
&lt;p&gt;이 app 폴더 안에는 여러 폴더가 포함되어 있다. 정리하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Console 폴더&lt;/strong&gt; : 콘솔 프로그램(명령 프로그램)을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events 폴더&lt;/strong&gt; : 이벤트의 프로그램이 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exceptions 폴더&lt;/strong&gt; : 예외 처리의 핸들링에 관한 프로그램을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Http 폴더&lt;/strong&gt; : HTTP 액세스할 때의 처리에 관한 것을 모와둔 폴더이다. 응용 프로그램에서 만드는 기본적인 프로그램은 여기에 포함된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jobs 폴더&lt;/strong&gt; : 큐에 추가하고 실행되는 프로그램(작업)을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Listeners 폴더&lt;/strong&gt; : 이벤트 리스너 프로그램을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Policies 폴더&lt;/strong&gt; :  &amp;ldquo;정책&amp;quot;이라는 인증 처리 프로그램을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Providers 폴더&lt;/strong&gt; - 서비스 제공자라는 프로그램을 모와둔 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중에 잘 모르는 것도 많이 있겠지만, 당분간은 사용하지 않는 것이 많기에 모두 기억할 필요는 없다. 우선 여기서 꼭 기억해야 할 것은 &amp;ldquo;Http&amp;quot;폴더이다. 실제로 프로그래밍을 시작하면 알겠지만 Laravel 프로그램은 먼저 이 Http 폴더에 &amp;ldquo;컨트롤러&amp;quot;라는 프로그램을 설치부터 시작한다. 그러므로, 이 &amp;ldquo;Http&amp;quot;폴더라는 것만은 기억해 두도록 한다.&lt;/p&gt;
&lt;h3 id=&#34;http-폴더&#34;&gt;Http 폴더&lt;/h3&gt;
&lt;p&gt;가장 중요한 Http 폴더 안에는 더욱 여러 폴더와 파일이 있다. 이도 대충 정리하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controllers 폴더&lt;/strong&gt; : 컨트롤러라는 프로그램을 모와두는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Middleware 폴더&lt;/strong&gt; : 미들웨어는 소위 필터와 같은 역할을 하는 프로그램을 모와두는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requests 폴더&lt;/strong&gt; : 요청에 대한 프로그램을 모와두는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kernel.php&lt;/strong&gt; : HTTP 커널이라는 Http 액세스 미들웨어가 되는 프로그램을 모와두는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;routes.php&lt;/strong&gt; : 액세스 한 주소에 대해 처리를 할당 라우팅 프로그램을 모와두는 폴더이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선, Controllers 폴더와 routes.php은 실제 프로그래밍에 들어가면 바로 사용해야 하기에, 이 2가지 내용은 기억해 두도록 하자.&lt;/p&gt;
&lt;p&gt;이것으로 프로젝트의 대략적인 구성에 대해서 살펴 봤다. 다음에는 실제 프로그래밍을 시작해 보도록 하겠다.&lt;/p&gt;

      </description>
      
      <category>Laravel</category>
      
      <category>php</category>
      
      <category>WEB</category>
      
    </item>
    
    <item>
      <title>Laravel 라우팅, 컨트롤러</title>
      <link>https://www.devkuma.com/docs/laravel/routes-controller/</link>
      <pubDate>Wed, 10 Jan 2018 21:43:13 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/laravel/routes-controller/</guid>
      <description>
        
        
        &lt;h2 id=&#34;라우팅과-routesphp&#34;&gt;라우팅과 routes.php&lt;/h2&gt;
&lt;p&gt;Web 어플리케이션의 개발을 할 때 먼저 생각해야 하는 것은은 **라우팅(routing)**이다. 라우팅이란, 어떤 주소에 액세스하면 어떤 작업을 수행하는지를 할당하는 것이다.&lt;/p&gt;
&lt;p&gt;프레임워크를 사용하지 않았을 때에는 Web 개발은 매우 간단했다. 공개 폴더에서 &amp;ldquo;myapp&amp;quot;라는 폴더에 &lt;code&gt;helo.php&lt;/code&gt;라는 파일을 두면, &lt;code&gt;/myapp/helo.php&lt;/code&gt;에 접속하면 그것이 호출되었다.&lt;/p&gt;
&lt;p&gt;그런데 프레임워크에서는 그런 간단한 접근 방법은 하지 않는다. 응용 프로그램 전체를 프레임워크에 의해 제어하고, 필요한 경우에 프로그램을 호출 실행하도록 되어 있다. 이 주소에 액세스하면, 어떤 프로그램을 실행하고 어떤 파일을 표시할지에 대해서 프레임워크에서 모두 관리할 수 있게 되어 있는 것이다. 이렇게 하는 것이 라우팅이다.&lt;/p&gt;
&lt;p&gt;이 라우팅은 app 안에 Http 폴더에 있는 routes.php 라는 파일에 의해 수행된다. 이 파일을 열면 아래 목록과 같은 스크립트가 적혀 있다.&lt;/p&gt;
&lt;p&gt;여기에서는 2개의 static 메소드의 호출이 작성되어 있다. 정리하면, 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Route::get(XX);
Route::group(XX);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;라우팅은 이렇게 Route 라는 클래스에 포함되어 있는 static 메소드를 호출하는 것으로 설정한다. 이러한 방법은 다음과 같이 2개의 인수를 가지고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Route::메소드(값, 함수);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;첫번째 인수가 라우팅에 할당되는 드레스 등의 정보를 나타내는 것이다. 이 값은 메소드에 의해 다소 내용이 다르다. get 메소드에는 주소를 나타내는 텍스트이며, group에서는 주소 정보를 정리한 배열되어 있기도 한다. (자세한 내용은 나중에)&lt;/p&gt;
&lt;p&gt;그리고, 두번째 인수가 거기에 액세스 되었을 때 호출되는 처리이다. 이 함수에서 반환된 값이 해당 주소에 접근한 결과로 처리된다. 출력할 내용(텍스트)을 그대로 return해도 되고, HTML 등의 템플릿 파일을 반환하거나 컨트롤러의 호출 처리를 지정할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;route-클래스의-메소드&#34;&gt;Route 클래스의 메소드&lt;/h3&gt;
&lt;p&gt;Route에 포함되어 있는 라우팅 설정을 위한 방법에 대해 간단하게 정리하고 설명한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Route::get(주소, 함수);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GET 액세스 되었을 때의 라우팅을 설정한다. 첫번째 인수는 할당 주소를 텍스트로 제공한다. 두번째 인수의 함수로 텍스트를 return하면 그것이 그대로 출력된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Route::post(주소, 함수);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;POST 액세스 되었을 때의 라우팅을 설정한다. 기본적인 사용법은 get과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Route&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;주소&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Route&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;주소&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTTP에는 PUT, DELETE라는 액세스도 있다. 이는 수정 및 삭제를 위한 메소드이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;주소&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Route&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;배열&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;주소&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여러 HTTP 메소드에 대응하기 위한 것이다. any는 모든 HTTP 메소드(GET, POST, PUT 및 DELETE)에 라우팅한다. match는 첫번째 인수에 HTTP 메소드명의 배열(예를 들어, &lt;code&gt;[&#39;get&#39;, &#39;post&#39;]&lt;/code&gt;)을 준비하고,  그 HTTP 메소드에 액세스하기 위해 라우팅한다.&lt;/p&gt;
&lt;p&gt;그러면 간단한 예제를 만들어 보자. routes.php를 아래와 같이 코드를 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Route&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/helo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;this is sample page.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 서버를 기동하고, 다음 주소를 방문하여 본다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:8000/helo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:8000/helo&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;액세스하면 Hello World라는 제목의 페이지가 표시된다. 이것이 &lt;code&gt;Route::get&lt;/code&gt; 메소드에서 생성된 표시이다.&lt;/p&gt;
&lt;p&gt;예제를 보면, get 메소드의 첫번째 인자는 &lt;code&gt;/helo&lt;/code&gt;로 지정되어 있다. 여기에 액세스하면, 두번째 인수의 함수에서 return되는 HTML 텍스트가 그대로 다시 전송 표시되는 것이다. 이렇듯 라우팅 기능만으로, 주소로 접근하여 화면에 무언가를 표시하는 것이 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;탬플릿-작성&#34;&gt;탬플릿 작성&lt;/h2&gt;
&lt;p&gt;Route 클래스 메소드에서의 return으로 HTML 코드를 텍스트로 제공하고 반환하는 방식으로는 복잡한 표시는 만들기 힘들 것이다. 아무래도 미리 HTML 파일을 준비해 두어, 그것을 로드하여 이용하는 방식이 쉬울 것이다.&lt;/p&gt;
&lt;p&gt;Laravel에서는 화면 표시용 템플릿을 미리 준비해두고, 그것을 이용하여 화면 표시할 수 있다. 이 템플릿은 응용 프로그램의 resources 폴더에 있는 views 폴더에 배치한다.&lt;/p&gt;
&lt;p&gt;그러면 간단한 템플릿을 만들어 보자. views 폴더에 helo.php 라는 이름으로 PHP 파일을 작성한다. 여기에 아래와 같이 소스 코드를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Sample&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    body&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;gray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    h1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;font&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;font&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;weight&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bold&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Sample&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$message&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;보면 알 수 있듯이 매우 간단한 HTML 코드이다. 그러나 중간에 한곳에만 PHP는 태그가 포함되어 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$message&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 변수 &lt;code&gt;$message&lt;/code&gt; 값을 출력한다. 템플릿은 이처럼 매우 일반적인 PHP 파일로 준비해 둔다. 특별한 것은 아무것도 없다.&lt;/p&gt;

      </description>
      
      <category>Laravel</category>
      
      <category>php</category>
      
      <category>WEB</category>
      
    </item>
    
    <item>
      <title>Laravel</title>
      <link>https://www.devkuma.com/docs/laravel/</link>
      <pubDate>Wed, 10 Jan 2018 21:43:13 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/laravel/</guid>
      <description>
        
        
        &lt;p&gt;Laravel PHP를위한 MVC 아키텍처를 기반 Web 응용 프로그램 프레임워크이다. 이 프레임 워크의 사용법에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>Laravel</category>
      
      <category>php</category>
      
      <category>WEB</category>
      
    </item>
    
  </channel>
</rss>
