<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Stack</title>
    <link>https://www.devkuma.com/tags/stack/</link>
    <image>
      <url>https://www.devkuma.com/tags/stack/logo/180x180.jpg</url>
      <title>Stack</title>
      <link>https://www.devkuma.com/tags/stack/</link>
    </image>
    <description>Recent content in Stack on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>kc@example.com (kc kim)</managingEditor>
    <webMaster>kc@example.com (kc kim)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>스택 (Stack) 데이터 구조에 대한 설명</title>
      <link>https://www.devkuma.com/docs/data-structure/stack/</link>
      <pubDate>Sun, 10 Apr 2022 01:49:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/data-structure/stack/</guid>
      <description>
        
        
        &lt;h2 id=&#34;스택stack의-개념&#34;&gt;스택(Stack)의 개념&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스택(stack)은 쌓아놓은 더미를 말한다.&lt;/li&gt;
&lt;li&gt;한 쪽 끝에서만 자료를 넣고 뺄 수 있는 후입선출(LIFO:Last In First Out) 형식의 자료 구조이다.
&lt;ul&gt;
&lt;li&gt;가장 최근에 들어온 데이터가 가장 먼저 나간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;스택의-구조&#34;&gt;스택의 구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스택 상단: top&lt;/li&gt;
&lt;li&gt;스택 하단: 불필요&lt;/li&gt;
&lt;li&gt;요소, 항목&lt;/li&gt;
&lt;li&gt;삽입/삭제 연산&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/data-structure/stack-1.png&#34; alt=&#34;Stack&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;스택stack의-연산&#34;&gt;스택(Stack)의 연산&lt;/h2&gt;
&lt;p&gt;스택(Stack)는 LIFO(Last In First Out) 를 따른다. 즉, 가장 최근에 스택에 추가한 항목이 가장 먼저 제거될 항목이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x): 주어진 요소 x를 스택의 맨 위에 추가한다.&lt;/li&gt;
&lt;li&gt;pop(): 스택이 비어있지 않으면 맨 위에 있는 요소를 삭제하고 반환한다.&lt;/li&gt;
&lt;li&gt;isEmpty(): 스택이 비어있으면 참(true)을 아니면 거짓(false)을 반환한다.&lt;/li&gt;
&lt;li&gt;peek(): 스택이 비어있지 않으면 맨 위에 있는 요소를 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;li&gt;isFull(): 스택이 가득 차 있으면 참(true)을 아니면 거짓(false)을 반환한다.&lt;/li&gt;
&lt;li&gt;size(): 스택내의 모든 요소들의 개수를 반환한다.&lt;/li&gt;
&lt;li&gt;display(): 스택내의 모든 요소들의 출력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;스택stack의-용도&#34;&gt;스택(Stack)의 용도&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 호출&lt;/li&gt;
&lt;li&gt;재귀 알고리즘을 사용하는 경우 스택이 유용하다.
&lt;ul&gt;
&lt;li&gt;재귀 알고리즘
&lt;ul&gt;
&lt;li&gt;재귀적으로 함수를 호출해야 하는 경우에 임시 데이터를 스택에 넣어준다.&lt;/li&gt;
&lt;li&gt;재귀함수를 빠져 나와 퇴각 검색(backtrack)을 할 때는 스택에 넣어 두었던 임시 데이터를 빼 줘야 한다.&lt;/li&gt;
&lt;li&gt;스택은 이런 일련의 행위를 직관적으로 가능하게 해 준다.&lt;/li&gt;
&lt;li&gt;또한 스택은 재귀 알고리즘을 반복적 형태(iterative)를 통해서 구현할 수 있게 해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;웹 브라우저 방문기록 (뒤로가기)&lt;/li&gt;
&lt;li&gt;실행 취소 (undo)&lt;/li&gt;
&lt;li&gt;역순 문자열 만들기&lt;/li&gt;
&lt;li&gt;수식의 괄호 검사 (연산자 우선순위 표현을 위한 괄호 검사)
&lt;ul&gt;
&lt;li&gt;Ex) 올바른 괄호 문자열(VPS, Valid Parenthesis String) 판단하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;계산기(후위 표기법 계산)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/data-structure/stack-2.png&#34; alt=&#34;스택(Stack)의 사용 사례&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gmlwjd9405.github.io/2018/08/03/data-structure-stack.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;자료구조 | 스택(Stack)이란&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>Data Structure</category>
      
      <category>Stack</category>
      
    </item>
    
  </channel>
</rss>
