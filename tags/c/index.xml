<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – C</title>
    <link>https://www.devkuma.com/tags/c/</link>
    <image>
      <url>https://www.devkuma.com/tags/c/logo/180x180.jpg</url>
      <title>C</title>
      <link>https://www.devkuma.com/tags/c/</link>
    </image>
    <description>Recent content in C on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>C 언어 | 컴퓨터 시스템 개발</title>
      <link>https://www.devkuma.com/docs/c/%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B0%9C%EB%B0%9C/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B0%9C%EB%B0%9C/</guid>
      <description>
        
        
        
      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 컴퓨터 시스템 개발 | 프로그램의 구조</title>
      <link>https://www.devkuma.com/docs/c/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EA%B5%AC%EC%A1%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EA%B5%AC%EC%A1%B0/</guid>
      <description>
        
        
        &lt;p&gt;프로그램이 작동하는 방식과 응용 프로그램이나 운영 체제 등 소프트웨어의 종류에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;소프트웨어와-프로그래밍&#34;&gt;소프트웨어와 프로그래밍&lt;/h2&gt;
&lt;p&gt;만약 이미 C언어 이외의 프로그래밍 경험이 있고, 프로그램이 어떤 것인지를 이해한다면 이 항목은 건너 뛰어도 된다.&lt;/p&gt;
&lt;p&gt;모든 컴퓨터는 그 시스템은 달라도 &amp;ldquo;소프트웨어&amp;quot;라는 논리적인 정보에 의해 움직이고 있다. 소프트웨어는 컴퓨터가 수행해야 할 처리의 절차와 정보를 기록하는 프로그램이다. 컴퓨터가 부팅을 하고 그 때부터 정해진 절차에 따라 프로그램이 CPU에 로드된 컴퓨터의 전원이 꺼질 때까지 실행을 계속하고 있다. 컴퓨터는 소프트웨어 없이 움직일 수 없다.&lt;/p&gt;
&lt;p&gt;CPU가 읽고 처리하는 프로그램은 기계어라고 하는 수치만으로 표현된 데이터로 구성되어 있다. 이 수치는 각각 CPU가 정하고 있는 의미로 할당되어 있으며, CPU는 명령을 읽고, 가져온 명령을 해석하고 실행한다. CPU가 다음에 읽어 들일 명령의 위치를 판단하고 프로그램을 넣는 동작을 패치(fetch)라고 한다. 이 패치 사이클과 명령어 실행 사이클을 반복하여 제대로 된 프로그램이 작동하게 된다.&lt;/p&gt;
&lt;p&gt;그러나 프로그래머가 만드는 대부분의 소프트웨어 응용 프로그램은 컴퓨터의 전원을 켠 후 바로 동작하는 프로그램을 만드는 것은 아니다. 애플리케이션은 응용 소프트웨어 또는 응용 프로그램이라고도 불리며, 컴퓨터로 업무 처리 등 특정 이용 목적을 가지고 만들어진 소프트웨어를 가리킨다. 그럼, 응용 소프트웨어를 실행하기까지의 과정은 어떻게 되는 것인가?&lt;/p&gt;
&lt;p&gt;컴퓨터의 전원을 켜면 처음에 정해진 프로그램이 실행된다. 그리고 하드웨어의 초기화 처리가 종료된 시점에서 정해진 기록 장치에서 프로그램을 읽는다. 이러한 일련의 동작을 부팅이라고 한다. 부트 프로세스에 대한 자세한 내용을 알고 있는 프로그래머는 극히 일부이며, 일반 프로그래머는 알 필요가 없다.&lt;/p&gt;
&lt;p&gt;부팅 프로세스가 완료되면 운영 체제가 시작된다. 운영 체제(Operating System)는 물리적 컴퓨터의 제어 및 시스템 관리, 기본적인 작업 환경을 제공하는 소프트웨어로, 기본 소프트웨어라고도 한다. 운영 체제가 없으면 컴퓨터를 사용할 수 없다. 대표적인 운영 체제는 Microsoft Windows와 Solaris, HP-UX OS/2, Linux 등이 있다.&lt;/p&gt;
&lt;p&gt;우리가 만드는 소프트웨어는 운영 체제를 토대로 한다. 물론 운영 시스템도 프로그램이기 때문에 개인적으로도 만들 수 있지만, 그러기 위해서는 상응하는 개발 경험과 정보 과학 및 시스템에 대한 고급 지식이 필요하다. 그러나 응용 소프트웨어는 운영 체제에서 실행되므로 하드웨어 지식은 그다지 필요하지 않는다. 운영 체제가 제공하는 기능을 사용하여 효율적으로 원하는 프로그램을 구축할 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;비즈니스 응용 프로그램이나 게임 소프트, 심지어 바이러스조차도 어떤 기본 소프트웨어의 위에서 실행되는 응용 소프트웨어이다.&lt;/p&gt;
&lt;p&gt;한편, 이 책에서는 &amp;ldquo;시스템&amp;quot;이라는 말을 많이 사용하고 있는데, 이는 운영 체제의 단순히 줄인 것이  아니라 하드웨어와 소프트웨어로 구성된 정보 처리 환경 전체를 의미한다. 예를 들어, 운영 체제와 같이 동작하는 거대한 응용 소프트웨어를 움이지는 중간 언어라고 할 수 있는 데이터를 생성하기 위해 C언어가 사용될 가능성도 있다. 따라서 C언어 동작 대상이 반드시 운영 체제라고 할 수 없기 때문에, 시스템이라는 추상적 표현을 즐겨 사용하고 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 컴퓨터 시스템 개발 | C 프로그래밍 언어</title>
      <link>https://www.devkuma.com/docs/c/c-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/c-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/</guid>
      <description>
        
        
        &lt;p&gt;C 언어의 기본적인 특성과 국제 표준의 관계에 대해 설명하고, CPU가 인식 할 수 있는 기계어와 C 언어 등 텍스트로 표현 가능한 고급 언어의 관계에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;c-프로그래밍-언어&#34;&gt;C 프로그래밍 언어&lt;/h2&gt;
&lt;p&gt;C 언어는 1972년에 탄생한 프로그래밍 언어로 C++ 언어를 포함하여 현재 사용되고 있는 많은 프로그래밍 언어의 기초가 되고 있다. 어셈블리 언어와 같이 매우 세부적으로 제어할 수 있는 고급 언어로 제한이 적고 유연한 프로그래밍 언어로 80년대 이후 널리 보급이 됐다. 하드웨어 성향의 프로그램에 적합한 언어이기 때문에 OS의 핵심 부분이나 가전 제품 등에 내장되는 기기의 제어용 프로그램, 게임 등 다양한 분야에서 실제 사용되고 있다.&lt;/p&gt;
&lt;p&gt;현재는 C 언어를 기반으로 하는 C++ 언어와 함께 사용되는 경우가 많다. C++는 1980년대에 등장한 C 언어를 확장한 프로그래밍 언어이다. 문법은 C 언어에서 계승하고 있기 때문에 C 언어로 작성된 프로그램의 대부분은 그대로 C++로 컴파일 할 수 있다. 따라서 C++ 컴파일러는 C 컴파일러로 사용할 수 있는 것이 일반적이다. C++ 개발 환경이 있으면 C 언어를 학습 할 수 있다.&lt;/p&gt;
&lt;p&gt;C 언어는 탄생부터 현대에 이르기까지 오랜 역사를 가지고, 그 사이에 많은 전문 프로그래머에게 애용되어 온 일반적인 언어이기도 하다. 현재에도 C 언어는 전문 프로그래머의 등용문 같은 존재인 것은 잘 알려져 있다.&lt;/p&gt;
&lt;h2 id=&#34;국제-표준&#34;&gt;국제 표준&lt;/h2&gt;
&lt;p&gt;C 언어로 작성된 프로그램은 컴파일러에 의해 기계어로 번역되지 않으면 실행할 수 없다. 그래서 다양한 시스템을 위한 컴파일러가 만들어지는 것이지만, 컴파일러를 만드는 사람이 마음대로 새로운 기능(문법)을 추가하거나 일부 기능을 변경하면 어떻게 될까. C 언어 방언이 대량으로 생성된 소스 코드가 특정 컴파일러에 의존하게 되어, 다른 시스템의 컴파일러에서는 컴파일할 수 없게 되어 버린다.&lt;/p&gt;
&lt;p&gt;이러한 문제가 발생하지 않도록 전 세계적으로 사용되는 실용도 높은 프로그래밍 언어의 대부분은 국제 표준화 기구(International Organization for Standardization, ISO)에서 명확하게 문법이 정해져 있다. 표준화 기관에 의해 정해져 있는 문법을 사양이라고 하고, 이 사양에 따라 개발된 프로그램을 구현(또는 처리계)이라고 한다. ISO 표준을 따른다면 구현에 의존하지 않고 동일한 코드를 확실하게 컴파일할 수 있다.&lt;/p&gt;
&lt;p&gt;C 언어 같은 역사가 있는 언어의 경우 ISO 표준도 여러 버전이 존재한다. 첫번째 기준은 1989년 미국에서 제정된 ANSI X3.159-1989이다. 이후 ISO/IEC 9899:1990 국제 표준화된 현재에도 이 표준은 C 언어의 주류를 이루고 있다.&lt;/p&gt;
&lt;p&gt;C 언어 표준화의 역사&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;년도&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1972년&lt;/td&gt;
&lt;td&gt;탄생 표준화 이전&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1989년&lt;/td&gt;
&lt;td&gt;ANSI X3.159-1989,  ANSI로 표준화 통칭  C89&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1990년&lt;/td&gt;
&lt;td&gt;ISO/IEC 9899:1990, ISO로 표준화 통칭  C90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1995년&lt;/td&gt;
&lt;td&gt;국제화 대응&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018년&lt;/td&gt;
&lt;td&gt;ISO/IEC 9899:1990, C90의 개정 통칭 C99 I&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1989년에 ANSI에서 표준화되기도 이전에 C 언어를 개발한 Brian Kernighan 씨와 Dennis Ritchie 씨의 공저 &amp;ldquo;프로그래밍 언어 C&amp;rdquo;(The C Programming Language) 표준이었다. 이 두사람 이름의 머리 글자에서 K&amp;amp;R이라고도 한다. 지금도 C 언어 개발자를 위한 성경적인 책으로 교과서처럼 추천하는 기술자도 적지 않지만, 코드가 오래되었고 덧붙여 초보자에게 배우기 쉬운 책이라고 말할 수 없다. 컬렉션으로 권장하지만, 학습을 위한 다른 책을 추천한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/The_C_Programming_Language%2C_First_Edition_Cover.svg.png&#34; alt=&#34;First edition&#34;&gt;
&lt;img src=&#34;https://www.devkuma.com/docs/c/200px-The_C_Programming_Language_cover.svg.png&#34; alt=&#34;Second edition&#34;&gt;&lt;/p&gt;
&lt;p&gt;그후의 국제 표준 규격은 ANSI X3.159-1989를 기반으로 하고 있기 때문에, 지금도 C 언어 표준을 ANSI라고 부르는 경우도 적지 않다. 1990년에 제정된 ISO/IEC 9899:1990은 통칭 C90이라고 하고, 최신 표준은 2018년에 제정된 ISO/IEC 9899:2018을 통칭 C99이라고 한다.&lt;/p&gt;
&lt;p&gt;주류 컴파일러의 대부분은 C90을 준수하고 있는데, C99에 대한 대응에는 편차가 있다. 현재는 C 언어의 기능밖에 사용하지 않는 코드여도 C++ 언어 코드로 컴파일하는 경우도 많고, 기능으로도 C++가 뛰어 나기 때문에 C 언어 사양을 확장할 필요성이 적기 때문에 것이다.&lt;/p&gt;
&lt;h2 id=&#34;기계어와-고급-언어&#34;&gt;기계어와 고급 언어&lt;/h2&gt;
&lt;p&gt;CPU가 직접 인식할 수 언어는 기계어로 작성된 프로그램이다. 기계어는 순수한 바이너리 데이터이므로, 그 마음만 먹으면 바이너리 편집기에서만으로 프로그래밍을 할 수 있다. 그런데 숫자만으로는 인간은 읽고 쓰기가 어렵기 때문에 기계어의 숫자를 알파벳으로 대체한 어셈블리 언어라는 것도 있다.&lt;/p&gt;
&lt;p&gt;그러나 오늘날 기계어나 어셈블리 언어를 사용하는 프로그래머는 거의 없다. 이 언어들을 사용한 개발은 너무 비효율적이다. 기계어나 어셈블리 언어를 작성하는 경우 다른 프로그래밍 언어에서 필요하지 않은 계산과 설계가 필요하며, 관리가 매우 어렵다.&lt;/p&gt;
&lt;p&gt;그래서 숫자나 기호만으로 된 이해하기 어려운 프로그래밍보다 더 인간이 이해하기 쉬운 언어로 소프트웨어를 개발하기 위해 태어난 것이 프로그래밍 언어이다. 보통 기계어나 어셈블리 언어와 같은 컴퓨터 측의 언어를 저급 프로그래밍 언어라고 부르며, 인간의 언어에 가까운 언어를 고급 프로그래밍 언어라고 한다. C언어와 이 밖에 유명하고 많이 사용되고 있는 언어인 BASIC 또는 Java도 고급 언어에 속한다.&lt;/p&gt;
&lt;p&gt;그러나 어떤 형태로든 최종적으로 기계어로 번역되지 않으면 CPU가 프로그램을 실행할 수 없다. 고급 프로그래밍 언어와 어셈블리 언어로 작성된 텍스트를 원시 프로그램 (또는 소스 프로그램)이라고 하고, 이를 기계어로 번역된 코드를 목적 프로그램 (또는 오브젝트 프로그램)이라고 한다.&lt;/p&gt;
&lt;p&gt;기계어로 번역에는 몇 가지 방법이 있다. C언어는 원시 프로그램을 한꺼번에 목적 프로그램으로 변환한 후에 이를 기계어로 실행하는 방법을 사용한다.&lt;/p&gt;
&lt;p&gt;한편, BASIC과 스크립트 언어 등은 원시 프로그램을 한 문장마다 읽고, 이것을 해석하고 실행하는 방식을 채택하고 있다. 이 경우 텍스트 데이터를 직접 실행할 수 있기 때문에 대화적인 개발을 할 수 있는 장점이 있지만, 실행에 문장을 순서대로 해석해야 하기 때문에 속도가 크게 저하된다는 것과, 원시 프로그램을 해석하고 실행하는 인터프리터라는 프로그램이 필요하다는 단점도 있다.&lt;/p&gt;
&lt;p&gt;C언어는 최종적으로 기계어로 변환되기 때문에, 최적의 형태로 수행할 수 있다. 따라서 실행 속도가 빠르다는 장점이 있지만, 한 번 컴파일해야 한다는 것과, 컴파일된 실행 파일은 특정 시스템에 의존되기 때문에 호환성이 약하다는 약점을 가지고 있다. 그러나 현재 사용되고 있는 대부분의 프로그래밍 언어는 C언어를 기반으로 하고 있는 것이 많고, 컴퓨터의 본질적인 이해를 위해서는 C언어 학습이 필수가 되고 있다. 또한 C언어는 기계어에 가까운 고급 언어이므로 빠른 프로그램을 제공할 수 있으며, 시스템의 높은 성능을 발휘시킬 수 있다.&lt;/p&gt;
&lt;p&gt;또한 C 언어를 발전시킨 프로그래밍 언어로 C++ (시 플러스 플러스)라는 언어가 있다. 이는 C 언어에 객체 지향이라는 개념을 도입한 것으로, 거대하고 유연한 시스템을 구축할 때 적합하다. C++는 많은 개발 현장에서 사용되고 있는데, 이것도 C언어가 기반이 되고 있다.&lt;/p&gt;
&lt;p&gt;이 책에서는 C 언어를 배움으로써 C 언어에서 파생된 많은 프로그래밍 언어 학습의 길을 열 수 있을 것이다. 현재는 다양한 기술과 프로그래밍 언어들 이 속속 등장하고 있는데, 그 대부분은 C 언어의 영향을 받고 있다. C 언어를 아는 것은 상급 프로그래머의 첫 걸음이 되기도 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 컴퓨터 시스템 개발 | 데이터 표현</title>
      <link>https://www.devkuma.com/docs/c/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84/</guid>
      <description>
        
        
        &lt;p&gt;컴퓨터의 세계에서는 전기적으로 켜거나 끄거나 하는 ON, OFF 두가지 상태를 되풀이 하는 2진법으로 모든 정보가 표현되어 있다. 여기에서는 2진법이나 음수 표현에 사용되는 보수에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;기본수&#34;&gt;기본수&lt;/h2&gt;
&lt;p&gt;정보 과학의 기초는 2진수와 16진수 등의 데이터 표현과 논리 연산에 있다. 특히 2진수와 16진수를 이해하지 않으면 C 언어를 충분히 이해할 수 없기 때문에 여기에서는 10진수를 2진수나 16진수로 변환하는 방법 등 정보의 기초 이론을 학습한다 .&lt;/p&gt;
&lt;p&gt;우리 인간이 사용하는 숫자는 10진수라고 한다. 10진수는 0 ~ 9까지의 숫자를 사용한 10개의 기호로 구성되어 있다. 이 10진수를 사용하여 숫자를 세는 것을 10진법이라고 하고, 자리수가 올라가는 숫자 10을 기본수라고 한다. 이는 많은 현대인이 초등학생 시절부터 당연하게 가르쳐 있기 때문에 10진법을 사용하는 것이 상식으로 되어 있지만 세계 인류가 반드시 10진수를 사용하는 것은 아니며 인류가 처음부터 10개의 기호로 숫자를 세고 있었던 것도 아니다.&lt;/p&gt;
&lt;p&gt;뉴기니의 일부 원주민은 신체의 일부를 숫자에 대응시켜 계산하는 방법을 사용하고 있으며, 홋카이도의 아이누 민족이나 로마 숫자는 5진법과 10진법을 혼합시킨 숫자를 사용하고 있다. 이렇게 대부분 숫자 5와 10을 기준으로 구분되어 있다는 특징을 볼 수 있다. 바빌로니아와 이집트의 숫자도 10개가 모이면 기호가 변화하는 구조를 가지고 있었다. 이것은 아이가 손가락으로 숫자를 세는 것처럼, 옛날 원시인이 손가락으로 손가락 계산을 하고 있었기 때문이라고 생각한다. 우리가 사용하는 0, 1, 2, 3~8, 9라는 기호는 인도가 발상지이다. 여기서 처음으로 0이라는 개념이 생기고, 이것이 아라비아에 전해져, 그 후 유럽 각지에 전해진 것으로 간주한다.&lt;/p&gt;
&lt;p&gt;그런데, 이것이 우리가 일상에서 사용하는 숫자의 태어난 과정이지만, 컴퓨터의 숫자 분석 방법은 인간의 그것과는 전혀 다르다. 적어도 컴퓨터는 10개의 손가락을 가지고 있지 않는다. 즉, 컴퓨터가 수를 계산할 경우, 10진법으로는 그다지 좋지않다.&lt;/p&gt;
&lt;p&gt;그래서 컴퓨터는 수를 전압의 차이로 판단하는 방법을 이용하고 있다. 전압이 높으면 1, 그렇지 않으면 0이라고 하는 방식이다. 즉, 컴퓨터가 취급하는 기호는 0과 1이고, 이 두 기호를 이용한 숫자를 2진수라고 부르는 것이다. 2진수는 1자리당 1까지만 계산되지 않기 때문에 2n마다 자릿수가 오른다. 이것은 n자리 번째 2진수의 값이 2(n - 1)인 것을 의미한다.&lt;/p&gt;
&lt;h3 id=&#34;표1---10진수와-2진수&#34;&gt;표1 - 10진수와 2진수&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;10진수&lt;/th&gt;
&lt;th&gt;2진수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이와 같이 10진수는 0과 1만을 사용하는 2진수로 변환하여 표현할 수 있고, 디지털 데이터는 2진수로 표현되어 있다. 그러나 표1을 보면 알 수 있듯이, 2진수는 숫자가 많아지기 때문에 인간은 읽기가 어렵다. 그래서 인간이 디지털 데이터를 직접 다루는 경우는 16진수를 사용하는 것이 일반적이다. 2진수를 다른 진수로 변환하여 표현하는 경우, 4진수, 8진수, 16진수 중 하나를 사용한다. 4진수는 3이상이 되면 자릿수가 올라가고, 8진수는 7이상이 되면 자릿수가 오른다.&lt;/p&gt;
&lt;p&gt;그러나 16진수의 경우는 숫자만으로는 표현할 수 없기 때문에, 9이상은 A에서 F까지의 알파벳으로 표현한다.&lt;/p&gt;
&lt;h3 id=&#34;표2---다양한-기본수&#34;&gt;표2 - 다양한 기본수&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;10진수&lt;/th&gt;
&lt;th&gt;2진수&lt;/th&gt;
&lt;th&gt;4진수&lt;/th&gt;
&lt;th&gt;8진수&lt;/th&gt;
&lt;th&gt;16진수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1011&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;1101&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;1110&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1111&lt;/td&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;표2는 2, 4, 8, 16을 기본수으로 수치의 관계를 나타낸다. 컴퓨터 내부의 디지털 데이터의 본질은 2진수이며, 프로그래밍 언어와 바이너리 편집기(디지털 데이터를 직접 편집 할 수 있는 소프트웨어) 등은 16진수로 표현한다.&lt;/p&gt;
&lt;h2 id=&#34;음수-표현과-보수&#34;&gt;음수 표현과 보수&lt;/h2&gt;
&lt;p&gt;2진수만으로 모든 것이 표현되는 세계에는 부호가 존재하지 않는다. 그래서 디지털에 음수를 표현하기 위해 사용되는 것이 보수이다. 보수(補數)는 보충을 해주는 수를 의미한다. 보수는 2종류로 나뉘는데, 더하면 하나 많은 숫자의 최소가 되는 값을 진정한 보수, 숫자의 범위에서 최대치가 되는 수를 모의 수라고 한다. 10진수로 생각하면 4에 대한 10의 보수는 6(4 + 6 = 10)이며, 9의 보수는 5(4 + 5 = 9)이다.&lt;/p&gt;
&lt;p&gt;2진수에서 가능한 보수는 1의 보수(모의 수)와 2의 보수(진정한 보수)이다. 1의 보수의 경우, 더해서 1이 되는 수는 0이면 1, 1이면 0이므로 단순히 각 숫자를 반전 시키면 된다는 것이다. 2의 보수의 경우는 더해서 1자리에서 최소가 되는 수를 생각한다. 예를 들어 2진수 1010의 2의 보수는 0110이다. 2의 보수를 요구하는 간단한 방법은 1의 보수에 1을 가산하면 된다.&lt;/p&gt;
&lt;p&gt;1100 1010의 1의 보수 = 0011 0101 (1100 1010 + 0011 0101 = 11111111)&lt;/p&gt;
&lt;p&gt;0110 1101 2의 보수 = 1001 0011 (0110 1101 + 1001 0011 = 100000000)&lt;/p&gt;
&lt;p&gt;2 진수는 2의 보수를 사용하여 음수를 표현할 수 있다. 첫째, 음수를 나타내기 위해 비트 열의 최상위 비트를 부호용으로 사용한다. 최상위 비트가 1이면 음수, 0이면 양수임을 보여준다. 양수의 경우 나머지 비트를 그대로 계산할 수 있지만 음수인 경우 나머지 비트 2의 보수가 절대 값이다.&lt;/p&gt;
&lt;p&gt;1111 1100라는 8비트 열을 상정한 경우, 최상위 비트가 1이므로 음수라고 판단할 수 있다. 그리고 나머지 7비트 2의 보수를 구하면되기 때문에 000 0100 즉 -4임을 알 수 있다. 2의 보수를 이용한 음수 표현은 감산 처리를 가산 처리할 수 있음을 나타낸다. 2의 보수에 의한 음수 표현은 정보 이론의 기초이며 C 언어를 배우는 데에도 중요하다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 컴퓨터 시스템 개발 | 하드웨어 구성</title>
      <link>https://www.devkuma.com/docs/c/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EA%B5%AC%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;표준 컴퓨터의 하드웨어 구성과 그 관계를 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;컴퓨터의-구조&#34;&gt;컴퓨터의 구조&lt;/h2&gt;
&lt;p&gt;다른 프로그래밍 언어의 경험으로 충분히 컴퓨터에 대한 이해를 하고 있는 경우나, 컴퓨터의 조립해 본 경험이 있으며, 하드웨어에 대한 지식이 있는 경우는 이 항목을 넘어 &amp;ldquo;개발 환경 및 컴파일러&amp;quot;로 이동 바란다.&lt;/p&gt;
&lt;p&gt;C 언어는 고급 언어이면서 저급 언어에 가장 가까운 언어이기도 하다. 따라서 C 언어를 구사하기 위해서는 어느 정도의 컴퓨터에 대한 지식이 필요하다. C에서 좌절하는 사람의 대부분은 C 언어 지식보다 컴퓨터에 대한 지식이 부족하고 있기 때문에 이해하기 힘든 경향이 있다. 그래서 이 자리에서는 컴퓨터 시스템에 대한 기본을 설명한다.&lt;/p&gt;
&lt;p&gt;원래 컴퓨터는 어떤 데이터를 입력하고 데이터를 적절한 방법으로 계산하여 그 결과를 출력하는 도구로 생각할 수 있다. 이를 실현하기 위해 필요한 최소한의 장치가 입력 장치, 출력 장치, 연산 장치, 제어 장치, 기억 장치 5개에 이를 컴퓨터의 5대 요소라고 한다.&lt;/p&gt;
&lt;h3 id=&#34;표1---컴퓨터-5-대-요소&#34;&gt;표1 - 컴퓨터 5 대 요소&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;장치명&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;입력 장치&lt;/td&gt;
&lt;td&gt;데이터를 컴퓨터로 전송하는 장치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;출력 장치&lt;/td&gt;
&lt;td&gt;계산 결과 데이터를 추출 장치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연산 장치&lt;/td&gt;
&lt;td&gt;데이터를 프로그램에 따라 계산하는 장치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;제어 장치&lt;/td&gt;
&lt;td&gt;다른 장치의 작동을 제어하는 장치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;저장 장치&lt;/td&gt;
&lt;td&gt;데이터를 저장하기위한 장치&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;그림1-컴퓨터-5-대-요소와-관계&#34;&gt;그림1. 컴퓨터 5 대 요소와 관계&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/5.jpg&#34; alt=&#34;컴퓨터의 5 대 요소와 관계&#34;&gt;&lt;/p&gt;
&lt;p&gt;입력 장치는 문자나 숫자를 입력하는 키보드나 좌표를 입력하는 포인팅 장치(마우스와 펜, 터치 스크린 등), 영상을 입력하는 스캐너, 마크 시트를 읽는 OMR, 시간을 입력하는 타이머 등 다양한 존재한다.&lt;/p&gt;
&lt;p&gt;출력 장치는 디스플레이가 대표적이지만, 그 외에도 프린터나 플로터 등이 존재한다.&lt;/p&gt;
&lt;p&gt;연산 장치와 제어 장치는 한 세트에서 중앙 처리 장치라고 한다. CPU라고 하면 알기 쉬울지도 모르겠다. 중앙 처리 장치는 입출력을 관리하고 컴퓨터 전체를 제어한다. 이것이 없으면 컴퓨터는 계산할 수 없기 때문에 컴퓨터의 중추 신경이라고 생각된다.&lt;/p&gt;
&lt;p&gt;저장 장치는 계산하는 데이터 및 계산 결과를 저장하기위한 장소로, 특히 CPU와 직접 회선으로 연결되어있는 중요한 기억 장치를 주기억 장치라고 한다. 프로그램은 데이터의 저장과 계산 결과를 저장하는 주기억 장치를 사용하기 때문에 주기억 장치에 대한 이해는 중요하다. 저장 장치는 메모리라고도 하지만, 일반적으로 메모리라는 용어를 사용하는 경우, 주기억 장치를 말한다. 컴퓨터는 이 밖에 하드 드라이브 또는 ROM과 같은 다른 저장 장치가 존재하고 이를 보조 기억 장치라고 한다. 주기억 장치는 컴퓨터의 전원을 끄면 저장했던 데이터가 삭제되지만, 보조 기억 장치는 전원을 꺼도 데이터가 저장되어 있다. 대신 주기억 장치는 데이터 액세스 속도가 빠른 CPU와 직접 데이터 주고 받는 것에 적합하지만, 보조 기억 장치는 데이터 액세스 속도가 주기억 장치보다 느린 CPU와의 데이터 교환에 적합하지 않다. 이와 같이, 기억 장치는 그 역할에 따라 성질이 다른다.&lt;/p&gt;
&lt;p&gt;이러한 저장 장치에 저장되는 데이터는 &amp;ldquo;2진수와 16진수&amp;quot;에서 학습한 2진수 바이너리 데이터이다. 이 때, 1자리 2진수 값을 &amp;lsquo;비트&amp;rsquo;라는 단위로 나타냈지만, CPU와 1비트 단위로 계산을 할 수는 없다. 최소 CPU의 계산 단위를 &amp;lsquo;바이트&amp;rsquo;라고 부르며, 일반적으로 8비트가 1바이트이다. 즉 많은 컴퓨터가 8비트를 하나의 덩어리로 취급한다.&lt;/p&gt;
&lt;p&gt;단, 8비트 = 1바이트가 아니기 때문에 주의해야 한다. 어디까지나 바이트는 컴퓨터의 최소 처리 단위를 나타내는 1바이트의 비트 수는 컴퓨터 아키텍처에 의존하는 문제이다. 그러나 일반적으로 8비트 단위로 처리되는 경우가 많고, 확실하게 8비트를 나타내는 단위가 필요하다. 그래서 네트워크 관련 서적에서는 8비트를 나타내는 단위 &amp;ldquo;octet&amp;quot;를 사용한다. 1바이트는 8비트 컴퓨터에 특화한 대화는 1바이트를 8비트로 한정하여 이야기를 진행시킬 수 있지만, 네트워크 관련 서적 등에서는 컴퓨터를 제한할 수 없기 때문에 octet이 사용된다 . 그러나 까다로운 때문에 이 책에서는 원칙적으로 1바이트를 8비트로 처리한다.&lt;/p&gt;
&lt;p&gt;저장 장치에는 어떤한 방법으로 1비트씩 데이터가 저장되어 있다. 데이터는 각각 바이트 단위로 취급되기 때문에, 저장 장치는 바이트마다 주소로 대체되는 숫자를 할당한다. 저장 장치의 데이터의 위치를 나타내는 이 숫자를 메모리 주소라고 하고, 프로그램은 메모리 주소를 사용하여 원하는 정보에 액세스한다. 이 아이디어는 C언어에서 중요한 &amp;ldquo;포인터&amp;quot;에서 자세히 설명한다. 이 장에서는 컴퓨터에서 처리되는 모든 데이터는 프로그램이 데이터에 액세스하기 위한 주소가 반드시 존재한다는 것을 기억하자. 어쨌든 프로그래밍 세계에서는 데이터를 참조하려면 데이터가 존재하는 위치를 지정해야 한다. 따라서 모든 데이터에 고유하게 식별할 수 있는 주소가 필요하다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문</title>
      <link>https://www.devkuma.com/docs/c/c-%EC%96%B8%EC%96%B4-%EC%9E%85%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/c-%EC%96%B8%EC%96%B4-%EC%9E%85%EB%AC%B8/</guid>
      <description>
        
        
        
      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 개발 환경 및 컴파일러</title>
      <link>https://www.devkuma.com/docs/c/%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EB%B0%8F-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EB%B0%8F-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC/</guid>
      <description>
        
        
        &lt;p&gt;C 언어로 프로그래밍을 하는데 필요한 툴의 구성 및 개발 환경에 대해 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;프로그래밍에-필요한-것&#34;&gt;프로그래밍에 필요한 것&lt;/h2&gt;
&lt;p&gt;어떤 작업에도 꼭 필요한 도구라는 것이 있다. 만화를 그리려면 원고 용지와 잉크, 펜, 자, 연필과 지우개, 스크린 톤이 필요하고, 음악 연주는 악기 외에도 악보와 악보대, 연습용 튜너와 박자 측정기 등도 필요할 것이다. 프로그래밍도 마찬가지로, 단지 컴퓨터가 있으면 만들 수 있는 것은 아니다. 효율적으로 양질의 프로그램을 생산하려면, 고급 개발 환경이 필요하다. 개발 환경은 프로그램을 만들기 위한 프로그램이다. 프로그램의 오류를 찾는 디버거(debugger) 및 프로그램을 작성하기 위한 편집기, 개발 프로세스를 자동화 해주는 CASE Tool 등이 있다.이러한 개발 환경도 프로그램에 의해 만들어지고 있기 때문에, 마음만 먹으면 스스로 만들어 버리는 것도 불가능하지는 않지만, 그런 수 있는 기술이 있다면 이 책을 손에 들고 읽고 있을 일이 없을 것이다. 그래서이 자리에서 간단히 C 언어 개발에 필요한 정보를 소개한다.&lt;/p&gt;
&lt;p&gt;C 언어는 원시 프로그램을 목적 프로그램으로 번역하여, 그 후에 실행 가능한 형식으로 정리부터 하고 실행하는 방법으로 진행한다. 이와 같이 원시 프로그램을 목적 프로그램으로 변환하는 작업을 컴파일이라고 한다. 원시 프로그램을 목적 프로그램으로 변환하는 소프트웨어를 컴파일러라고 하며, C 언어로 작성된 소스를 실행하려면 컴파일러가 필요하다. C 언어의 개발 단계는 텍스트 편집기에서 원시 프로그램을 작성하고, 컴파일러를 사용하여 이를 목적 프로그램으로 변환한다. 그리고 마지막으로 링커(linker)라는 소프트웨어를 사용하여 필요한 목적 프로그램을 결합시켜 실행 파일을 생성한다. 대부분의 경우, 링커 등의 실행 가능 파일 형식을 만드는데 필요한 도구는 컴파일러에 포함되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;그림1-프로그램-작성-흐름&#34;&gt;그림1 프로그램 작성 흐름&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/flow.png&#34; alt=&#34;프로그램 작성 흐름&#34;&gt;&lt;/p&gt;
&lt;p&gt;컴파일러를 구하는 방법은 다양하지만, 만약 당신이 Microsoft Windows 사용자이며, 컴퓨터 초보자라면 Microsoft Visual C ++는 통합 개발 환경을 권장한다. 이러한 개발 환경은 그래픽 소프트웨어를 개발할 수 있으며, 필요한 에디터와 컴파일러, 문서 등이 갖추어져 있다. C 언어 프로그램을 작성하여, 버튼을 누르는 것만으로 컴파일, 링킹, 실행을 할 수 있기 때문에 초보자도 다루기 쉽고, 본격적인 개발에 적합하다.&lt;/p&gt;
&lt;p&gt;인터넷에서 무료로 제공되는 무료 컴파일러도 존재한다. 예를 들어, Embarcadero 사가 제공하는 Borland C++ Compiler 등을 사용할 수 있다. Borland C++ Compiler는 개인의 개발과 학습을 목적으로 공개된 컴파일러이며, 어떠한 보증이 없더라도 설치가 제한적이지 않다. 그러나 Borland C++ Compiler는 통합 개발 환경이 아니기 때문에, 커맨드 라인을 사용해야 한다.&lt;/p&gt;
&lt;p&gt;텍스트 편집기로 작성된 C 언어 프로그램을 어떻게 컴파일하고 실행하거나 컴파일러에 따라 달라진다. 일반적으로 C 언어의 소스 파일 &amp;ldquo;.C&amp;rdquo; 확장자를 가진다. 또한, C 언어를 발전시킨 객체 지향 언어인 C ++ 언어 확장 &amp;ldquo;.CPP&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;Microsoft Visual C++와 Borland C++ Compiler 등은 C++ 컴파일러이지만 C++ 언어는 C 언어와 호환성이 있기 때문에 C++ 컴파일러로 C 언어를 컴파일 할 수 있다. C++ 컴파일러에서 C 언어를 컴파일하려면 반드시 확장자를 &amp;ldquo;.C&amp;quot;로 해야 한다. &amp;ldquo;.CPP&amp;quot;로 컴파일하면, 컴파일러는 C++ 언어로 컴파일하기 때문에, 경우에 따라서는 오류가 발생한다. 컴파일에 따라서는 확장자에 관계없이, 컴파일러 옵션으로 설정할 수 있는 것도 있을지도 모르겠지만, 자세한 내용은 컴파일러 함께 제공된 설명서를 참조하도록 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 처음하는 C 언어</title>
      <link>https://www.devkuma.com/docs/c/%EC%B2%98%EC%9D%8C%ED%95%98%EB%8A%94-c-%EC%96%B8%EC%96%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%B2%98%EC%9D%8C%ED%95%98%EB%8A%94-c-%EC%96%B8%EC%96%B4/</guid>
      <description>
        
        
        &lt;p&gt;프로그램의 시작점(entry point)이 되는 main() 함수의 작성과 printf() 함수를 사용하여 화면에 텍스트를 표시하는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;첫-번째-프로그램&#34;&gt;첫 번째 프로그램&lt;/h2&gt;
&lt;p&gt;C 언어 프로그램은 복수의 명령을 모은 함수(function)라는 블럭이 실행 단위인 부품이 합쳐지고 구성되어 이루어 진다. 반드시 C 언어 프로그램은 하나 이상의 함수가 존재하고 이 함수에서 명령문이 작성되어 있다. 함수에는 여러가지 프로그램의 흐름이 하나의 묶음으로 등록된다.&lt;/p&gt;
&lt;p&gt;함수는 함수를 호출로 부터 어떤 정보를 받아 정보를 처리하고 그 결과를 반환할 수 있다. 예를 들어, 삼각형의 면적을 계산하는 함수를 만드는 경우, 함수는 삼각형의 밑변과 높이를 받는다. 이 때, 함수가 받는 정보를 인수라고 한다.&lt;/p&gt;
&lt;p&gt;함수는 받은 인수부터, &amp;ldquo;밑변 × 높이 ÷ 2&amp;quot;를 구하고, 그 결과를 호출한 곳으로 반환한다. 이 함수가 반환하는 값을 반환 값이라고 한다. 여기서 프로그래밍은 수학이 아니기 때문에, 함수가 받은 값과 반환 값은 수치뿐만은 아니다. 문자열이거나, 값을 받지 않거나, 반환하지 않는 함수도 있을 수 있다. 중요한 것은 어떤 목적의 하나의 처리를 함수로 정리하고, 그것을 재사용(여러 번 호출)할 수 있다는 것이다. 함수에 대해 구체적으로 이해하기 위해서는, C 언어의 기본을 더 알아야 할 필요가 있다. 자세한 내용은 나중에 &amp;ldquo;함수&amp;quot;에 대해 설명할 것이기 때문에, 이 자리에서는 상기한 바와 같은 함수의 기본 개념을 이해한다.&lt;/p&gt;
&lt;p&gt;함수를 작성하려면, 앞에서 설명한 인수와 반환 값의 지정 및 함수 이름을 지정한다. 그리고 함수는 중괄호 {}로 둘러싸인 명령문으로 구성된다.&lt;/p&gt;
&lt;h3 id=&#34;함수의-정의&#34;&gt;함수의 정의&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;반환값의형식 함수명 (가인수...)
{
    명령문
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;반환값의 형식은 값이 몇 바이트로 구성되는 것인가라고 하는 같은 정보를 컴파일러에 알리기 위한 것이다. 형식에 대한 자세한 내용은 곧 나중에 자세히 설명한다. 가인수&amp;hellip;은 함수가 받아오는 값을 쉼표로 구분된 목록이다.&lt;/p&gt;
&lt;p&gt;이와 같은 함수를 작성하는 것을 정의라고 한다. 그러나 이것만으로는 아직 실행되지 않는다. 함수는 호출되어야 처음으로 동작한다. 그럼, C 언어 프로그램은 어디부터 시작되는 것인가? 기본적으로 프로그램은 위에서 아래로 흘러간다. 그러나, C 언어가 실제로 실행되는 것은 main() 함수부터 시작하도록 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;main-함수-정의&#34;&gt;main() 함수 정의&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a40000&#34;&gt;명령문&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;따라서, 반드시 C 언어에는 main() 함수를 정의해야 한다. 반환값의 형식인 int는 숫자 데이터를 반환하는 것을 나타낸다. C 언어는 대소문자를 구별하기 위해 Main() 혹은 MAIN()라고 쓴다면 컴파일러는 인식하지 않기 때문에 주의해야 한다. 가인수&amp;hellip;에는 값을 받지 않는다는 것을 나타내는 void를 지정하고 있다.&lt;/p&gt;
&lt;p&gt;응용 프로그램을 기동하면 main() 함수 안의 명령이 순서대로 실행되고, 함수의 끝에 도달하면 응용 프로그램이 종료된다. main() 함수를 호출하는 것은 운영 체제 시스템이며, 반환 값은 운영 체제에 반환된다. 덧붙여서 운영 체제 시스템이 호출해야 하는 프로그램의 첫 번째 실행 지점을 응용 프로그램 엔트리(entry) 포인트라고 한다. 그럼 세계 제일 간단한 C 언어 프로그램을 작성해 보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 아무것도 하지 않고 즉시 종료하는 간단한 프로그램이다. 코드1를 실행하면 명령 프롬프트에 아무것도 표시되지 않는다. 우선 이 프로그램을 사용하여 컴파일러를 사용하여 제대로 컴파일할 수 있는지 여부를 확인해 보자. 코드에 오류가 없으면 오류 없이 빌드가 될 것이다.&lt;/p&gt;
&lt;p&gt;컴퓨터, 그리고 프로그래밍 언어는 융통성이 없는 완고한 점이 있다. 우리 인간은 문장 속에 약간의 애매함과 마침표와 쉼표의 오타, 오탈자 등의 기술 실수가 있었다고 해도 앞뒤 문장의 흐름 등에서 상대의 의도를 추론하고 이해할 수 있다. 그러나 컴퓨터의 세계에서는 약간의 모호함과 기술 실수도 허용되지 않는다.&lt;/p&gt;
&lt;p&gt;만약 코드에서 세미콜론(;)과 콜론(:)의 오타가 하나라도 있으면 오류로 빌드할 수 없다. 실제로 이러한 단순한 오타 초보자가 자주 머리를 아프게 하는 오류의 원인이 되고 있다. 만약 이 책의 샘플 프로그램을 열중하다가 오류가 발생한다면, 기호의 위치와 종류를 포함하여 정확히 입력되어 있는지 확인한다. 특히 괄호&amp;rdquo;(&amp;ldquo;와 중괄호 &amp;ldquo;{&amp;ldquo;의 실수와 특수 문자가 섞여있는 경우 발견이 어려울 수 있으므로 주의하도록 한다.&lt;/p&gt;
&lt;p&gt;return은 함수를 종료하고 호출한 곳에 반환하는 것을 나타내는 문장이다. 즉, 이 프로그램은 실행 직후 return에 의해 제어를 호출한 곳에 반환하므로 즉시 종료하는 것이다. return 문은 다음과 같은 구문을 갖는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;반환&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;값&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;반환 값은 함수가 반환하는 값이 되는 식을 작성한다. 이 식의 형태는 함수를 정의하는 반환 형식과 호환이 되어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;텍스트-표시하기&#34;&gt;텍스트 표시하기&lt;/h2&gt;
&lt;p&gt;다음은 화면에 문자를 표시하는 프로그램을 만들려고 하는데, 쇼킹한 것이 C 언어는 화면에 문자를 표시시키는 명령이 존재하지 않는다. 왜냐하면 하드웨어 다루는 처리는 프로그래밍 언어가 아니라 운영 체제의 역할이라고 생각하기 때문이다. 따라서 화면에 문자 출력은 운영 체제 서비스를 호출해야 한다. 그러나 화면에 문자를 표시하기 위해서만 그런 낮은 수준에 복잡한 것을 하는 것은 프로그래밍되지 않는다. 그래서 ANSI C 표준을 준수하는 컴파일러는 ANSI C 표준이 정하는 표준 라이브러리를 제공하고 있다. 표준 라이브러리는 입출력이나 복잡한 처리 등을 함수로 제공하고 있다. 우리 같은 프로그래머는 이 표준 함수를 이용하여 번거로운 작업을 생략할 수 있는 것이다.&lt;/p&gt;
&lt;p&gt;프로그램이 의도한대로 작동하는지 확인하기 위해 결과를 화면에 표시해야 한다. 그래서 프로그래밍 언어를 학습할 때는 먼저 반드시 텍스트를 표시하는 방법을 배운다.&lt;/p&gt;
&lt;p&gt;컴퓨터의 세계에서는 장비간에 데이터를 전달하는 것을 입출력(input/output)이라고 한다. 이 중에 다른 장비쪽으로 데이터를 송신하는 것을 출력이라고 하고, 다른 기기에서 데이터를 수신하는 것을 입력이라고 한다. 프로그램에서 다루고 있는 데이터를 화면에 표시하려면 데이터를 디스플레이에 출력해야 한다.&lt;/p&gt;
&lt;p&gt;화면에 텍스트를 표시만 하는 프로그램이라면 매우 간단하다. C에서 한 줄의 코드만으로 임의 데이터를 출력할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것으로 화면에는 큰 따옴표 &amp;ldquo;&amp;ldquo;로 표시한 텍스트 Hello, world!가 표시된다. 이 코드에 포함되어 있는 의미를 제대로 이해하는 것은 쉬운 일이 아니다.&lt;/p&gt;
&lt;p&gt;최초의 printf는 텍스트로 화면에 표시할 데이터를 출력하는 함수의 이름이다. printf() 함수에 데이터를 전달하면, 보통은 화면(Windows이면 명령 프롬프트)에 텍스트로 데이터가 표시될 것이다. 큰 따옴표로 묶인 부분 문자열이라고 한다. 문자열의 내용은 임의로 변경할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;include을-이용하여-헤더-추가&#34;&gt;#include을 이용하여 헤더 추가&lt;/h3&gt;
&lt;p&gt;표준 라이브러리 함수를 사용하려면 소스 라이브러리 함수의 정의를 포함하지 않으면 안된다. 다른 소스 파일을 포함하려면 #include라는 전 처리기 지시문이라는 명령어를 사용한다. 전처리에 대해서는 뒷부분에서 자세히 설명하겠지만, 여기서는 #include를 사용하여 다른 소스 파일을 포함할 수 있다는 것만 알기로 하자. 참고로 다른 파일을 포함하는 것을 인클루드라고 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;#34;헤더 파일 이름&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;헤더 파일 이름&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#include 구문은 위의 두 가지가 있는데, 큰 따옴표는 일반적으로 자신의 라이브러리 파일을 포함하는 경우에 이용하며, 컴파일러는 인클루드를 지정한 파일과 같은 디렉토리를 검색한다. 괄호를 사용하면 컴파일러는 표준 라이브러리 파일이 위치하고 있는 디렉토리를 검색한다. 일반적으로 표준 라이브러리를 포함하는 경우는 후자의 &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;이처럼 인클루드하여 이용되는 함수들을 정의한 라이브러리를 헤더 파일이라고 하고, &amp;ldquo;.H&amp;quot;를 확장자로 하여 저장되어 있다. 그 중에서도 앞으로 우리가 모든 프로그램에서 반드시 사용하게 될 라이브러리가 stdio.h 헤더 파일이다. 이 헤더 파일에는 문자를 화면에 표시하거나 파일 입출력 등의 기본적인 입출력을 지원하는 함수가 정의되어 있다. 다음 프로그램은 함수를 사용하여 화면에 문자를 표시한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 명령 프롬프트 문자열을 표시하는 프로그램이다. 코드 맨 위에 &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;가 추가되어 있는데, 이것은 printf() 함수의 기능을 사용하기 위해서 필요하다. 이 &lt;code&gt;#include&lt;/code&gt; 명령은 컴파일시 &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt;안에 지정된 파일을 코드에 통합하는 작용이 있다. &lt;code&gt;#include&lt;/code&gt; 명령으로 다른 소스 파일을 가져오는 것을 인클루드한다고 한다. 또한 stdio.h와 같은 표준 기능을 이용하기 위해서는 포함하는 파일을 헤더 파일(header file)이라고 한다.&lt;/p&gt;
&lt;p&gt;코드2는 stdio.h라는 헤더 파일을 소스 파일의 시작 부분에 불러올 수 있다. 이 stdio.h 파일 안에 &lt;code&gt;printf()&lt;/code&gt; 함수를 사용하기 위해서 필요한 코드가 포함되어 있다.&lt;/p&gt;
&lt;p&gt;이 프로그램은 표준 함수의 하나인 printf() 함수를 호출한다. printf() 함수는 인수에 문자열을 전달할 수 있고, 함수는 이 문자를 화면에 표시한다. C 언어에서 문자열을 큰 따옴표로 묶는다. 큰 따옴표로 둘러싸인 문자열을 문자열 리터럴이라고 한다. 위의 프로그램에서는 &amp;ldquo;Kitty on your lap&amp;quot;가 리터럴 문자열이다. 그 결과, 이 프로그램은 콘솔에 Kitty on your lap 문자열을 표시한다. printf() 함수에 전달하는 리터럴 문자열의 내용을 자신이 좋아하는 문자열로 대체하여 콘솔에 문자열이 표시되는지 시도해 보자.&lt;/p&gt;
&lt;p&gt;문자열의 끝에 있는 &lt;code&gt;\n&lt;/code&gt;는 줄바꿈을 나타낸다. Visual C++의 &amp;ldquo;디버깅하지 않고 시작&amp;quot;부터 기동하면, 프로그램 종료시에 &amp;ldquo;계속하려면 아무 키나 누르십시오.&amp;ldquo;라는 텍스트가 추가되므로 프로그램에서 출력된 결과의 레이아웃을 위해 사용하고 있을 뿐이다. 필요 없으면 생략해도 상관없다. 줄바꿈과 같은 눈에 보이지 않는 특수 문자를 처리하려면 이와 같이 기호를 사용하여 표현한다. 이러한 &lt;code&gt;\&lt;/code&gt;로 시작하는 문자열의 문자를 이스케이프 문자라고 한다. 문자로 &lt;code&gt;\&lt;/code&gt;를 표현하고 싶으면 &lt;code&gt;\\&lt;/code&gt;로 기술한다. 이스케이프 문자에 대한 자세한 내용은 앞으로 배우게 될 &amp;ldquo;상수&amp;quot;에서 자세히 설명한다.&lt;/p&gt;
&lt;p&gt;또한 리터럴 문자열은 줄바꿈할 수 없다. 위의 프로그램을 다음과 같이하면 컴파일러는 오류를 발생한다. 줄바꿈을 표현하는 기호을 가진 이유가 이것으로 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;printf() 함수의 인수로 지정하는 문자열 리터럴이 도중에 줄바꿈을 하고 있다. 이 경우 컴파일러는 큰 따옴표가 닫혀 있지 않다고 인식 오류를 출력한다. 그렇다면 긴 문자열의 경우, 한 줄로 길게 쓸 수 밖에 없다. 물론 그래도, 프로그램이 올바르게 작동을 하긴 하지만 소스의 가독성 떨어진다는 단점이 있다. 이 경우 해결 방법은 두 가지가 있다.&lt;/p&gt;
&lt;p&gt;하나는 개행 문자 앞에 &lt;code&gt;\&lt;/code&gt; 기호를 붙인다. 이 경우 &lt;code&gt;\&lt;/code&gt;는 행 연속 문자로 기능하고, &lt;code&gt;\&lt;/code&gt; 기호에 계속되는 개행 문자를 무시한다. 행 연속 문자는 문자열에서뿐만 아니라, 소스의 모든 곳에서 사용할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Kitty on \
your lap&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또 다른 방법은 단순히 문자열을 분할하여 작성하는 방법이다. C 언어에서는 큰 따옴표가 분할되는 경우는 컴파일할 시에 이를 결합한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Kitty on &amp;#34; &amp;#34;your lap&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어, 위의 공백으로 구분된 두 개의 문자열은 &amp;ldquo;Kitty on your lap&amp;quot;인 것으로 간주한다. 따라서 줄바꿈할 위치에 한번 문자열을 닫고, 개행 후에 문자열을 쓴다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;나 보기가 역겨워 가실때에는&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;말없이 고이 보내드리오리다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;영변의 약산 진달래꽃 아름따다&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;가실길에 뿌리오리다&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;가시는 걸음걸음 놓은 그 꽃을&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;사뿐히 즈려밟고 가시옵소서&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 앞에서 제시한 방법을 사용하여, 문자열의 중간에 줄바꿈을 시도하고 있다. 첫번째 printf() 함수에서 행 연속 문자를 사용하여 개행 문자를 제거하는 방법을 사용하고 있다. 두 번째 printf()은 중간에 문자열 리터럴을 닫고, 개행 후에 다시 문자열 자세히 쓴는 방법을 사용하여 있다. 혹은 데이터마다 printf()로 출력해도 된다. 두번째의 방법이라면 문자열을 닫은 후에 자유롭게 탭 문자 등을 삽입할 수 있기 때문에 일반적으로 두번째나 세번째의 방법이 사용된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 토큰과 문장</title>
      <link>https://www.devkuma.com/docs/c/%ED%86%A0%ED%81%B0%EA%B3%BC-%EB%AC%B8%EC%9E%A5/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%86%A0%ED%81%B0%EA%B3%BC-%EB%AC%B8%EC%9E%A5/</guid>
      <description>
        
        
        &lt;p&gt;C언어의 토큰과 문장에 대해 설명한다. 코드에 적혀있는 모든 문자 순서와 기호는 토큰이라는 최소 단위로 분해할 수 있다. 여러 토큰 순서는 문장라는 작은 실행 단위이다.&lt;/p&gt;
&lt;h2 id=&#34;코드의-최소-단위&#34;&gt;코드의 최소 단위&lt;/h2&gt;
&lt;p&gt;아무리 복잡하게 작성된 프로그램도 토큰(token)이라는 최소 단위의 텍스트로 분해할 수 있다. 토큰은 더 이상 분해할 수 없는 프로그램의 최소 단위이며, 영어의 단어에 해당하는 것이다. 프로그래밍 언어의 명령이 되는 문장은 여러 토큰으로 구성되어 있다.&lt;/p&gt;
&lt;p&gt;프로그래밍 언어를 기계어로 번역하기까지 여러 공정을 거쳐야 한다. 컴파일러에 입력된 텍스트는 소스 코드에 쓰여진 텍스트가 C언어에서 정하고 있는 문법을 준수하는지 여부를 확인하기 위해 토큰의 열에 분해된다. 이 공정을 어휘 분석이라고 한다.&lt;/p&gt;
&lt;p&gt;토큰에는 여러 종류가 있으며, 프로그래밍 언어의 사양에 정해진 키워드, 조작 대상의 이름을 나타내는 식별자, 계산 기호 등의 연산자 등이 있다. 토큰은 다음 6 가지로 분류된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;식별자 (identifer)&lt;/li&gt;
&lt;li&gt;키워드 (keyword)&lt;/li&gt;
&lt;li&gt;상수 (constant)&lt;/li&gt;
&lt;li&gt;문자열 리터럴 (string-literal)&lt;/li&gt;
&lt;li&gt;연산자 (operator)&lt;/li&gt;
&lt;li&gt;구분자 (punctuator)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;키워드는 C언어가 사양 레벨에서 예약되어 있는 이름(영단어)의 것으로, 이전의 프로그램에서 소개한 return 등은 키워드에 속한다. Visual C++ 같은 표준적인 개발 환경의 텍스트 편집기에서 파란색으로 표시된다.&lt;/p&gt;
&lt;p&gt;식별자는 작업하는 데이터 및 명령을 식별하기 위해 소스 상에 명명된 이름이다. 예를 들어, main 등의 함수 이름은 식별자이다.&lt;/p&gt;
&lt;p&gt;상수는 코드 상에 지정된 고정적인 값이다. 예를 들어 10과 3.14라는 같은 수치는 상수이다.&lt;/p&gt;
&lt;p&gt;문자열 리터럴도 상수와 마찬가지로 코드 상의 고정 값에서 큰 따옴표로 묶인 여러 문자를 나타낸다. 문자열 리터럴은 코드에 텍스트를 삽입할 수 있다.&lt;/p&gt;
&lt;p&gt;연산자는 계산을 위해 사용하는 기호으로써, + 기호와 - 기호 연산자에 속한다.&lt;/p&gt;
&lt;p&gt;구분자는 [ ] ( ) { } * , : = ; &amp;hellip; # 같은 기호로, 어떤 요소를 구분하고 모와 정리하는 것을 나타내는 기호로 사용되고 있다. 일부 기호는 연산자와 동일하지만, 기호가 출현하는 위치에 따라 연산자인지 구분 기호인지를 확인할 수 있다. main 함수 이름 뒤에 괄호와 명령의 끝을 나타내는 세미콜론(;) 등은 구분자로 분류된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 아래 예제를 보도록 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 다음과 같은 토큰 열로 구성되어 있다. 그러나 여기에 맨 위에 있는 #include부터 시작되는 행을 생각하지 않는다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;토큰&lt;/th&gt;
&lt;th&gt;토큰의 종류&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;키워드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;td&gt;식별자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;printf&lt;/td&gt;
&lt;td&gt;식별자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;Kitty on your lap \ n&amp;rdquo;&lt;/td&gt;
&lt;td&gt;문자열 리터럴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;)&lt;/td&gt;
&lt;td&gt;연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;키워드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;상수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;td&gt;구분자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;컴파일러는 이런 문장을 토큰 레벨로 분해하여, 하나 하나의 명령을 인식하고 있다. 한국어와 같은 인간이 사용하는 자연 언어에 비해 프로그래밍 언어에 불필요한 기호가 하나도 없다는 것을 알 수 있을 것이다. 프로그램 중의 모든 문자와 기호는 명확한 의미가 정의되어 있다. 거기에는 애매한 것은 없다.&lt;/p&gt;
&lt;p&gt;각 토큰의 의미는 C언어 학습을 진행하면서 조금씩 이해해 나갈 것이다. 중요한 것은 소스 코드에 쓰는 모든 기호와 알파벳은 위의 토큰 중 하나로 분류할 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;컴파일할시에 문법 등에서 에러가 나오는 경우는 작성한 코드가 올바른 토큰의 줄(line)인지 여부를 확인하여 오류를 쉽게 찾을 수 있을 것이다. 익숙한 기술자라면 의식하지 않고 토큰의 종류와 순서를 파악하고 컴파일러에 의존하지 않고 코드가 맞는지를 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;토큰 사이에 연산자와 구분자를 사용한 토큰이 있으면 구문에 따라 토큰은 분해되지만 키워드와 식별자, 상수 등이 연속적으로 계속되는 경우, 각각의 토큰은 공백으로 분리해야 한다. 정확히 공백(white space)이라는 부르는 다음 문자는 토큰을 분리할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스페이스(space)&lt;/li&gt;
&lt;li&gt;수평 탭(\t)&lt;/li&gt;
&lt;li&gt;수직 탭(\v)&lt;/li&gt;
&lt;li&gt;개행, 줄 바꿈(\n\r)&lt;/li&gt;
&lt;li&gt;페이지 나누기(\f)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중에 수직 탭 및 페이지 나누기는 주로 프린터를 대상으로 한 전용 문자이며, 현재 일반적인 PC나 텍스트 편집기는 사용되지 않는다. Visual Studio에 의한 개발에서 사용하는 공백은 스페이스, 수평 탭, 개행 중 하나가 될 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  int
main (
void
){
   return
0;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 코드1은 코드가 엉망이 되어있는 것처럼 보이지만 성공적으로 컴파일하고 실행할 수 있다. 공백이나 줄 바꿈이 제각각이므로 읽기 어렵지만, 각각의 단어나 기호의 줄을 토큰 열로 보면 올바르다는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;마찬가지로 토큰의 줄이 맞다면 수평 탭과 줄 바꿈없이 한 줄에 프로그램을 작성할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main(){return 0;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;연산자와 구분자라는 기호의 토큰은 전후의 토큰을 구분하는 특성을 가지고 있다. 따라서 괄호()와 중괄호{}, 세미콜론; 등 전후의 토큰에는 공백이 없어도 문제 없다.&lt;/p&gt;
&lt;p&gt;한편, 토큰 구분이 제대로 이루어지지 않은 경우 컴파일러 오류가 될 것이다. 예를 들어 다음과 같은 코드는 구문 오류다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;intmain(){return0;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 경우 시작 부분의 키워드 int과 함수 이름 main을 구분하지 않기 때문에 intmain라는 하나의 토큰으로 간주되어 버린다. 또한 함수 안에 return 키워드와 숫자 0 사이도 구분하지 않기 때문에 return0라는 토큰으로 해석된다. 컴파일러는 이 이름을 처리하지 못하고 오류를 보고할 수 있다.&lt;/p&gt;
&lt;p&gt;반대로 구분해서는 안되는 부분에 공백이 삽입된 경우에도, 토큰이 추가로 분리되어 버려서 오류가 되어 버리는 것이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int mai n(){ retu rn 0; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 코드는 함수 이름과 식별자 main 중간이 공백으로 구분되어 버려서 mai과 n이라는 두 개의 토큰으로 나누어져 있다. 컴파일러는 식별자 mai 직후에 나타난 n이 구문 부정이라고 판단하고 오류를 보고 한다. 마찬가지로 return 키워드를 공백으로 retu과 rn이라고 두 개의 토큰으로 분해되어 버리고 있다. 컴파일러는 retu과 rn라는 이름을 확인할 수 없기 때문에 역시 오류이다.&lt;/p&gt;
&lt;h2 id=&#34;명령의-실행-단위&#34;&gt;명령의 실행 단위&lt;/h2&gt;
&lt;p&gt;여러 토큰으로 이루어진 하나의 실행 단위를 문장 (statement)이라고 한다. 즉, 컴퓨터에 대한 명령은 문장 단위이며, 함수는 문장의 집합이라고 생각할 수 있다. 많은 문장은 세미콜론;으로 종료하기 위해 컴파일러는 세미콜론을 찾아내서 문장이 완료된 것으로 인식할 수 있다. 예를 들어 다음 프로그램은 2개의 문으로 이루어져 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;printf(&amp;#34;Stand by Ready!!\n&amp;#34;);
return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;화면에 텍스트를 표시하기 위해 &lt;code&gt;printf()&lt;/code&gt; 함수의 행과 return 키워드로 시작하는 줄의 끝에 세미콜론; 기호가 있다. 이들은 여기에 문장이 종료하는 것을 나타낸다. 코드를 보기 쉽게하기 위해 문장이 끝나는 개행을 넣지만, 개행 자체는 의미를 가지지 않기 때문에, 원한다면 한 줄에 여러 문장을 작성할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Stand by Ready!!&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3의 &lt;code&gt;main()&lt;/code&gt; 함수에서 여러 문장을 줄 바꿈없이 기술하고 있지는데, 컴파일러는 세미콜론으로 문장의 끝을 인식할 수 있기 때문에 문제없이 컴파일 수 있다. 다만, 첫번째 행의 &lt;code&gt;#include&lt;/code&gt; 전처리기 지시문(preprocessor directive)은 문장이 아니기 때문에 개행으로 종료시킬 필요가 있다.&lt;/p&gt;
&lt;p&gt;문장이라고 해도 여러 종류가 존재하며, 크게 다음과 같이 분류되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명찰 부착 문장 (labeled-statement)&lt;/li&gt;
&lt;li&gt;(표현)식 문 (expression-statement)&lt;/li&gt;
&lt;li&gt;복합 문 (compound-statement)&lt;/li&gt;
&lt;li&gt;선택문 (selection-statement)&lt;/li&gt;
&lt;li&gt;반복 문장 (iteration-statement)&lt;/li&gt;
&lt;li&gt;점프 문 (jump-statement)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중에 일반적인 계산이나 기능의 호출은 표현식 문로 분류된다. 함수 안에 기술된 문장을 많은 표현식 문으로 될 것이다. 표현식 문이나 점프 문 등은 끝에 세미콜론;를 붙이지 않으면 안되도록 정해져 있지만, 반드시 모든 문장 끝에 세미콜론이 추가되는 것은 아니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 복합 문장은 세미콜론을 붙이지 않는다. 복합 문은 함수 본체 (function-body)에 이용하고 있는  {}로, 블록이라고도 한다. 함수 본체는 하나의 복합문으로 생각할 수 있지만, 함수의 끝에;를 붙일 필요가 없는 이유는 복합 문장의 끝은 시작을 나타내는 중괄호 {에 대응 하는}으로 판단되기 때문이다.&lt;/p&gt;
&lt;p&gt;각각의 문장이 구체적으로 무엇인지는 여기에서 순차적으로 설명하고 있다. 지금은 문장이 위와 같이 분류되어 있음을 기억해 두도록 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 주석(comment)</title>
      <link>https://www.devkuma.com/docs/c/%EC%A3%BC%EC%84%9D-comment/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%A3%BC%EC%84%9D-comment/</guid>
      <description>
        
        
        &lt;p&gt;주석(comment)를 이용하여 코드에 어떤 메모를 남길 수 있다. 주석은 컴파일시 무시되므로 코드에 영향을주지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;언젠가-다시-보기-보기-위하여&#34;&gt;언젠가 다시 보기 보기 위하여&lt;/h2&gt;
&lt;p&gt;이 책의 C 언어 샘플 프로그램은 아무리 길어도 수십 줄 정도일 것이다. 이는 독자가 각 장이 주제에 따라  중요한 기능의 원리를 충분히 학습할 수 있도록, 소스 코드는 가능한 심플한 형태로 정리하고, 불필요한 것을 최대한 포함하지 않았기 때문이다.&lt;/p&gt;
&lt;p&gt;그러나 실제 개발 현장의 코드는 적어도 수천, 대규모 개발의 경우 수십만 ~ 수백만 줄에 달한다. 이 정도의 대규모 프로그램 코드의 경우 개발자도 관리가 힘듭니다. 다른 사람이 쓴 소스을 읽어야 하는 경우도 있다. 비록 자신의 코드도 나중에 다시 읽어 때, 그것이 무엇을 의미하는지 알 수 없게 될 수있을 것이다.&lt;/p&gt;
&lt;p&gt;그래서 프로그램의 실행과는 아무 상관없는 코멘트(주석)을 소스에 적어 둘 수 있다. C 언어 주석은 &lt;code&gt;/*&lt;/code&gt;로 시작해서 &lt;code&gt;*/&lt;/code&gt;로 끝난다. &lt;code&gt;/*&lt;/code&gt;와 &lt;code&gt;*/&lt;/code&gt; 사이의 문자는 예외없이 컴파일시에 제거된다. 개행 문자를 포함할 수 있기 때문에, 여러 줄의 코멘트도 가능하다. 코멘트를 남겨두면 다른 사람이 소스를 볼 때, 무엇을 하고 있는지를 설명할 수 있으며, 향후 스스로 다시 읽게 되면 코드가 무엇을 의미하는지를 기억나게 해줄 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* 코멘트이므로 프로그램에는 어떤 영향도 없다 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;이것은 실행됩니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* printf(&amp;#34;코멘트에 포함되어 있기 때문에 실행되지 않는다.\n&amp;#34;); */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    소스를 해독 할 수 있도록 보충 설명 등을 기술한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    댓글은 몇줄 있어도 괜찮다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;    */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 코드 내에 한글로 코멘트를 남기고 있다. 이처럼 대규모 개발 프로젝트는 프로그램의 설명을 코멘트로 남기는 것이 바람직하다. 다만, 코멘트는 문자열 리터럴 안에는 남길 수 없다.&lt;/p&gt;
&lt;p&gt;또한 코멘트을 겹쳐서 작성할 수 없다. 예를 들어 &lt;code&gt;/* /* */ */ &lt;/code&gt;라고 쓴다면 &lt;code&gt;/* /* */&lt;/code&gt;까지가 주석으로 해석된다.&lt;/p&gt;
&lt;p&gt;C 언어 사양으로 정의되어 있지 않지만, 많은 컴파일러는 한 줄 주석도 지원하고 있다. 한줄 주석은 연속된 슬래시 문자 &lt;code&gt;//&lt;/code&gt; 이루어지고, 여기에서 다음 줄까지를 코멘트로 한다. 예를 들어 다음과 같이 될 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 여기 코멘트이다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 범위는 1행 뿐이므로, 각 행에 지정해야 한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 줄의 도중에도 가능하다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/////////// 이것도 코멘트이다. ///////////
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 한줄 주석은 C++ 언어 사양이며, C 언어 사양은 아니지만, 현대의 많은 컴파일러는 C++를 지원하기 때문에, C 언어에서도 한줄 댓글을 허용하고 있다. 예를 들어, 어떤 행을 삭제하고 컴파일하고 싶은 경우는이 한줄 주석을 사용하여 스마트한 실험하는 것도 할 수 있는 것이다. 물론 순수한 C 코드를 작성하려 한다면, 이 코멘트는 사용해서는 안된다.&lt;/p&gt;
&lt;p&gt;참고로 C 언어의 코멘트 &lt;code&gt;/* */&lt;/code&gt; C ++에서 추가된 코멘트 &lt;code&gt;//&lt;/code&gt;는 꽤 많은 프로그래밍 언어에서 공통 코멘트의 표준적인 존재이다. C/C++ 언어는 물론 Java 언어, C # 언어, JavaScript 언어 등에서도 이 댓글이 사용되고 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 변수와 데이터 유형</title>
      <link>https://www.devkuma.com/docs/c/%EB%B3%80%EC%88%98%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9C%A0%ED%98%95/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B3%80%EC%88%98%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9C%A0%ED%98%95/</guid>
      <description>
        
        
        &lt;p&gt;변수 선언과 데이터 유형에 대해 설명한다. 계산 결과 등을 프로그램 내에서 재사용하기 위해 임시로 저장하려면 변수를 사용한다.&lt;/p&gt;
&lt;h2 id=&#34;변수의-정의-및-초기화&#34;&gt;변수의 정의 및 초기화&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;정보 처리&amp;quot;는 정보를 컴퓨터에 입력하고, 프로그램이 이를 분석하여 원하는 형태로 변환하여 출력하는 기본적인 과정을 말한다. 이를 실행하려면 프로그램은 정보를 받아 계산해야 한다. 그러기 위해서는 먼저 정보를 기록하는 방법이 필요하다. 그렇지 않으면 받은 정보와 계산 결과를 저장할 수 없다.&lt;/p&gt;
&lt;p&gt;그래서 프로그램은 일시적으로 정보를 주기억 장치에 저장하여 연산 결과 등을 기록한다. 주기억 장치는 CPU와의 데이터 전송 속도를 엄격하게 생각해서 구성되어 있는 휘발성(전원을 끄면 저장하고 있던 정보를 잃게 저장 장치) 장치로써 비트당 비용이 상대적으로 비싸다.&lt;/p&gt;
&lt;p&gt;사용자가 데이터 파일을 저장하고 있는 저장 장치는 하드 디스크나 플로피 디스크이지만, 이러한 저장 장치는 CPU로의 데이터 전송 속도가 매우 느려서 프로그램의 일시적인 데이터 저장에는 적합하지 않다. 그 대신 주기억 장치에 비해 비트당 비용이 저렴하고, 비휘발성(전원 공급이 끊어져도 데이터를 저장할 수 있는 저장 장치)이므로 장기 데이터 저장에 적합하다.&lt;/p&gt;
&lt;p&gt;주기억 장치에 정보를 저장하기 위해, 기계어에서는 저장할 위치를 나타내는 주소를 지정한다. 그러나 그런 귀찮은 것은 전문 프로그래머도 하고 싶은 작업이 아니다. 계산이 복잡하고, 조금이라도 잘못된 주소를 지정하면 프로그램은 충돌하게 된다. 이 작업은 누가 봐도 효율적이라고 할 수 없다.&lt;/p&gt;
&lt;p&gt;그래서 고급 프로그래밍 언어에서는 변수를 사용한다. 변수는 메모리의 특정 저장소의 대명사와 같은 것이다. 변수는 식별자로 구분하고, 컴파일러는 식별자 및 물리적 저장 공간을 연결하여 정보의 쓰기와 읽기를 정확하게 수행한다. 따라서 우리는 복잡한 메모리 주소 계산에서 해방되어, 기억 공간의 할당 및 계산을 컴파일러에 맡길 수 있다. 따라서 초보자도 간단히 메모리를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;그러나 변수는 메모리의 저장 공간을 나타내는 식별자이며, 실제 저장 공간은 크기가 존재한다. 어떤 저장 영역은 4바이트를 확보하고 있을 수도 있고, 다른 영역은 1바이트일 수도 있다. 이렇게 할당 저장 공간의 크기를 설정하기 위해 변수를 선언해야 한다. 여기에는 다음과 같은 구문을 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;변수-선언&#34;&gt;변수 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;유형 변수1, 변수2, ...;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;유형은 형식 지정자라는 것을 지정한다. 형식 지정자는 변수의 종류를 나타내는 것으로, 컴파일러는 형식에 따라 메모리를 할당하고 메모리의 주소를 계산한다.&lt;/p&gt;
&lt;p&gt;유형의 다음의 토큰은 변수의 이름을 지정한다. 변수 이름에는 문자와 숫자를 사용할 수 있지만, 첫번째 문자는 숫자를 사용하지 못하고 반드시 영문자 또는 밑줄(_)로 시작해야 한다. 또한, int와 return 등 C 언어를 사용하는 키워드를 식별자로 할 수 없다. 식별자의 대문자와 소문자는 구별된다. 이 식별자 명명 규칙은 C 언어의 모든 식별자의 이름에 해당된다.&lt;/p&gt;
&lt;p&gt;여러 변수를 동시에 선언 또는 정의하려면 콤마(,)로 구분한다. 프로그램은 여기에 지정된 변수의 이름으로 기억 영역에 액세스할 수 있다. 마지막으로, 선언은 세미콜론(;)으로 종료한다. 구문상, 선언은 문장에 포함되지 않는다.&lt;/p&gt;
&lt;p&gt;형식 지정자는 표1과 같다.&lt;/p&gt;
&lt;h3 id=&#34;표1---형식-지정자&#34;&gt;표1 - 형식 지정자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식 지정자&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;1바이트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;CPU의 표준 정수 크기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;짧은 정밀도 부동 소수점 숫자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;float형 이상, long double형 이하의 배정 밀도 부동 소수점 형&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;char형은 크기가 정해져 있기 때문에 매우 알기 쉽다. 이것은 영숫자 1문자분의 기억 영역을 나타낸다. int형이라는 것은 보통의 정수를 저장하기 위한 저장 공간으로, 그 크기는 컴퓨터에 따라 다르다. 이 크기는, 예를 들어 32비트 CPU라면 32비트(4바이트)를 할당할 수 있다. 64비트 CPU의 컴퓨터라면 64비트, 아주 오래된 CPU를 사용하는 16비트 시스템이면 16 비트가 할당된다는 것이다.&lt;/p&gt;
&lt;p&gt;float와 double은 소수점을 취급하는 경우에 사용하는 저장 영역이다. 오차를 최대한 줄이고 싶은 계산 등에 사용할 수 있다. 이도 int 마찬가지로 기종에 따라 달라진다. 형식 지정자가 할당되는 구체적인 크기는 컴파일러 문서를 참조한다. 다음 문장은 정수형 변수 iVariable1과 iVariable2을 정의하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVariable1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVariable2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나, 이 시점에서 변수에 어떤 값이 저장되어 있는지 정해져 있지 않다 (아무 의미도 없는 부정 값이 저장되어 있다). 변수에 값을 저장하려면 대입 연산자 등호(=)를 사용하여 변수에 데이터를 할당한다. 다만, 일반적인 수학 표기법과 달리, 좌변에 대입하는 변수를 지정하고 오른쪽에 식을 기술한다. 예를 들어 다음 문장은 변수 iVariable1에 10이라는 값을 할당한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iVariable1 = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 iVariable1가 나타내는 기억 영역에 10이라는 값을 저장하는 것을 의미한다. 또한 이와는 별도로 변수를 선언할 때 초기 값을 주는 방법도 있다. 변수의 초기화에는 이니셜라이저를 사용한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;유형 변수1 = 초기식1, 변수2 = 초기식2 ...;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;형식 지정자 및 변수 이름 지정까지는 방금 전의 선언과 동일한다. 초기화는 등호(=)를 사용하여 변수의 초기 값을 나타내는 식을 지정한다. 초기화되지 않은 변수는 어떤 값이 대입될 때까지 어떤 값을 포함하고 있는지 보장되지 않는다. 확실히 변수에 초기 값을 할당하려면 이렇게 초기 값을 주는 것이 좋다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVariable1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVariable2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVariable2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1는 변수를 선언하면 메모리에 지정된 영역을 확보하고 그 영역에 지정된 값을 대입하고 종료한다. 변수의 값을 화면에 표시하는 방법은 아직 설명하지 않기 때문에, 여기서는 실시하지 않는다. 그래서 이 프로그램은 오류가 발생하지 않으면 성공이다.&lt;/p&gt;
&lt;p&gt;이 프로그램에서는 먼저 변수의 선언을 하고 있다. &lt;code&gt;int iVariable1 = 10&lt;/code&gt;이라는 것은 iVariable1라는 변수를 10으로 초기화하고 있다. 그 후에 콤마를 사용하여 iVariable2을 정의하고 있는데, 이 변수는 초기화되지 않는다. 이어 &lt;code&gt;iVariable2 = 100&lt;/code&gt;는 대입식을 이용하여 변수 iVariable2에 100을 대입하고 있다.&lt;/p&gt;
&lt;p&gt;덧붙여서 식에서의 항목을 피연산자라고 한다. &lt;code&gt;iVariable2 = 100&lt;/code&gt;의 경우 iVaeiable2과 100는 피연산자이고, 등호(=)를 대입 연산자라고 한다. 다만, 이니셜라이저와 식을 혼동하지 말자. 변수 이니셜라이저에 사용되는 등호(=)는 일반적으로 대입식과는 기본적으로 이질적인 것이다.&lt;/p&gt;
&lt;h2 id=&#34;서식-지정&#34;&gt;서식 지정&lt;/h2&gt;
&lt;p&gt;그럼 이제 변수를 선언하고 값을 할당하는 방법은 알았다. 하지만 이것으로 정말 제대로 값이 할당되어 있는지 여부 모른다. 그래서 printf() 함수를 사용하여 변수의 내용을 출력하고 싶다.&lt;/p&gt;
&lt;p&gt;printf() 함수에서 문자열이 아닌 값을 출력하려면, 서식 제어 문자열이라는 것을 서식 지정을 해야 한다. 형식 지정은 반드시 백분율 기호(%)로 시작하여, 왼쪽에서 오른쪽으로 해석되어 간다. printf() 함수는 단순히 리터럴 문자열을 출력하는 함수가 아니라, 실제 고급 형식 변환 함수에서 변수를 문자열의 어디에 어떤 형태로 할당할지 여부를 지정 할 수 있다. 그것을 수행하는 것이 서식 제어이다.&lt;/p&gt;
&lt;p&gt;printf() 함수는 두번째 인수 이후에 임의의 수 만큼 인수를 지정할 수 있으며, 첫번째 인수에는 서식 제어 문자열을 지정한다. 서식 제어 문자열에 % 기호를 이용한 서식을 사용할 수 있으며, printf() 함수는 첫번째 형식 지정을 발견하면 두번째 인수의 변수를 지정한 형태로 출력하고, 두번째 서식 지정를 발견하면, 세번째 인수의 변수를 지정한 형태로 출력하는 같은 구조로 되어 있다. 따라서 서식 제어 문자열에 있는 서식의 수 만큼, 두번째 인수 이후에 변수를 지정한다. 서식 지정보다 인수의 수가 많으면 여분의 인수는 무시되지만, 서식 지정보다 인수의 수가 적은 경우, 동작은 보증되지 않는다.&lt;/p&gt;
&lt;p&gt;printf() 함수의 서식 제어는 사실은 매우 복잡한 구조로 되어 있기 때문에 이 자리에서 자세한 설명은하지 않는다. 지금은 변수의 내용을 표시하는 데 필요한 형식만 설명한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;서식&lt;/th&gt;
&lt;th&gt;인수 형&lt;/th&gt;
&lt;th&gt;변환 결과&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%d 또는 %i&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;10 진수 정수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;부호 없는 16 진수. 9 이상은 &amp;ldquo;abcdef&amp;quot;를 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;부호 없는 16 진수. 9 이상은 &amp;ldquo;ABCDEF&amp;quot;를 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;문자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;char *&lt;/td&gt;
&lt;td&gt;문자열&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;부동 소수점 [-]dddd.dddd 형식&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%e&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;부동 소수점 [-]d.dddd e [+]ddd 형식&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%E&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;지수의 앞에 붙는 것이 e 대신 E 인 점을 제외하고 %e 서식과 동일&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%g&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;% f 또는 % e 중 지정된 값과 정확하게 표현 가능한 짧은 형식.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%G&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;지수 앞에있는 것이 e 대신 E 인 점을 제외하고는 %g의 서식과 동일&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;변환하지 않고 두 %보기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;우선, 이 자리에서는 이것만 이해하고 있으면 충분하다. int 변수를 표시하려면 서식 지정에 %d를 지정하고 그 후에 인수 목적 변수를 지정한다. 예를 들어 &lt;code&gt;printf(&amp;quot;%d&amp;quot;, iValiable);&lt;/code&gt;라고 하면, iValiable 변수의 값이 표시된다. 인수를 복수 지정하는 경우, 인수는 콤마(,)로 구분한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValiable&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iValiable = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValiable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램을 실행하면 &lt;code&gt;iValiable = 10&lt;/code&gt;라고 화면에 표시된다. 이 결과를 보면 서식 제어 문자열에 지정된 %d가 iValiable의 내용으로 변환되어 있는 것을 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;형식-지정자의-혼합&#34;&gt;형식 지정자의 혼합&lt;/h2&gt;
&lt;p&gt;변수 선언자에는 &amp;ldquo;변수의 정의 및 초기화&amp;quot;에서 소개한 기본형 이외에도 세부적 변수의 크기와 특성을 지정하는 형식 지정자가 존재한다. 방금 전에 소개한 기본적인 형식 지정자 외에, long과 short라는 지정자도 존재하고 이들을 이용하여 일반 숫자와는 다른 길이의 변수를 만들 수 있다. 이러한 형식 지정자를 사용하여 자격을 선언에는 다음과 같은 것이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형지정&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;short int&lt;/td&gt;
&lt;td&gt;16 비트, int 이하. int는 생략 가능.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long int&lt;/td&gt;
&lt;td&gt;32 비트 이상, int와 동일하거나 그 이상. int는 생략 가능.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;td&gt;double과 같거나 그 이상.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;short int&lt;/code&gt;나 &lt;code&gt;long int&lt;/code&gt;는 short나 long과 같이 생략된 형태를 사용하는 것이 가능하며, 일반적으로 생략한다. 일반적으로 short는 16비트 long은 32비트인 경우가 많을 것이다. 부동 소수점 형의 크기도 정수처럼 처리계에 의존하기 때문에 long double은 double과 같은 크기 일 수도 있고, 다를 수도 있다. 예를 들어 Microsoft Visual C ++ 6.0에서 long double은 80비트 (부호에 1비트, 지수에 15비트, 가수 64비트)로 되어 있다.&lt;/p&gt;
&lt;p&gt;또한 숫자형 변수는 음수를 나타낼 수 있다. 그러나 음수를 표현하는 경우는 최상위 비트를 부호용으로 사용하기 때문에 표현 가능한 최대 값이 반이 되어 버리는 단점도 있다. 음수를 표현하지 않는 경우, 최상위 비트도 숫자 표현을 위해 사용할 수 얻으면, 표현할 수있는 범위가 확대된다.&lt;/p&gt;
&lt;p&gt;그래서 부호가 있는 변수를 선언하는 경우 signed를 부호가 없는 경우는 unsigned 형 지정자를 사용한다. 일반적으로 signed를 분명히 적을 필요는 없지만, 컴파일러는 옵션으로 변수의 기본값을 부호 없이도 가능하고, 그러한 경우에 대비하여 음수를 취급하는 것을 명시적으로 표현하기 위해 사용할 수 있다. 음수를 취급할 필요가 없는 변수는 unsigned를 지정하여 높은 수치를 취급할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 부호가 있는 char 형 변수는 -127 ~ +127 까지의 범위를 처리할 수 있다. 1바이트는 순수하게 생각하면 255까지, 이진수 1111 1111까지 이용할 수 있지만, 부호가 있는 경우는 이 중 최상위 비트가 플래그로 사용되기 때문에 부호가 있는 char 형 변수에 255을 대입하면 최상위 비트가 1이므로 음수 판단되며 2의 보수 표현으로는 2진수 1111 1111의 2의 보수를 구한 값 0000 0001 즉 -1이다. 색상 등의 정보를 1바이트로 취급 경우, 음수를 사용할 필요가 없기 때문에 unsigned를 사용하여 부호를 작성하는 방식이 사용된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 signed char chVariable = 255;
 unsigned char uchVariable = 255;

  printf(&amp;#34;chVariable = %d\nuchVaruabke = %d\n&amp;#34; , chVariable , uchVariable);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드3은 부호가 있는 char형, 부호가 없는 char 형 변수에 255을 대입하고 있다. 계산대로 부호 있는 변수는 -1을 부호 없는 변수는 255을 출력한다. 그럼 1바이트의 변수에 대해 1바이트로 표현할 수 없는 높은 수치를 즉, 255 이상의 값을 대입하면 어떻게 될까? C 언어에서는 변수의 크기 이상의 값을 대입하면, 부호 없는 경우는 상위 비트가 비트가 잘려서 할당된다. 부호 있는 경우는 구현에 의존한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 상수</title>
      <link>https://www.devkuma.com/docs/c/%EC%83%81%EC%88%98/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%83%81%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;숫자나 문자 등의 고정 데이터를 소스 코드에 작성하는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;접미사&#34;&gt;접미사&lt;/h2&gt;
&lt;p&gt;100와 같은 숫자나 큰 따옴표로 둘러싸인 문자열 등을 총칭하여 상수라고 한다. 사실, 상수도 변수와 같은 형태가 존재한다. 상수를 변수에 할당하는 경우, 물론 상수는 변수의 형에 대해 호환이 되어야 한다.&lt;/p&gt;
&lt;p&gt;숫자를 나타내는 상수는 부동 소수점 상수 및 정수 상수로 나누어 진다. 숫자만의 경우, 컴파일러는 int형의 정수 상수로 판단하고, 소수점이 발견되면 double형 상수로 처리한다. 그러나 이것으로는, float와 long double, long형 등의 상수를 표현할 수 없다. 그래서 C 언어에서는 정수 형을 명시하기 위해 숫자의 끝에 형태를 나타내는 알파벳을 지정한다. 이를 접미사라고 한다. 정수 상수로 지정할 수 있는 접미사는 표1 중에 하나이다.&lt;/p&gt;
&lt;h3 id=&#34;표1-정수-접미사&#34;&gt;표1 정수 접미사&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;접미사&lt;/th&gt;
&lt;th&gt;형&lt;/th&gt;
&lt;th&gt;기입 예&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;l 또는 L&lt;/td&gt;
&lt;td&gt;상수의 크기에 따라 long int 또는 unsigned long int&lt;/td&gt;
&lt;td&gt;123456789L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u 또는 U&lt;/td&gt;
&lt;td&gt;상수의 크기에 따라 unsigned int 또는 unsigned long int&lt;/td&gt;
&lt;td&gt;123456789U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l 또는 L과 u 또는 U&lt;/td&gt;
&lt;td&gt;unsigned long int&lt;/td&gt;
&lt;td&gt;123456789UL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이러한 접미사를 정수 상수로 지정하여, 정수 형을 명시할 수 있다. 마찬가지로 부동 소수점 상수도 float, double,  long double 여부를 지정하는 접미사가 존재한다. 부동 소수점 상수는 표2 중 하나의 접미사를 지정할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;표2-부동-소수점-상수-접미사&#34;&gt;표2 부동 소수점 상수 접미사&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;접미사&lt;/th&gt;
&lt;th&gt;형&lt;/th&gt;
&lt;th&gt;기입 예&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;f 또는 F&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;3.14F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l 또는 L&lt;/td&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;td&gt;3.14L&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;일반적으로 접미사를 지정하지는 않지만, 정수 형을 컴파일러에게 전하고 싶은 경우에 접미사를 사용한다. 예를 들어, 부동 소수점 상수는 기본적으로 double형으로 인식되기 때문에 float형 변수에 부동 소수점 상수를 대입하면 컴파일러가 경고를 발생시킨다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3.14F&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 float형 변수 fVar에 3.14이라는 float형의 부동 소수점 상수를 대입하고 있다. 이 때 상수 끝에 접미사 F를 이용하고 있는 것에 주목하자. 이를 제외하면 컴파일러는 값을 일부를 잘라내어 작게 할 수 있음을 경고한다. 그래서 프로그래머는 이 상수가 float형임을 증명하고 안전하게 float형 변수에 대입할 수 있는 것을 접미사를 사용하여 어필할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;상수의-다양한-작성&#34;&gt;상수의 다양한 작성&lt;/h2&gt;
&lt;p&gt;부동 소수점도 정수도 보통은 특별히 의식하지 않고 직관적인 작성해도 상관없다. 0.5이라고 쓰면 부동 소수점 상수이고, 소수점이 없는 숫자라면 정수로 인식되기 때문이다. 그러나 부동 소수점도 정수도, 이외의 표현 방법이 몇개가 있기에 소개하도록 하겠다.&lt;/p&gt;
&lt;p&gt;부동 소수점 상수는 정수부, 소수부 지수로 나누어져 있다. 정수 부분과 소수 부분은 그 중 한 방향를 생략할 수 있지만, 양 방향을 동시에 생략할 수는 없다. 다만, 지수 표기를 사용하면 생략할 수 있다. 지수는 e 또는 E 뒤를 이어 값을 지정한다.&lt;/p&gt;
&lt;p&gt;부동 소수점은 가수 × 기수 지수로 계산되기 때문에 지수를 지정하면 정수 부분을 지정할 필요가 없는 것이다. 예를 들면 3.14 값을 부동 소수점 상수로 표현하는 경우 몇 가지 표현 방법이 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;.314e1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;314e-2&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar3&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31.4e-1&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fVar1 = %g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;fVar2 = %g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;fVar3 = %g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 3개의 float형 변수를 부동 소수점 상수로 초기화한다. 이러한 부동 소수점 상수는 모두가 3.14라는 값이다. 그러나 소스를 보고 확인할 수 있도록 표현은 모두 다르다. 따라서, 부동 소수점 상수는 같은 값이라도 다양한 표현을 할 수 있으므로 알아두면 좋다.&lt;/p&gt;
&lt;p&gt;정수는 10진수 외에 8진수와 16진수를 사용할 수 있다. 2진수를 의식해야 하는 숫자 데이터를 처리할 경우는 10진수를 사용하는 것보다 편리하다. 특히 16진수는 실제 프로그래밍에서도 많이 하는 경우가 많기 때문에 중요하다. 예를 들어 ARGB 형식의 32비트 색상 데이터를 나타내는 경우, 각각의 1바이트의 요소를 16진수로 지정하면 알기 쉽고 편리하다.&lt;/p&gt;
&lt;p&gt;정수를 8진수로 지정하려면 숫자 앞에 0을 16진수로 지정하는 경우 0x 또는 0X를 지정한다. 16진수의 경우, A ~ F까지의 숫자는 대문자여도 소문자이어도 상관없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0xFF = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;0377 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xFF&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0377&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;16진수 0xFF 및 8진수 0377은 모두 10진수로 255값이다. 예상대로 코드3을 실행하면 모두 10진수로 255이라는 값을 출력한다. 특히 2자리의 16진수와 8자리의 2진수(8비트)과 동일하므로 비트 연산 등에 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;문자-상수&#34;&gt;문자 상수&lt;/h2&gt;
&lt;p&gt;ASCII 문자 세트는 1개의 영숫자 문자를 1바이트로 표현한다. ASCII 코드는 많은 컴퓨터가 지원하는 표준 문자 코드이다. C언어의 문자 상수는 즉, 1바이트의 ASCII 코드라는 것이다. ASCII는 American Standard Code for Information Interchange의 약자로, ANSI는 1962년에 제정한 표준 코드이다. 실제로는 7비트로 구성되어 있고, 영문자와 기호나 숫자 등을 표현할 수 있다.&lt;/p&gt;
&lt;p&gt;문자 상수는 따옴표(&amp;rsquo;)에 문자를 지정한다. char형의 변수에 문자를 할당하는 경우 이러한 문자 상수를 지정한다. char형에 숫자를 대입 할 수 있지만, 1바이트라는 성질에서 문자를 표현하기에 적합하다. 문자 상수로 나타낼 수 있는 것은 항상 1문자이자만, 이스케이프 문자를 지정할 수 있다. 이스케이프 문자를 지정한 경우 &lt;code&gt;\n&lt;/code&gt;처럼 두 글자로 보이지만 실제로 나타내고있는 것은 한 문자 이스케이프 문자이다.&lt;/p&gt;
&lt;p&gt;그런데, 중요한 것은 컴퓨터는 문자를 숫자로 취급하고 있다. 예를 들면 ASCII 코드 &amp;lsquo;A&amp;rsquo;는 16진수 0x41에 해당하며, &amp;lsquo;B&amp;rsquo;는 0x42, &amp;lsquo;C&amp;rsquo;는 0x43와 같이 일련 번호로 되어 있다. 즉, 소스 코드로 문자 상수를 지정하여도 실제로는 수치로 취급한다. 이것을 이해하면 컴퓨터에서 문자라는 것이 어떻게 다루어지고 있는지, 그 원리를 배울 수있을 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarA&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarB&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x42&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;chVarA(%%X) = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;chVarA(%%c) = %c&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarA&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;chVarB(%%X) = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;chVarB(%%c) = %c&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarB&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVarB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드4를 실행하면, 매우 흥미로운 결과가 표시된다.&lt;/p&gt;
&lt;p&gt;이 프로그램은 char형 변수 chVarA과 chVarB이 포함된 숫자와 문자 표현을 표시한다. chVarA에는 이니셜라이저에서 &amp;lsquo;A&amp;rsquo;라는 문자 상수를 대입하고 있지만, 앞에서 설명한대로 이 값을 16진수로 출력하면 41이라는 결과를 얻을 수 있다. chVarB는 16진수 42이라는 정수를 할당하고 있다. 마찬가지로 이 변수를 출력하면 숫자는 당연히 42을 출력하지만, 문자로 표시하면 B라는 결과가 된다. 방금 전의 ASCII 코드 A에 이어지고 있는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이와 같이, 1문자는 문자 상수로 지정할 수 있지만, 실제로는 숫자로 취급할 수 있는 것이다. 여기서 하나 주의를 해야 하는 것은, 리터럴 문자열 &amp;ldquo;&amp;ldquo;와 문자 상수 &amp;lsquo;&amp;lsquo;는 근본적으로 다른 종류로 인식한다. &amp;ldquo;A&amp;quot;와 &amp;lsquo;A&amp;rsquo;는 다르다.&lt;/p&gt;
&lt;h2 id=&#34;이스케이프-문자&#34;&gt;이스케이프 문자&lt;/h2&gt;
&lt;p&gt;문자열이나 문자 상수는 \ 기호로 시작하는 이스케이프 문자를 지정할 수 있다. 이스케이프 문자는 줄 바꿈이나 탭 문자 등 일반 문자로 표현할 수 없는 표현이 어려운 문자 코드를 나타낼 수 있다. 이스케이프 문자는 표3과 같은 것이 있다.&lt;/p&gt;
&lt;h3 id=&#34;표3-이스케이프-문자&#34;&gt;표3 이스케이프 문자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;기호&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;벨 문자 (경고)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;한 칸 뒤로&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;페이징 (일반)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;개행 복귀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;같은 줄의 맨 위로&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;수평 탭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;수직 탭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;\보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#39;&lt;/td&gt;
&lt;td&gt;따옴표 (&amp;rsquo;)를 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;&lt;/td&gt;
&lt;td&gt;큰 따옴표 (&amp;quot;)를 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;널&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\N&lt;/td&gt;
&lt;td&gt;8진수 정수 (N은 8 진수 상수)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\xN&lt;/td&gt;
&lt;td&gt;16진수 정수 (N은 16 진수 정수)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;예를 들어, 문자열에 큰 따옴표를 사용하려는 경우와 문자 상수에서 따옴표를 표현하거나 \ 기호 또는 탭 문자 등을 표현하고 싶은 경우에 이러한 이스케이프 문자를 사용한다. 그러나 수직 탭 등 일부 이스케이프 문자는 특정 장치에서만 의미를 인식하지 않을 수도 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 예약어(keyword)</title>
      <link>https://www.devkuma.com/docs/c/%EC%98%88%EC%95%BD%EC%96%B4-keyword/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%98%88%EC%95%BD%EC%96%B4-keyword/</guid>
      <description>
        
        
        &lt;p&gt;다음은 C 프로그래밍 언어의 키워드 목록이다.&lt;/p&gt;
&lt;p&gt;프로그램에서 다음 식별자를 식별자로 사용할 수 없다. 그리고 최근의 컴파일러들은 C++ 언어 프로그램의 식별자도 사용할 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;c-예약어&#34;&gt;C 예약어&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;예약어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;asm&lt;/td&gt;
&lt;td&gt;인라인 어셈를리 코드를 나타내는 키워드.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto&lt;/td&gt;
&lt;td&gt;기본적인 변수의 저장 방식을 지정하는 키워드.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;for, while, switch, do&amp;hellip;while문을 조건 없이 마치는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;case&lt;/td&gt;
&lt;td&gt;switch문 내에서 사용되는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;가장 간단한 데이터형.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;변수가 변경되지 않도록 방지하는 데이터 지정자. volatile참고.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;for, while, do&amp;hellip;while문을 다음 반복 동작으로 진행시키는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;case문에 일치하지 않는 경우를 처리하기 위해 switch문에서 사용되는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;do&lt;/td&gt;
&lt;td&gt;while문과 함께 사용되는 순환 명령. 순환문은 최소한 한번 실행됨.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;배정도 부동 소수형 값을 저장할 수 있는 데이터형.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;if문이 FALSE로 평가될 때 실행되는 선택적인 문장을 나타내는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extern&lt;/td&gt;
&lt;td&gt;변수가 프로그램의 다른 부분에서 선언된다는 것을 알려주는 데이터 지정자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;부동소수형 숫자 값을 저장하기 위해 사용되는 데이터형.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;초기화, 증가, 조건 부분을 가지는 순환명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goto&lt;/td&gt;
&lt;td&gt;정의되어 있는 레이블로 이동시키는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;TRUE/FALSE의 결과에 따라 프로그램의 제어를 변경하는데 사용되는 명령.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;정수형 값을 저장하는데 사용되는 데이터형.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;int형보다 큰 정수형 값을 저장하는데 사용되는 데이터형.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;register&lt;/td&gt;
&lt;td&gt;가능하다면 변수를 레지스터에 저장하도록 지정하는 저장형태 지정자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;현재의 함수를 마치고 호출한 함수로 프로그램의 제어를 돌려주는 함수. 함수 값을 돌려주기위해 사용됨.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;정수형 값을 저장하는데 사용되는 데이터형.  자주사용되지는 않지만 대부분의 컴퓨터에서 int형과 동일한 크기를 가짐.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signed&lt;/td&gt;
&lt;td&gt;변수가 양수와 음수값을 모두저장할수 있다는것을 지정하기 위해서 사용되는 지정자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sizeof&lt;/td&gt;
&lt;td&gt;항목의 크기를 바이트 단위로 알려주는 연산자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;컴파일러가 변수의 값을 보존해야 한다는 것을 지정하는데 사용되는 지정자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;struct&lt;/td&gt;
&lt;td&gt;C에서 어떤 데이터형의 변수를 함께 결합시키는 데 사용되는 키워드.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;td&gt;여러가지 조건을 통해서 프로그램의 흐름을 변경하는데 사용되는 명령.  case문과 함께 사용됨.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;typedef&lt;/td&gt;
&lt;td&gt;이미 존재하는 변수와 함수의 형태를 새로운 이름으로 변경하는데 사용되는 지정자.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;union&lt;/td&gt;
&lt;td&gt;여러개의 변수가 동일한 메모리영역을 공유하도록 해주는데 사용되는 키워드.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned&lt;/td&gt;
&lt;td&gt;변수가 양수 값만을 저장할수 있다는 것을 지정하는데 사용되는 지정자. signed를 참고.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;함수가 어떤 값을 돌려주지 않거나 또는 사용되는 포인터가 범용포인터이거나, 모든 데이터형을 지적할수 있다는 것을 지정하는데 사용되는 키워드.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volatile&lt;/td&gt;
&lt;td&gt;변수가 변경될 수 있다는 것을 나타내는 지정자. const참고.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;td&gt;지정된 조건이 TRUE로 평가되는한 게속해서 포함된 문장을 실행하는 순환문.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;c--추가-예약어&#34;&gt;C++  추가 예약어&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;catch&lt;/th&gt;
&lt;th&gt;inline&lt;/th&gt;
&lt;th&gt;template&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;td&gt;operator&lt;/td&gt;
&lt;td&gt;throw&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;except&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finally&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;virtual&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;friend&lt;/td&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 데이터 입력 scanf()</title>
      <link>https://www.devkuma.com/docs/c/scanf/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/scanf/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt; 함수를 사용하여 키보드에서 입력한 임의의 값을 받는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;사용자-입력-받기&#34;&gt;사용자 입력 받기&lt;/h2&gt;
&lt;p&gt;지금까지의 프로그램에서는 변수에 상수를 대입해 왔지만, 실제 프로그램에서는 이렇게 무의미한 행위는 하지 않는다. 실행시에 동적으로 변화하는 부정확한 값일 경우에 변수를 사용하는 의미가 있다. 항상 같은 값을 화면에 표시하길 원하지 않는다면, 직접 상수를 지정하면 된다는 것이다.&lt;/p&gt;
&lt;p&gt;그럼 &amp;ldquo;실행시에 동적으로 변화하는 값&amp;quot;은 어떻게 받아야 하는 걸까? 하나는 디스크 파일에서 데이터를 받는 방법을 생각할 수 있다. 예를 들어, 텍스트 파일을 입력하여 그것을 화면에 표시한다면, 그것은 실행시에 동적으로 변화하는 값이라고 할 수 있다. 그러나 디스크 파일을 읽는 프로그램은 중급 수준의 작업이 되기 때문에 여기서는 설명할 수 없다. 이는 C 언어 기초부터 배우고, 후반에서 설명하도록 하겠다.&lt;/p&gt;
&lt;p&gt;그럼, 더 쉽게 데이터를 입력하는 방법은 없는 것인가? 프로그램 실행 중에 키보드로부터 문자나 숫자를 입력할 수 있다면, 프로그램의 활용성도 크게 확대되고 향후 프로그램의 테스트도 보다 유연하게 할 수 있게 될 것이다. 키보드에서 값을 입력하려면 scanf() 함수를 사용한다. &lt;code&gt;scanf()&lt;/code&gt; 함수는 &lt;code&gt;printf()&lt;/code&gt; 함수의 입력 판에 지정한 변수에 대해 키보드에서 값을 입력한다.&lt;/p&gt;
&lt;h3 id=&#34;scanf-함수&#34;&gt;scanf() 함수&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;포멧&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;변수명&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt; 함수의 첫번째 인수에 서식 제어를 두번째 인수 이후에 입력된 값을 저장하는 변수를 지정한다. 서식 제어는 기본적으로 &lt;code&gt;printf()&lt;/code&gt; 함수와 같은 것으로 생각될 수 있다. 숫자를 입력한다면 %d, 문자를 입력하는 경우 %c를 지정하는 식이다. 두번째 인수 이후는 서식 제어의 포멧 문자에 대한 변수를 지정하는 것인데, 단순하게 변수를 지정하는 것이 아니라 변수 이름 앞에 &amp;amp;를 지정한다.&lt;/p&gt;
&lt;p&gt;왜 변수 앞에 &amp;amp;를 붙일 필요가 있는가 하면, 이는 함수에 변수의 주소를 알릴 필요가 있기 때문이다. 이것에 대해서는 포인터에 대한 자세한 내용을 알아야 할 필요가 있는데, 여기서는 키보드에서 입력하는 경우는 &lt;code&gt;scanf()&lt;/code&gt; 함수 사용한다는 것을 설명하는 것이기에, 서식 제어의 포멧 문자에 대한 변수를 지정할 때는 변수명 앞에 &amp;amp;를 붙인다라는 정도만 기억하도록 하자. 이 &amp;amp;의 의미는 포인터를 학습할 때에 다시 설명하도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt; 함수는 제대로 변환되어서 변수에 할당되는 포멧의 수를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;정수를 입력해 주세요. &amp;gt; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;입력한 수는 %d입니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1을 실행하면 값을 입력하도록 요구된다. 정수 값을 입력하면 iVar 변수에 입력한 값이 할당되고 화면에 숫자가 나타날 것이다. 올바른 값이 입력되지 않은 경우 변환할 수 없기 때문에 변수에 값이 할당되지 않는다.&lt;/p&gt;
&lt;p&gt;실전 수준으로 문제를 생각하면, 사실 &lt;code&gt;scanf()&lt;/code&gt; 함수가 사용되는 경우는 거의 없다. 이유는 오류 검사가 충분하지 않기 때문이다. 충분한 오류 검사를 할 필요가 있는 입력은(상용 프로그램은 충분한 오류 검사가 필요하기에, 결과적으로 본격적인 프로그램은 scanf()를 많이 사용하지 않는다) 변환 작업을 하지 않고 다른 표준 입력 함수를 사용하여 문자열로 입력된 정보를 받아 입력된 문자열을 조사해 적절한 값으로 변환하는 작업을 수행한다. 물론 이러한 작업은 복잡하다. 따라서 이 책에서는 입력 작업은 &lt;code&gt;scanf()&lt;/code&gt; 함수를 사용하여 작업을 단순화한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 수식 및 계산</title>
      <link>https://www.devkuma.com/docs/c/%EC%88%98%EC%8B%9D-%EB%B0%8F-%EA%B3%84%EC%82%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%88%98%EC%8B%9D-%EB%B0%8F-%EA%B3%84%EC%82%B0/</guid>
      <description>
        
        
        &lt;p&gt;간단한 산술 및 대입, 증가 연산에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;산술식&#34;&gt;산술식&lt;/h2&gt;
&lt;p&gt;컴퓨터는 인간처럼 자유롭게 말을 말하거나, 논리적으로 물건을 추론하는 것에는 좋지 않다 (무엇보다, 이것은 문서 작성 시점인 2002년경의 이야기이며, 변화하는 이 분야에서 항상이 상식이 통용된다고는 않지만&amp;hellip;). 그 대신 인간에 비해 컴퓨터는 계산에 좋다. 인간에게 계산을 시키면 몇 년이 걸릴거 같은 난해한 계산도 현대의 컴퓨터는 순식간에 대답을 낸다. 암산 챔피언이라도 컴퓨터의 계산 속도에 따라갈 사람은 없다. 컴퓨터가 하는 그 계산은 프로그램의 산물이다. 컴퓨터는 계산이 특기라서 이를 프로그래밍에서 사용하지 않을 수는 없다. 결국은 계산 없이 프로그램은 성립되지 않는다.&lt;/p&gt;
&lt;p&gt;계산을 위해서는 먼저 식을 만든다. 여기서 말하는 식은 기본적으로 수학에서 사용되는 &amp;ldquo;식&amp;quot;와 같은 의미이다. 식은 피연산자와 연산자로 구성되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;피연산자 연산자 피연산자 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그럼 &amp;ldquo;연산자(operator)&amp;ldquo;이란 무엇일까? 연산자는 한마디로! &amp;ldquo;더하기&amp;quot;와 &amp;ldquo;빼기&amp;quot;로 사용되는 수학 기호 +, - 등이다. 이것들은 앞에서 대입 연산을 하였기에, 이미 이해하고 있을 것이다. &lt;code&gt;A = B&lt;/code&gt;라는 표현식은 A와 B는 피연산자와 =라는 연산자로 구성되어 있다. 주의해야 하는 것은 컴퓨터에서는 ÷ 기호와 × 기호를 계산에 사용하지 않는다. 나누기(÷)는 / 기호를 곱하기(×)에는 * 기호를 사용한다. C 언어에서 사용되는 산술 연산자는 표1과 같다.&lt;/p&gt;
&lt;h3 id=&#34;표1-산술-연산자&#34;&gt;표1 산술 연산자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td&gt;추가&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td&gt;빼기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;td&gt;곱셈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td&gt;나누기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;td&gt;나머지&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;=&lt;/td&gt;
&lt;td&gt;대입&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;연산자가 필요로 하는 피연산자의 수를 항이라고 하고, 이러한 연산자는 좌우에 맞게 두 피연산자가 필요하므로 이항 연산자라고 한다. 이 밖에도 피연산자를 하나만 요구하는 단항 연산자와 피연산자 3개를 필요로하는 3항 연산자라는 것도 존재한다.&lt;/p&gt;
&lt;p&gt;C 언어의 결과는 항상 결과의 얻는 대상이 필요하다. 그것은 대입 연산자를 사용하여 변수를 받아도 상관 없고, 함수의 인수 등으로 건네 주어도 상관없다. 어쨌든, 결과를 뭔가를 받지 않으면, 계산하는 의미가 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;두개의 숫자를 입력해 주세요. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d + %d = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 두 숫자형 변수 op1과 op2에 scanf() 함수를 사용하여 값을 입력한다. 그 후에 printf() 함수를 사용하여 두 값을 더한 결과를 출력한다. 예를 들어 8과 16라는 값을 입력하면 그 결과는 &lt;code&gt;8 + 16 = 24&lt;/code&gt;로 출력되는 것이다.&lt;/p&gt;
&lt;p&gt;연산 결과는 대입식을 이용하여 다른 변수에 저장할 수 있다. 연산 결과를 화면에 표시하기만 한다면 코드1과 같이 인수로 함수에 전달하기 직전에 계산하는 방법으로도 괜찮지만, 연산 결과를 저장해야 할 경우 대입식을 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;두개의 숫자를 입력해 주세요. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d %d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;op3&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d * %d = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;op3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 변수 op3에 op1과 op2의 곱한 결과를 대입하고 있다. 연산 결과를 여러 번 프로그램에서 사용하는 경우, 그 때마다 계산을 반복하는 것은 CPU의 낭비되기 때문에, 계산 결과를 저장하고 사용하는 것이 좋다. 참고로 계산하는 변수와 대입하는 변수로 같은 것을 사용해도 문제는 없다. 예를 들어 &lt;code&gt;op1 = op1 * op2&lt;/code&gt;로 먼저 &lt;code&gt;op1 * op2&lt;/code&gt;가 계산되기 때문에 결과에 문제는 없다.&lt;/p&gt;
&lt;p&gt;연산자의 우선 순위는 수학 계산 순서와 동일하다. 단순히 왼쪽에서 오른쪽으로 계산되는 것은 아니기 때문에 주의해야 한다. 예를 들면 &lt;code&gt;2 + 2 * 3&lt;/code&gt;이라는 수식이 있을 경우, 먼저 &lt;code&gt;2 * 3&lt;/code&gt;이 계신되고, 그 후에 &lt;code&gt;2 + 6&lt;/code&gt;이 계산된다. 계산 순서를 변경하려면 수학 마찬가지로 괄호를 넣는다. 이 경우, 뎃셈을 먼저하고 싶은 경우 &lt;code&gt;(2 + 2) * 3&lt;/code&gt;와 같이 함으로써 먼저 &lt;code&gt;2 + 2&lt;/code&gt;가 계산된 후에 &lt;code&gt;4 * 3&lt;/code&gt;가 계산된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 printf(&amp;#34;2 + 2 * 3 = %d\n&amp;#34; , 2 + 2 * 3);
  printf(&amp;#34;(2 + 2) * 3 = %d\n&amp;#34; , (2 + 2) * 3);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드3의 실행 결과를 보면, 괄호를 사용하지 않는 경우는 뎃셈보다 곱셈이 먼저 계산되고 있다. 괄호로 뎃셈 부분을 묶어서 먼저 &lt;code&gt;2 + 2&lt;/code&gt;가 계산되고 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;또한 지금까지의 프로그램은 변수끼리를 계산하고 있었지만, 변수와 상수 또는 상수끼리라도 형태에 호환된다면 문제는 없다. 상수끼리를 계산한 경우에는 컴파일러가 컴파일시에 연산 결과를 예상할 수 있기 때문에 기계어로 변환된 때에는 최적화된다.&lt;/p&gt;
&lt;h2 id=&#34;복합-대입-연산&#34;&gt;복합 대입 연산&lt;/h2&gt;
&lt;p&gt;통상적으로 대입 연산자 =를 단순 대입이라고 한다. 이 외에 계산 및 대입을 동시에 하는 연산자가 존재한다. 예를 들어 &lt;code&gt;op1 = op1 + op2&lt;/code&gt;라는 계산을 할 경우, 이를 &lt;code&gt;op1 += op2&lt;/code&gt;로 기술될 수 있는 것이다. 이와 같은 다른 연산자와 단순 대입을 결합한 대입 연산자를 복합 대입이라고 한다. 산술 및 대입을 동시에 대입 연산자는 표2와 같이 정리할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;표2---복합-대입-연산자&#34;&gt;표2 - 복합 대입 연산자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+=&lt;/td&gt;
&lt;td&gt;더하고 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-=&lt;/td&gt;
&lt;td&gt;빼고 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*=&lt;/td&gt;
&lt;td&gt;곱하고 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/=&lt;/td&gt;
&lt;td&gt;나누고 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%=&lt;/td&gt;
&lt;td&gt;나머지 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int op1 = 0 , op2 = 0;

  printf ( &amp;#34;삼각형의 밑변과 높이를 입력하십시오. &amp;gt;&amp;#34;);
 scanf(&amp;#34;%d %d&amp;#34; , &amp;amp;op1 , &amp;amp;op2);

 op1 *= op2 / 2;
 printf(&amp;#34;삼각형의 면적 = %d&amp;#34; , op1);

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드4의 식 &lt;code&gt;op1 * = op2 / 2&lt;/code&gt;는 &lt;code&gt;op1 = op1 * (op2 / 2)&lt;/code&gt;와 같은 계산과 동일하다고 생각할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;증가-및-감소&#34;&gt;증가 및 감소&lt;/h2&gt;
&lt;p&gt;지금 단계에서는 생각하기 어려울지도 모르지만, 많은 프로그램은 현재 변수에 1을 가산 또는 감산하는 것을 자주한다. 이 때, 통상적으로 &lt;code&gt;var = var + 1&lt;/code&gt; 또는 &lt;code&gt;var += 1&lt;/code&gt;로 기술하는 것을 생각해내는 것이다. 물론 이것도 틀린 것은 아니지만, C 언어에서 이러한 작성은 일반적으로하지 않는다.&lt;/p&gt;
&lt;p&gt;C 언어는 현재 변수가 보유한 값에 &amp;ldquo;1 더하기&amp;rdquo;,  &amp;ldquo;1 빼기&amp;rdquo; 전문 연산자가 존재한다. 그것이 증가 연산자와 감소 연산자이다.&lt;/p&gt;
&lt;h3 id=&#34;증가-연산자&#34;&gt;증가 연산자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수명++
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;감소-연산자&#34;&gt;감소 연산자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수명--
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;++가 증가 연산자이다. 그 변수가 현재 들어있는 값을 1 증가한다. &amp;ndash;는 감소 연산자이다. 증가와는 반대로 그 변수가 현재 들어있는 값을 1 감소한다. 즉, &lt;code&gt;var = var + 1&lt;/code&gt;은 &lt;code&gt;var ++&lt;/code&gt;를 &lt;code&gt;var = var - 1&lt;/code&gt;는 &lt;code&gt;var--&lt;/code&gt;로 기술할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드5&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;증감 연산자 후에 var1 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;감소 연산자 후에 var2 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 0으로 초기화된 변수 iVar1과 iVar2를 각각 증가, 감소하고 화면에 표시하도록 하는데 있다. 예상했던대로 증가를 하면 1증가하고, 감소를 하면 1감산된 결과가 표시된다.&lt;/p&gt;
&lt;p&gt;증가 연산자와 감소 연산자는 두 가지 존재한다. 코드5는 후위 연산자라는 것을 사용하고 있는데, 이 밖에 전위 연산자라는 것도 존재한다. 각각 후위 증가 연산자, 후위 감소 연산자, 전위 증가 연산자, 전위 감소 연산자라고 한다.&lt;/p&gt;
&lt;p&gt;예를 들어, 전위 증가 연산자 &lt;code&gt;++var&lt;/code&gt;와 같이 변수 앞에 연산자를 놓는다. 후위와 무엇이 다른가하면, 식의 결과가 다르다.&lt;/p&gt;
&lt;h3 id=&#34;전위-증가-연산자&#34;&gt;전위 증가 연산자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;++변수명
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;전위-감소-연산자&#34;&gt;전위 감소 연산자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--변수명
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;후위 연산자는 변수를 사용하고 1 가산한다. 이에 대해, 전위의 경우 최초에 1을 더한 다음 변수를 사용한다. 코드5와 같이 증가 또는 감소뿐만 문장이면 전위에서도 후위도 결과는 동일하지만 복잡한 다항식에서 증가 연산자와 감소 연산자를 사용한 경우 영향이 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드6&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iVar1 = 0 , iVar2 = 0;
  printf(&amp;#34;후위 증가 연산자 = %d\n&amp;#34; , iVar1++);
  printf(&amp;#34;전위 증가 연산자 = %d\n&amp;#34; , ++iVar2);
  printf(&amp;#34;iVar1 = %d iVar2 = %d\n\n&amp;#34; , iVar1 , iVar2);

  printf(&amp;#34;후위 감소 연산자 = %d\n&amp;#34; , iVar1--);
  printf(&amp;#34;전위 감소 연산자 = %d\n&amp;#34; , --iVar2);
  printf(&amp;#34;iVar1 = %d iVar2 = %d\n\n&amp;#34; , iVar1 , iVar2);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 인수에 값을 전달하기 전에 증가 및 감소를 실시하고 있다. 이 때, 전위와 후위에서 어떻게 다르게 동작하는지 확인하자.&lt;/p&gt;
&lt;p&gt;실행 결과를 보면, 전위의 경우는 증가나 감소를 실시한 후에 함수에 값을 전달하고 있지만, 후위 경우 화면에 값이 표시된 후에 사용되는 것을 알 수 있다. 최종 결과는 동일하지만 이처럼 함수의 인수와 다항식으로 증가 또는 감소를 지정하는 경우는 매우 중요한 문제이다.&lt;/p&gt;
&lt;p&gt;즉, 후위 연산자의 경우는 printf() 현재의 변수 값을 전달하고 변수를 증가하고 있는 것이다. 따라서 최초의 증가는 변수의 값 0을 전달하고 증가하고 있다. 최초의 printf()가 표시한 값은 0이지만, 그 후에 iVar1의 값이 증가되어 있기 때문에 1로 된다.&lt;/p&gt;
&lt;p&gt;전위의 경우, 증가/감소하고 값을 함수에 전달되기 때문에 printf() 함수가 받는 값은 이미 계산된 후이다.&lt;/p&gt;
&lt;p&gt;그래서 만약 &lt;code&gt;x = var++&lt;/code&gt;라고 하는 계산을 하는 경우에 주의해야 한다. x에 전달된 값은 var의 값이며, 그 후에 var가 증가되는 것이다. var 증가하고 x에 var의 값을 전달하려면 &lt;code&gt;x = ++var&lt;/code&gt;로 기술되어야 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어</title>
      <link>https://www.devkuma.com/docs/c/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/The_C_Programming_Language_logo.jpg&#34; alt=&#34;C 언어&#34;&gt;&lt;/p&gt;
&lt;p&gt;1970년대부터 오래된 프로그래밍 언어이면서, 지금도 많은 소프트웨어 개발 및 교육 기관에서 채택되고 있는 &amp;ldquo;C 프로그래밍 언어&amp;quot;에 대해 해설하는 입문자를 위한 문서이다.&lt;/p&gt;
&lt;p&gt;이 책의 설명과 예제 코드는 ANSI X3.159-1989, American National Standard for Information Systems -Programming Language-C를 기반으로 설명하고 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 비트 처리</title>
      <link>https://www.devkuma.com/docs/c/%EB%B9%84%ED%8A%B8-%EC%B2%98%EB%A6%AC/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B9%84%ED%8A%B8-%EC%B2%98%EB%A6%AC/</guid>
      <description>
        
        
        &lt;p&gt;논리적, 논리화, 비트 시프트 등을 사용하여 정수를 비트 단위로 조작하는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;비트-연산&#34;&gt;비트 연산&lt;/h2&gt;
&lt;p&gt;산술 연산는 수학적인 계산을 수행하는데 적합하지만, 2진수를 제어하려면 적합하다고는 말할 수 없다. 즉, 비트 단위로 계산을 할 경우, 산술 연산는 적합하지 않다. 예를 들어, 32비트의 정수형 변수에서 상위 8비트를 얻고하고자 하는 경우, 산술 연산이 아니라 비트 단위의 계산이 필요하다. 그래서 이러한 비트 제어를 할 경우는 비트 논리 연산을 한다.&lt;/p&gt;
&lt;h3 id=&#34;표1---비트-연산자&#34;&gt;표1 - 비트 연산자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;비트 논리곱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|&lt;/td&gt;
&lt;td&gt;비트 논리합&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^&lt;/td&gt;
&lt;td&gt;비트 배타적 논리합&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;~&lt;/td&gt;
&lt;td&gt;1의 보수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;=&lt;/td&gt;
&lt;td&gt;비트 AND 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;|=&lt;/td&gt;
&lt;td&gt;비트 OR 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;^=&lt;/td&gt;
&lt;td&gt;비트 배타적 OR 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;표1의 연산자를 비트 연산자라고 한다. 어떤지, 논리곱라든지 논리합든가, 어려울 것 같은 말이 나왔지만 복잡하게 생각하지 말자. 논리 연산은 2진수의 0과 1을 스위치의 ON과 OFF처럼 생각하고, 0의 상태를 거짓(FALSE), 1의 상태를 참(TRUE)이라고 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;우선는 논리곱부터 사용해 보자. 논리곱(AND)과 비교하는 두 비트가 양쪽 모두 1이면 참, 그렇지 않으면 거짓을 산출한다. 이 관계는 표2와 같이 된다.&lt;/p&gt;
&lt;h3 id=&#34;표2---논리곱-관계&#34;&gt;표2 - 논리곱 관계&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;A&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;B&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;A &amp;amp; B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이러한 논리곱의 성질을 이용하면, 특정 비트만을 추출하는 것이 가능하다. 예를 들어 0101 1100는 2진수가 있는 경우, 하위 4비트의 값을 얻고 싶다면 0000 1111과의 논리곱을 구한다.&lt;/p&gt;
&lt;h3 id=&#34;표1---논리곱에-의한-비트-추출&#34;&gt;표1 - 논리곱에 의한 비트 추출&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  0101 1100
&amp;amp; 0000 1111
------------
  0000 1100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이러한 계산을 시키면, 마스크 비트의 상위 4비트는 0이므로 결과는 항상 0이 되고, 하위 4비트는 모두가 1이므로, 비교하는 비트 중에 1부분만 1로 추출된다. 이 성질은 RGB 형식의 색상 정보를 나타내는 32비트 값에서 붉은 요소만을 추출하고 싶은 경우에 적용된다. 32비트 중 16 ~ 23 비트가 붉은 요소를 나타내는 경우, 이에 0xFF0000과의 논리곱을 구하여 붉은 요소의 값만을 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ch5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ch5:%%c = %c , %%X = %X , &amp;amp; = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ch5&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ch5&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ch5&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x0F&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 ASCII 문자의 숫자와 실제의 수치의 관계를 알 수 있다. 문자 상수로써의 숫자(예를 들어 &amp;lsquo;5&amp;rsquo;)와 정수(예 : 5)는 전혀 다른 것이다. 실제로 문자 상수 &amp;lsquo;5&amp;rsquo;를 숫자로 출력하면 전혀 관계없는 값임을 알 수 있다. 그러나, ASCII 문자는 숫자도 0 ~ 9까지 존재하고, 그 규칙을 아는 것으로 문자 상수를 실제 숫자로 변환할 수 있다.&lt;/p&gt;
&lt;p&gt;사실는 ASCII 문자의 숫자는 16진수 0x30 ~ 0x39까지 매핑되어 있다. 즉, 문자 상수 &amp;lsquo;0&amp;rsquo;은 ASCII 코드로 0x30이며, 반대로 생각을 하면 ASCII 코드로 0x37은 문자 상수 &amp;lsquo;7&amp;rsquo;이라고 생각할 수 있다. 이 규칙성을 살려, 문자 상수의 상위 4비트 값을 제거하면 순수한 숫자로 변환할 수 있다는 것이다. 코드1은 바로 이것을 ch5 &amp;amp; 0x0F으로 실행하고 있다. ASCII 코드의 숫자에 대해서 0x0F와의 논리곱을 구하여 숫자로 변환할 수 있다.&lt;/p&gt;
&lt;p&gt;다음으로, 논리합(OR)인데, 이것은 비트 중에 하나가 1이면 참이라는 결과를 내고 있다. 모두 0으로 비교하면 원래 값이 모두 1로 비교하면 모든 비트가 1이 된다.&lt;/p&gt;
&lt;h3 id=&#34;표3---논리합-관계&#34;&gt;표3 - 논리합 관계&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;A&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;B&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;A | B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이 성질을 잘 이용하면 비트 플래그의 조합을 만들 수 있다. 또, 이전과는 반대로 숫자부터 ASCII 코드의 숫자로 변환하는 처리를 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar:%%d = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;iVar | 0x30:%%c = %c&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x30&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 숫자형 변수 iVar에 저장되어 있는 값을 ASCII 문자의 숫자로 변환한다. 다만, iVar 값은 1 자리이어야 한다.&lt;/p&gt;
&lt;p&gt;배타적 논리합(XOR)는 두 값이 같으면 거짓이 되는 논리 연산으로 한쪽이 1이고 한쪽이 0일 때 참이다. 같은 비트 열의 배타적 논리합 &lt;code&gt;A ^ A&lt;/code&gt;는 항상 0이 되는 성질이 있다. 또 &lt;code&gt;A ^ B&lt;/code&gt;를 실행한 결과 C에 &lt;code&gt;C ^ B&lt;/code&gt;를 구하면 결과는 A로 된다라고 하는 성질이 있다.&lt;/p&gt;
&lt;h3 id=&#34;표4---배타적-논리합-관계&#34;&gt;표4 - 배타적 논리합 관계&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;A ^ B&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xF0F0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar1 ^ iVar1 = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xABCD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar2 = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar2 ^ 0xABCD = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xABCD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3은 변수 iVar1에 0xF0F0을 대입하고 있다. 최초에 printf()는 iVar1끼리의 배타적 논리합을 구하고 있다. 동일한 비트 열의 배타적 논리합은 항상 0이 되는 성질이 있기 때문에, 이 결과가 0이 되는 것을 확인할 수 있을 것이다. 다음 iVar2에 iVar1과 0xABCD의 배타적 논리합을 저장한다. 이 값은 원래 값과는 관계가없는 수치로되어 있습니다 만, iVar2에 다시 동일한 값 0xABCD의 배타적 논리합을 구하면 원래으; 값 iVar1와 동일하다.&lt;/p&gt;
&lt;p&gt;마지막으로 1의 보수인데, 이것은 단순히 비트 열을 반전시킨다. ~ 연산자는 다른 비트 연산와 다르게 단항 연산식으로, 주어진 값의 비트열을 반전시킨다. 예를 들어, 비트 맵 이미지에서 각 픽셀의 색상 정보를 얻고, ~ 연산자를 사용하여 비트를 반전시킴으로써 색상을 반전시키는 것도 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xCC33CC33&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;~%X = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드4는 부호없는 정수 iVar에 0xCC33CC33을 대입하고 있다. 이것은 2진수로 1100 1100 0011 0011 1100 1100 0011 0011는 32 비트 값이지만, 이를 반전 시키면 0011 0011 1100 1100 0011 0011 1100 1100 즉, 16진수 0x33CC33CC라는 값이 된다. 이 프로그램을 실행하면 ~ 연산자는 의해 비트가 반전하고 있는 것을 확인할 수 있을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;비트-시프트&#34;&gt;비트 시프트&lt;/h2&gt;
&lt;p&gt;비트 시프트는 비트 열을 그대로 왼쪽 또는 오른쪽으로 이동시키는 연산이다. 비트 시프트는 시프트 연산자를 사용하여 실행한다. 시프트 연산자와 시프트 연산을 이용한 복합 대입 연산자는 표5와 같다.&lt;/p&gt;
&lt;h3 id=&#34;표5---시프트-연산자&#34;&gt;표5 - 시프트 연산자&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;laquo;&lt;/td&gt;
&lt;td&gt;왼쪽 시프트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;raquo;&lt;/td&gt;
&lt;td&gt;오른쪽 시프트&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;laquo;=&lt;/td&gt;
&lt;td&gt;왼쪽 시프트 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;raquo;=&lt;/td&gt;
&lt;td&gt;오른쪽 시프트 대입&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;시프트 연산자는 다음과 같이 사용한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;값 &amp;lt;&amp;lt; 시프트수
값 &amp;gt;&amp;gt; 시프트수
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;는 비트를 왼쪽으로 이동하고,  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 비트를 오른쪽으로 이동한다. 값을 몇번을 이동할지를 이동 수를 지정한다. 이동한 만큼 발생한 공백은 0으로 채워진다.&lt;/p&gt;
&lt;p&gt;1111 1111 &amp;raquo; 2 &amp;ndash; 오른쪽으로 2이동 &amp;ndash;&amp;gt; 0011 1111&lt;/p&gt;
&lt;p&gt;이러한 기능은 도대체 어디에 사용하는 거지라고 생각할지 모른다. 실은 오른쪽으로 이동할 때마다 2로 나눈 결과와 같다. 왼쪽으로 이동 할 때마다 2로 곱한 것과 동일하다. 일반적으로 CPU는 산술 연산보다 시프트 연산을 사용하는 것이 처리가 빠르다는 장점이 있다 (컴파일러에 의해 컴파일시에 최적화되어 버리기 때문에, 변환가 없는 경우도 있다). 그 외에도 32비트 열을 24비트 오른쪽 시프트하여 상위 8비트를 얻는 이용 방법도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드5&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar / 4 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;iVar * 4 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 값이 100인 변수에 대해 오른쪽으로 2번  이동한 값과 왼쪽으로 2번  이동한 값을 표시한다. 2회 이동하는 것은 4를 곱하거나, 나눈 것이 동일하다는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;데이터 형의 크기를 초과 이동한 경우는 잘린다. 또한 부호있는 정수를 오른쪽으로 이동하면, 최상위 비트가 변화하기 때문 부호가 바뀌어 버릴 것이다. 실은 오른쪽 시프트해서 부호는 저장될 수도 있다. 부호있는 정수를 오른쪽으로 이동하면 최상위 비트는 저장된 상태로 이동되고, 부호없는 정수를 오른쪽으로 이동하면 최상위 비트가 0으로 클리어된다. 이를 산술 시프트라고 한다. 반대로, 어떤 상태이든 최상위 비트가 항상 0으로 클리어되는 시프트를 논리 시프트라고 한다. 산술 시프트가 행해지는지, 논리 변화가 일어나는지는 구현에 따라 달라진다. 따라서 이식성있는 프로그램을 작성하는 것이 목적인 경우는 산술 시프트와 논리 시프트 등의 결과에 의존하지 않도록 주의해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드6&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar &amp;gt;&amp;gt; 2 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드6은 -100의 값을 가진 부호있는 정수형 변수 iVar에 대해 오른쪽 시프트를 하고 있는데, 산술 시프트를 하고 있는지, 논리 시프트를 하고 있는지는 프로그램을 실행하는 계산에 따라 다르다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 형변환</title>
      <link>https://www.devkuma.com/docs/c/type-casting/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/type-casting/</guid>
      <description>
        
        
        &lt;p&gt;정수와 부동 소수점 등 다른 자료형끼리 값을 계산시키면 어떻게 될까 자료형과 규칙에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;산술-변환&#34;&gt;산술 변환&lt;/h2&gt;
&lt;p&gt;지금까지 계산식을 여러번 사용해 왔지만, 실제 프로그래밍에서는 연산식의 피연산자에 변수를 이용하는 경우가 많이 있는데, 그 변수가 반드시 동일한 자료형은 아니다. 예를 들어 계산식의 연산으로 int 형과 float 형의 연산이 행해진 경우는 어떻게 될까? C 언어에서는 이 같은 다른 형태의 연산을 해도 문법적으로는 틀린 것은 아니다.&lt;/p&gt;
&lt;p&gt;피연산자는 계산식 중에서 큰 자료형에 맞게 변환된다는 규칙이 있다. 만약 사이즈가 큰 자료형을 작은 자료형으로 변환하면 상위 비트를 제거하게 되므로 정보를 잃어 버릴 가능성이 있다. 그러나 사이즈를 확장하는 경우는 정보를 잃지 않는다. 또한, int 형 이하의 사이즈의 자료형은 계산식에 의해 int 형(즉, 컴퓨터 연산에 사용하는 정수 사이즈)으로 변환된다. 이것은 평소 프로그래머가 의식할 필요는 없지만, 알아두면 손해는 없을 것이다.&lt;/p&gt;
&lt;p&gt;이러한 연산식의 변환을 산술 변환이라고 한다. 변환 규칙을 정리하면 표1과 같이 된다.&lt;/p&gt;
&lt;h3 id=&#34;표1-산술-변환의-법칙&#34;&gt;표1 산술 변환의 법칙&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/c_type_casting.png&#34; alt=&#34;산술 변환의 법칙&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;.555&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램에슨 printf() 함수의 인수부에 &lt;code&gt;chVar + iVar + fVar&lt;/code&gt;라는 연산을 하고 있는데, 이러한 변수는 모두가 다른 자료형이다. 그래서 산술 변환이 되어 최종적으로는 가장 큰 사이즈인 float 형으로 변환된다. char 형과 int 형의 값은 float형으로 변환되어 정보 손실은 없다. 최종적으로는 150.555이라는 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;대입-변환&#34;&gt;대입 변환&lt;/h2&gt;
&lt;p&gt;계산식에서 다른 자료형의 피연산자가 있으면 산술 변환을 수행했는데, 계산의 결과를 대입하는 변수가 연산 결과의 자료형과 동일하지는 않는다.&lt;/p&gt;
&lt;p&gt;대입의 경우에도 자료형이 다른 경우는 암시적으로 변환하여 대입된다. 이것을 대입 변환이라고 한다. 이 때 변수의 사이즈가 계산식의 자료형보다 큰 경우는 아무런 문제가 없다. 계산 결과 자료형보다 큰 사이즈로 변환하면, 손실되는 정보가 없기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 char 형 변수를 int 형 변수에 대입하고 있다. 이 경우 char 형 변수 chVar값이 int로 확장될 것이다. 원래 사이즈보다 확장된 변환의 경우, 정보 손실이 아니기 때문에 문제가 없다.&lt;/p&gt;
&lt;p&gt;그러나 반대로 왼쪽의 변수 자료형이 우변보다 사이즈가 작은 경우에는 문제가 있다. 이 경우에도 오류가 발생하지 않지만 값은 정보의 일부를 손실되어 대입된다. 예를 들어 int에서 char로 변환된 경우 상위 비트가 잘려서 대입된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xABCD&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;chVar = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3에서는 int 형 변수 iVar를 char 형 변수 chVar에 대입하고 있다. 이 경우 자료형이 다르기 때문에 대입 변환이 적용되는데, int 형에서 char 형으로의 변환에 문제가 발생한다. char 형는 int 형보다 사이즈가 작기 때문에, 이 경우는 축소 변환되어 버린다. 따라서 8비트 이상의 상위 바이트는 절단되기 때문에 그 결과 일부 정보를 잃게 된다.&lt;/p&gt;
&lt;p&gt;int 형이 32비트라고 가정하면 iVar 값은 2진수로 &lt;code&gt;0000 0000 0000 0000 1010 1011 1100 1101&lt;/code&gt;이다. 이 8비트인 char 형으로 변환한 경우, 상위 비트가 버려지고 &lt;code&gt;1100 1101&lt;/code&gt;이 된다. 그 결과, 이 프로그램은 16진수 CD를 표시하는 것이다. 만약 부동 소수점에서 정수로 변환이 이루어진 경우, 소수의 정보가 손실된다.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;정보가 손실된다&amp;quot;라고 표현하면 뭔가 나쁜 것처럼 느껴지지만, 하위 8비트를 얻어려는 경우와 부동 소수점의 정수 부분만을 추출하고자 하는 경우에는 이러한 축소 변환이 유용하다. 경우에 따라 잘 이용할 수 있도록 해보자.&lt;/p&gt;
&lt;h2 id=&#34;형변환&#34;&gt;형변환&lt;/h2&gt;
&lt;p&gt;지금까지의 산술 변환 및 대입 변환은 암시적 변환이었다. 그러나 지정된 형으로 값을 변환하도록 프로그래머가 전하는 명시적 변환 방법도 존재한다. 이것을 형변환(type casting)이라고 한다. C 언어에서 어떤 형을 다른 형으로 강제로 변환할 수 있다. 형변환을 사용하려면 다음과 같은 구문을 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;형변환식&#34;&gt;형변환식&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(변환하는 형 이름)값
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;형을 변환하는 형 이름으로 지정하고 그 형식으로 변환하는 값을 지정한다. 값은 지정된 형으로 변환되고, 대입하는 곳와 함수의 인수로써 전달될 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12.34f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;전체 = %g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;실수 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;소수 = %g&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드4는 타입 캐스팅을 이용하여 부동 소수점 변수 fVar에서 실수와 소수을 얻어내고 있다. 이 처럼 캐스트를 이용하면 작은 형으로 변환할 수 있기 때문에 상위 비트를 잘라내고, 소수점 형을 정수형으로 변환하는 것이 가능하다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | C 언어 입문 | 3문자 표기</title>
      <link>https://www.devkuma.com/docs/c/3%EB%AC%B8%EC%9E%90-%ED%91%9C%EA%B8%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/3%EB%AC%B8%EC%9E%90-%ED%91%9C%EA%B8%B0/</guid>
      <description>
        
        
        &lt;p&gt;C에서 ??에서 시작하는 3문자를 사용하여 정해진 다른 기호로 대체할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;문자-대체&#34;&gt;문자 대체&lt;/h2&gt;
&lt;p&gt;별로 알려져 있지 않지만, C 언어에는 문자 상수에 3문자 표기(트라이그래프:trigraph)를 사용할 수 있다. 이것은 ISO 646라는 규격과 관련이 있는데, 왜 이런(까다로운) 표기가 존재 하는가 하면, 거기에는 문자 코드의 역사적인 배경이 있다. ISO 646는 ASCII 코드의 일부 문자를 변경할 수 있도록 고려되어 있다. 이렇게 하면, 영어 이외의 언어에 필요한 특수 기호를 국가별 규격에서 사용할 수 있도록 되어 있지만, 같은 코드에서도 다른 문자가 표시되는 문제가 발생했다.&lt;/p&gt;
&lt;p&gt;이 ISO 646의 영향으로 일부 언어(키보드)에서 처리할 수 없는 ASCII 코드를 표현하기 위해 사용된 것이 3문자 표기이다. 3문자 표기는?? 두 문자와 그 뒤의 기호로 표현된다. 현대에는 거의 사용하지 않지만, 모른다면, 리터럴 문자열에 &lt;code&gt;??&lt;/code&gt;라는 단어가 포함된 경우에 예상치 못한 문자로 변환되어 버릴 수 있다.&lt;/p&gt;
&lt;p&gt;3문자 표기는 표1과 같은 세 문자로 이루어진 문자 상수이다. 이 3문자는 컴파일시에 대응하는 단일 문자로 대체된다.&lt;/p&gt;
&lt;h3 id=&#34;표1---3문자-표기&#34;&gt;표1 - 3문자 표기&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;트라이그래프&lt;/th&gt;
&lt;th&gt;대체 문자&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;??=&lt;/td&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??(&lt;/td&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??/&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??)&lt;/td&gt;
&lt;td&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??&#39;&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??&amp;lt;&lt;/td&gt;
&lt;td&gt;{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??!&lt;/td&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??&amp;gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;??-&lt;/td&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이러한 변환은 컴파일시 먼저 이루어진다. 더 자세히 설명하면, 컴파일러는 컴파일시에 번역 단계(phase)라는 단위로 소스 프로그램을 정해진 순서에 따라 분석하지만, 3문자 표기는 행이나 토큰이 식별되는 무엇보다 먼저 분석된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;??=include &amp;lt;stdio.h&amp;gt;

int main() ??&amp;lt;
  printf(&amp;#34;??= , ??( , ??)??/n&amp;#34;);
  return 0;
??&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이러한 C 언어 소스 프로그램은 잘못되지 않았다. 3문자 표기는 무엇보다도 앞서 변환되므로 컴파일러 토큰을 분석할 무렵에는 올바른 기호로 변환된다.&lt;/p&gt;
&lt;p&gt;문자열 리터럴에 ??을 표현하려면 이스케이프 시퀀스를 사용하여 ? ?를 기술한다.&lt;/p&gt;
&lt;p&gt;3문자 표기는 이용 빈도가 낮기 때문에 컴파일 속도 향상을 위해 3문자 표기를 구현하지 않거나 기본적으로는 처리를 하지 컴파일러가 주류이다. 예를 들면 Borland C ++ Compiler 5.5에서는 구현되지 않고, 그 대신 변환 도구 TRIGRAPH.EXE이 제공하고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;trigraph 소스파일명
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 도구를 사용하면 소스의 3문자 표기를 해당하는 문자로 변환해 준다. Borland C ++ Compiler 5.5에서 3문자 표기를 포함한 소스를 컴파일하려면 먼저 이 도구를 사용하여 올바른 기호로 변환해야 한다.&lt;/p&gt;
&lt;p&gt;Microsoft Visual C ++에서는 기본 설정은 비활성화되어 있기 때문에 컴파일러 옵션 &lt;code&gt;/Zc:trigraphs&lt;/code&gt;을 지정하여 사용할 수 있다. 단, 편집기에서 3문자 표기를 사용한 코드 입력은 지원하지 않는다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어</title>
      <link>https://www.devkuma.com/docs/c/%ED%9D%90%EB%A6%84-%EC%A0%9C%EC%96%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%9D%90%EB%A6%84-%EC%A0%9C%EC%96%B4/</guid>
      <description>
        
        
        
      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | 진위 판정</title>
      <link>https://www.devkuma.com/docs/c/%EC%A7%84%EC%9C%84-%ED%8C%90%EC%A0%95/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%A7%84%EC%9C%84-%ED%8C%90%EC%A0%95/</guid>
      <description>
        
        
        &lt;p&gt;두 값의 대소 관계를 확인해서 관계 연산이나, 두 값이 동일한지 여부를 확인하는 등가 연산을 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;관계-연산과-등가-연산&#34;&gt;관계 연산과 등가 연산&lt;/h2&gt;
&lt;p&gt;지금까지의 프로그램은 항상 위에서 아래로 순서대로 실행되는 순서대로 실행했지만 프로그램은 상황에 따라 처리를 변경시킬 필요가 있다. 즉, 분기나 반복하는 처리이다. 이러한 조건 분기나 반복 처리 프로그래밍의 기본 중의 기본이며, 가장 중요한 부분이기도 하므로, 이 장에서는 철저히 그 구조를 설명하고, 프로그램의 흐름을 자유롭게 제어할 수 있게 될 때까지 해보도록 하자.&lt;/p&gt;
&lt;p&gt;프로그램은 프로그램의 흐름을 제어하기 위해 어떤 정보를 소재로 해야 한다. 예를 들어, &amp;ldquo;변수 A가 100 이하 이면&amp;rdquo; 또는 &amp;ldquo;변수 A와 변수 B의 값이 같으면&amp;quot;과 같은 비교의 결과로 프로그램을 분기시킬 수 있다면, 상황에 따른 적절한 처리로 진행할 수 있다고 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;그래서 C 언어에는 비교 결과가 참(TRUE) 또는 거짓(FALSE)인지에 따라 상황을 판단한다. 진위는 값에 의해 식별되도록 0이면 거짓, 그렇지 않으면 참이라고 해석된다. 예를 들어, 변수 A가 변수 B와 동일한지 여부를 판단한 결과, 동일한 상태를 참이라고 하고, 동일하지 않은 상태를 거짓이라고 한다.&lt;/p&gt;
&lt;p&gt;일반적으로 값의 비교는 관계 연산자, 등가 연산자 및 논리적 연산자를 사용한다. 이러한 연산자는 표현식을 확인하여, 그 결과에 따라 참 또는 거짓을 반환한다. 사실 실체는 수치이므로 이러한 연산자가 반환하는 결과는 int형이다. 각 연산자는 표1에 정리한다.&lt;/p&gt;
&lt;h3 id=&#34;표1&#34;&gt;표1&lt;/h3&gt;
&lt;h4 id=&#34;관계-연산자&#34;&gt;관계 연산자&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;lt; B&lt;/td&gt;
&lt;td&gt;A가 B보다 작으면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;lt;= B&lt;/td&gt;
&lt;td&gt;A가 B와 같거나 작으면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;gt; B&lt;/td&gt;
&lt;td&gt;A가 B보다 크면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;gt;= B&lt;/td&gt;
&lt;td&gt;A가 B와 같거나 크면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;등가--부등가-연산자&#34;&gt;등가 · 부등가 연산자&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A == B&lt;/td&gt;
&lt;td&gt;A와 B가 같으면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A != B&lt;/td&gt;
&lt;td&gt;A와 B가 같지 않으면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;논리-연산자&#34;&gt;논리 연산자&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A &amp;amp;&amp;amp; B&lt;/td&gt;
&lt;td&gt;A와 B가 참이면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A || B&lt;/td&gt;
&lt;td&gt;A 또는 B가 참이면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!A&lt;/td&gt;
&lt;td&gt;A가 거짓이면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;ldquo;같으면&amp;quot;라고 판단을 할 경우는 &lt;code&gt;A = B&lt;/code&gt;가 아니라 &lt;code&gt;A == B&lt;/code&gt;인 점에 유의하자. &lt;code&gt;A = B&lt;/code&gt;로 기술하면 B를 A에 대입한다는 의미가 되어 버리기 때문에 잘못된 결과를 얻을 수 있게 될 것이다. 해당 연산에 의한 실수를 방지하기 위해서는 왼쪽 피연산자에 상수를 가져오는 습관을 들이는 방법이 있다. 왼쪽 피연산자가 정수의 경우 실수로 대입 연산자 =를 지정 버려도 상수 값을 할당할 수 없기 때문에 컴파일 오류가 발생한다. 따라서 등가 연산을 지정하는 곳에 대입 연산자를 지정하는 실수에 알아차릴 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;그러나 &lt;code&gt;(A = B) == 0&lt;/code&gt; 구문은 잘못 곳이 않았다. 대입 연산자 =는 결과(이 경우는 최종적인 A의 값)을 반환하기 위해, 어떤 계산 결과를 판단하고자 하는 경우에 사용하는 것은 가능하다. 예를 들어, 어떤 계산을하고 그 결과를 변수에 저장한 후, 오류 검사 등을 실시하는 경우에 이를 이용할 수 있다. &lt;code&gt;B + C&lt;/code&gt;의 결과를 A에 저장하지만, 그 결과가 0인지 여부를 판단하는 경우 &lt;code&gt;(A = B + C) == 0&lt;/code&gt;라고 기술하면, 그 진위를 묻는 수 있다 .&lt;/p&gt;
&lt;p&gt;논리 연산자는 등가 · 부등가 연산자보다 등가 · 부등가 연산자는 관계 연산자보다 우선 순위가 낮기 때문에, 이러한 연산자를 동시에 사용하는 경우는 의식할 필요가 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iVar1 , iVar2;
  printf(&amp;#34;2개 값을 입력해 주세요. &amp;gt;&amp;#34;);
 scanf(&amp;#34;%d %d&amp;#34; , &amp;amp;iVar1 , &amp;amp;iVar2);

 printf(&amp;#34;iVar1 == iVar2 = %d\n&amp;#34; , iVar1 == iVar2);
  printf(&amp;#34;iVar1 &amp;lt; 1000 = %d\n&amp;#34; , iVar1 &amp;lt; 1000);
  printf(&amp;#34;iVar1 &amp;lt; iVar2 &amp;amp;&amp;amp; iVar1 &amp;gt; 100 = %d\n&amp;#34; , (iVar1 &amp;lt; iVar2) &amp;amp;&amp;amp; (iVar1 &amp;gt; 100));

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램을 실행하면 두 값을 입력하도록 요구한다. 값은 iVar1과 iVar2 변수에 각각 저장되어 다음 조건식에 의해 그 값의 관계를 확인하고 있다.&lt;/p&gt;
&lt;p&gt;최초의 printf()는 iVar1과 iVar2가 동일한지 여부를 확인한다. 만약, 입력한 두 값이 동일한 값이면, 이 결과는 참이 되므로 0이 아닌 값이 출력된다. 일반적으로 참을 나타내는 0 이외의 값은 1이 사용된다. 다음의 printf() 함수는 iVar1가 1000보다 낮은지 여부를 확인한 결과를 출력하고, 마지막 printf() 함수는 iVar1이 iVar2보다 낮고, iVar1가 100보다 큰지 여부를 확인한 결과를 출력한다.&lt;/p&gt;
&lt;p&gt;마지막의 논리 연산자 &amp;amp;&amp;amp;를 이용한 조건식은 조금 복잡하게 보이지만, 이렇게 하면 매우 유연한 비교를 할 수 있다. &amp;amp;&amp;amp; 연산자에 의해 &amp;ldquo;좌우의 비교 결과가 참일 때만 참이다&amp;quot;라는 체크를 할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;amp;&amp;amp;와 || 특징으로 조건에 따라서는 왼쪽 피연산자를 분석한 시점에서 결과를 알 수 있다. 논리 연산자는 항상 왼쪽 피연산자에서 오른쪽 피연산자의 순서로 분석하는 것이지만, &amp;amp;&amp;amp;는 피연산자가 거짓이면 다른 피연산자가 어떻든 간에 결과는 거짓이다. 따라서 만약 왼쪽 피연산자가 거짓이면 오른쪽 피연산자이 어째던 결과는 항상 거짓임을 보장되기 때문에 프로그램은 오른쪽 피연산자를 확인하지 않고 false를 반환한다. 마찬가지로 || 연산자의 경우는 한쪽이 피연산자가 참이면 그 결과는 항상 참임을 보장되므로 왼쪽 피연산자가 참이면, 오른쪽 피연산자는 확인하지 않고 참을 반환한다.&lt;/p&gt;
&lt;p&gt;항상 이것을 의식할 필요는 없지만, 진위 여부를 확인시에 어떤 연산을 수행하는 식이 포함된 경우는 위험하다. 예를 들어, 논리 연산자의 오른쪽 피연산자로 증가 또는 감소를 사용한 경우 왼쪽 피연산자만으로 결과가 판정되어 버리면, 오른쪽 피연산자는 계산되지 않는다. 이것은 코드2에서 입증될 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iVar = 0 , iTmp;

  iTmp = 0 &amp;amp;&amp;amp; iVar++;
 printf(&amp;#34;iVar = %d\n&amp;#34; , iVar);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드2의 &lt;code&gt;iTmp = 0 &amp;amp;&amp;amp; iVar ++;&lt;/code&gt;행을 보도록 한다. 왼쪽 피연산자에 상수 0을 지정하고 있는데, 이는 곧 거짓이다. 프로그램은 왼쪽 피연산자를 확인한 시점에 이 식의 결과가 거짓임을 보증할 수 있기 때문에, 오른쪽 피연산자를 확인할 필요가 없다. 따라서 &lt;code&gt;iVar++&lt;/code&gt;는 실행되지 않기 않아서 printf는 iVar 값을 0으로 표시하는 것이다. 6번째 줄의 코드를 &lt;code&gt;1 &amp;amp;&amp;amp; iVar ++&lt;/code&gt;와 같이 써서 변경하면 &lt;code&gt;iVar++&lt;/code&gt;가 수행이 되고확인한다는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그런데 &amp;ldquo;한쪽이 참, 다른 한쪽이 거짓일 때 참&amp;quot;이라는 결과를 얻고 싶다면 어떻게하면 좋을까? 이런 논리 연산을 배타적 논리합이라고 한다. 배타적 논리합은 C 언어의 3가지 논리 연산자를 사용하여 계산할 수 있다. 비트 논리 연산과 혼동하지 말자. 여기의 배타적 논리합은 조건식의 논리 값을 얻기 위한 것이다.&lt;/p&gt;
&lt;p&gt;이것을 실현하려면 평가해야 두 피연산자 중 하나가 참인지 확인하고, 쌍방이 참이라면 부정해서 거짓으로하면 된다. 한쪽이 참이면 참인 것은 논리합 &lt;code&gt;bool1 || bool2&lt;/code&gt;, 양쪽이 참이라면 참인 것은 논리곱 &lt;code&gt;bool1 &amp;amp;&amp;amp; bool2&lt;/code&gt;이다. 첫번째는 논리합과 논리곱을 부정한 결과를 논리곱을 구한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(bool1 || bool2) &amp;amp;&amp;amp; !(bool1 &amp;amp;&amp;amp; bool2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이를 구하면 bool1과 bool2 중 &amp;ldquo;한쪽은 참, 다른 한쪽은 거짓이면 참&amp;quot;이라는 배타적인 결과를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
  int iBool1 , iBool2;
  printf(&amp;#34;2개의 연산값을 입력해 주세요. &amp;gt;&amp;#34;);
  scanf(&amp;#34;%d %d&amp;#34; , &amp;amp;iBool1 , &amp;amp;iBool2);

 printf(&amp;#34;iBool1 XOR iBool2 = %d\n&amp;#34; , (iBool1 || iBool2) &amp;amp;&amp;amp; !(iBool1 &amp;amp;&amp;amp; iBool2));
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 입력된 두 값 중에 한쪽이 참이고 다른 한쪽이 거짓인 경우에만 참인 결과를 얻기위한 테스트 프로그램이다. 양쪽의 피연산자가 거짓 또는 진실인 경우는 0(거짓)이 표시되고, 그렇지 않으면 1(참)인 결과를 얻을 수 있을 것이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | if문</title>
      <link>https://www.devkuma.com/docs/c/if%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/if%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;조건에 따라 실행하는 문장을 선택하는 if 문을 소개한다. if 문을 이용함으로써 상황에 따라 프로그램의 흐름을 변경할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;프로그램을-분기시키기&#34;&gt;프로그램을 분기시키기&lt;/h2&gt;
&lt;p&gt;지금까지는 프로그램은 main() 함수의 내부를 위에서 아래로 성실하게 수행하여 왔다. 입력을 배워서 보다 동적인 결과를 얻을 수 있게 되었지만, 프로그램은 항상 1개의 길로 나아갈 뿐이었다.&lt;/p&gt;
&lt;p&gt;여기에서는 추가적으로 값을 판정하고 프로그래머의 의도에 따라 프로그램을 동작시킨다. 즉, 프로그램을 분기시킨다. 값을 판단하는 방법은 앞에서 &amp;ldquo;진위 판정&amp;quot;에서 배웠다.&lt;/p&gt;
&lt;p&gt;프로그램을 분기하는 가장 기본적인 제어문은 if 문다. if 문은 &amp;ldquo;~가 ~하면 ~한다&amp;quot;라는 프로그램 제어를 가능하게 한다. ~가 ~라면이라는 부분은 관계 연산자와 논리 연산자를 이용한 조건식으로 표현할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;if-문&#34;&gt;if 문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (조건식) 문장
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;조건식은 참 또는 거짓을 나타내는 값(즉, 결국은 숫자)을 지정한다. if 문은 조건식의 결과가 참인 경우에만 실행되고, 그렇지 않으면 실행되지 않는다. 보다 간단하게 말하면, 조건식에 0이 아닌 값이 지정된 경우에만 실행되는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0 또는 다른 값을 입력하십시오. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;참이 입력되었습니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;거짓이 입력되었습니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1을 실행하면 값의 입력이 요구되므로 0 또는 다른 값(즉, true 또는 false)을 입력한다. 그러면 프로그램은 if 문에 입력된 값을 판단해 그 결과에 따라 표시하는 문장이 변한다. 첫번째 if 문은 iBool이 참이라면 그 다음의 if 문은 부정 연산자! 부정하고 있기 때문에 iBool이 거짓이면 계속해서 문을 실행한다.&lt;/p&gt;
&lt;p&gt;iBool이 거짓이면 실행하는 if 문을 기술할 경우, &lt;code&gt;!iBool&lt;/code&gt; 대신 &lt;code&gt;iBool == 0&lt;/code&gt;라고 써도 같은 결과를 얻을 수 있다. &lt;code&gt;if (!iBool)&lt;/code&gt;라는 문장은 영어권 사람들이 보면 직관적으로 if not iBool 느낄 수 있지만, 한국인은 &lt;code&gt;if (iBool == 0) ...&lt;/code&gt;라고 쓰는 것이 이해가 쉬울지도 모른다. 이것은 취향의 문제이다.&lt;/p&gt;
&lt;p&gt;코드1은 &amp;ldquo;~이 참이어야&amp;quot;라는 표현을 &lt;code&gt;!iBool&lt;/code&gt;는 부정 연산자를 이용한 if 문에서 실현하고 있다. 그러나 이처럼 &lt;code&gt;iBool&lt;/code&gt;을 판단하여 결과를 참일 경우와 거짓일 경우의 두 가지로 분기시키고 싶은 경우는 else부분을 사용하는 방법이 있다. else 부분은 if 문과 한 세트로 사용되는 것으로, if에서 판단한 조건식이 거짓인 경우에 실행된다. else 부분을 이용한 if 문은 다음과 같이 기술한다.&lt;/p&gt;
&lt;h3 id=&#34;else-부분이-있는-if-문&#34;&gt;else 부분이 있는 if 문&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;조건식&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;문장&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;문&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if 문 조건식이 참이면 문장1이 실행되고 그렇지 않으면 else 키워드 다음 문장2가 실행된다. else 전에 반드시 if가 필요하며, if 문이 없는 곳에서 else 부분을 지정할 수 없다. else 부분이 있는 if 문을 사용하면 코드1을 다음과 같이 개선할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0 또는 다른 값을 입력하십시오. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;참이 입력되었습니다. &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;거짓이 입력되었습니다. &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 코드1을 더 최적화된 방식으로 개량한 것이다. 이와 같이 else 부분을 이용하면 iBool가 가짜인지 여부를 확인할 필요가 없기 때문에 쓸데없는 처리를 생략할 수 있다. else 부분은 if 문 평가가 거짓인 경우에 실행된다. 물론 참이면 else 부분은 실행되지 않는다.&lt;/p&gt;
&lt;p&gt;또한 if와 else는 다음과 같이 중첩(같은 형의 상자 등을 크기 순으로 몇개 겹쳐 중으로 들어갈 수 있게 한 것. 프로그래밍에는 동일한 명령을 거듭하는 것을 중첩이라고 함)할 수 있다. 이것은 &amp;ldquo;~하면 ~한다. 그렇지 않으면 ~한다. 그렇지 않으면 ~ 한다 &amp;hellip;&amp;ldquo;라는 프로그램의 흐름을 만들 수 있도록 되고, 복잡한 제어 및 분석을 할 경우에 일반적으로 사용되는 있다. 다만, 중첩 관계는 가능한 적게하고, 읽기 쉬운 프로그램을 쓸 수 있도록 해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Do you like C language? Y/N&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Y&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Good! Just go for it!!&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Why are you studying C language?&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Error&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3은 프로그램에 &amp;ldquo;당신은 C 언어가 좋아?&amp;ldquo;라고 질문하고 Y(Yes) 또는 N(No)를 입력하고 질문에 대답하는 일반적인 명령 줄의 대화를 상정한 것이다. 프로그램은 입력된 값을 확인하고, &amp;ldquo;Y가 입력 된 경우&amp;rdquo;, &amp;ldquo;N이 입력 된 경우&amp;rdquo;, &amp;ldquo;그 이외의 값이 입력 된 경우&amp;quot;의 3가지 패턴으로 분기시킬 수 있다.&lt;/p&gt;
&lt;p&gt;프로그램에서는 첫번째 if 문에서 입력된 문자를 저장하는 chVar 변수를 확인하고, &amp;lsquo;Y&amp;rsquo;또는 &amp;lsquo;y&amp;rsquo;중 하나가 입력되어 있는지 여부를 조사하고 있다. 이 판단의 결과가 거짓이면 else가 실행되지만, 이 if 문 else에는 또한 if 문을 이용하고 있기 때문에 중첩 구조로 되어 있다.&lt;/p&gt;
&lt;h2 id=&#34;복합-문블록&#34;&gt;복합 문(블록)&lt;/h2&gt;
&lt;p&gt;지금까지의 프로그램에서는 if와 else 부분에 의해 프로그램을 분기시킬 수 있었지만, 실행할 수 있는 것은 1개의 문장만 이었다. 이것으로는 if 문으로 여러 문장을 지정할 수 없다. 예를 들어, 다음과 같은 프로그램은 잘못된 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar = %d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if 문에서 지정한 조건 exp가 참이면 &lt;code&gt;iVar += 50&lt;/code&gt;는 if 문으로 실행되지만 &lt;code&gt;printf()&lt;/code&gt;의 시점에서 원래의 제어에 돌아간다. 따라서 else는 직전의 if 문이 존재하지 않는 것으로 판단되는 컴파일 오류가 발생하게된다. if에서 여러 문장을 한꺼번에 실행시키고 싶은 경우, 복합 문(블록라고도 함)를 사용해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;복합문&#34;&gt;복합문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  문장1
  문장2
  문장N...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;복합 문은 &lt;code&gt;{&lt;/code&gt;로 시작해서 &lt;code&gt;}&lt;/code&gt;으로 끝난다. 문장을 작성할 수 있는 장소라면 어디든지 쓸 수 있다. {} 내부는 여러 문장으로 구성되어, 어떤 문장의 본체로서 기능할 수 있다. 예를 들어, 함수의 본체는 복합 문이라고 생각할 수 있다. C 언어는 문장의 끝에 세미콜론;을 지정하는 것이 보통이지만, 복합 문장의 끝에;를 붙이지 않는다. 또한, 복합 문은 중첩될 수 있다.&lt;/p&gt;
&lt;p&gt;무언의 규칙으로는 복합 문의 내부는 들여 쓰기를 1단계 깊게하는 규칙이 있다. 이것은 C의 구문이 아니기 때문에, 따르지 않아도 컴파일할 수 있지만, 매우 읽기 어려운 소스가되어 버린다. 만약 다음과 같은 프로그램 소스를 작성했다면, 당신 이외에 읽어주는 사람은 없다고 생각해도 좋을 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;공동 개발과 오픈 소스 개발을 생각해서. 초반부터 올바른 소스 작성을 습관화하자. 통합 개발 환경의 프로그래밍 전용 편집기에서 자동으로 변경해 주기도 하지만, 간단한 텍스트 편집기를 사용하는 경우는 의식 할 필요가 있다. 다음과 같이 기술하면 쉽게 읽을 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 기술하게 것으로, 문장이 어떤 복합 문에 속해 있는지를 판단하기 쉬워진다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0 또는 다른 값을 입력하십시오. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iBool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;참이 입력되었습니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;거짓이 입력되었습니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 참 또는 거짓을 나타내는 숫자를 입력하고, 그 결과에 따라 시스템에 반환 값을 변화시키고 있다. 중첩된 복합 문장의 내부에서 함수를 종료시킬 수 있기 때문에, if와 else에서 지정하고 있는 복합 문 내부에서 프로그램을 종료한다.&lt;/p&gt;
&lt;p&gt;코드4의 if-else 문 처리는 printf() 함수와 return 키워드를 이용한 2개의 문장으로 구성되어 있기 때문에 하나의 문장으로 표현할 수 없다. 그래서 복합 문을 사용하여 여러 문장을 지정하고 있다. return이 반환 값이 어떻게 이용되는지는 시스템에 따라 다르다. 자세한 내용은 당신이 사용하고 있는 시스템에 대한 자세한 내용 공부하도록 한다. 시스템에 반환 값의 그 후는 C 언어의 관할이 아닌 것이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | switch문</title>
      <link>https://www.devkuma.com/docs/c/switch%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/switch%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;하나의 값에서 대응하는 복수의 코드 중에 하나를 선택하여 실행 switch 문을 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;다중-분기-판단&#34;&gt;다중 분기 판단&lt;/h2&gt;
&lt;p&gt;어떤 값의 상황에 따라 프로그램의 흐름을 변경하려면 if 문을 이용하여 해결할 수 있다. 분기의 수가 많은 경우는 if 문을 중첩된 if else if else &amp;hellip;.라는 구조를 만들어서 구현할 수 있지만, 이것이 너무 많으면 if 문은 그다지 적합하지 않다.&lt;/p&gt;
&lt;p&gt;예를 들어, 프로그램에 의미있는 수치를 메시지로 전달하고, 프로그램은 받은 값을 분석하고 적절한 처리를 실시하는 시스템을 실현하려면 메시지의 수는 엄청날 수 있다. 그래서 이런 프로그램을 실현하려면 switch 문을 사용하는 방법이 최적이라고 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;switch문&#34;&gt;switch문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;switch (표현식) {
case 상수:
  블록문
default:
 디폴트 블록문
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;switch 문은 지정된 표현식을 판단해서 case에 지정된 상수와 일치하는 블록 문에서 실행을 시작한다. case는 복수 지정할 수 있으며 상수가 중복되어서는 안된다. default는 모든 case와 일치하지 않은 경우에 실행하는 특수 라벨이다. case에 상수만 지정할 수 있고, 변수는 지정할 수 없기 때문에 주의하도록 하자.&lt;/p&gt;
&lt;p&gt;그런데 switch 문은 case와 default 뒤에 콜론:을 붙이는 이상한 구문을 가지고 있는데, 이것은 라벨 정의라는 구문에서, 그 직후 문장에 이름을 붙이기 위한 것이다. 라벨에 대한 자세한 내용은 goto 문으로 설명하겠지만, case와 default도 라벨의 일종이다.&lt;/p&gt;
&lt;p&gt;라벨의 개념에 따라, 보다 정확한 switch 문의 성질을 해설하는 것이라면, 이것은 분기보다는 점프에 가까운 제어문이라고 생각된다. switch는 표현식을 판단하여 그 결과와 동일한 상수의 case 라벨을 가진 문장까지 이동한다. switch를 if 문 같은 분기문이라고 생각하고 사용하면, 아래 문장까지 실행(fall through)되는 현상으로 인해 버그가 될 수 있다. 다음과 같은 switch 문을 생각해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;case 0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;case 1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 switch 문을 실행하면 어떻게 될까? 식의 판단 부분에는 0이라는 상수를 지정한다. 이것은 case 0: 라벨과 일치하기 때문에 &lt;code&gt;printf(&amp;quot;case 0&amp;quot;);&lt;/code&gt;가 실행된다는 것까지는 이해할 수 있는데, 생각치도 못하게 프로그램은 &lt;code&gt;printf(&amp;quot;case 1&amp;quot;);&lt;/code&gt;와 &lt;code&gt;printf(&amp;quot;default&amp;quot;);&lt;/code&gt;까지도 수행하고 마는 것이다. 이와 같이, 하단의 case와 default도 실행해 버리는 switch의 성질을 일반적으로 폴스루(Fall-through)라고 하는데, 이 결과에서 switch 문의 case는 if-else와는 달리, 단순한 문장의 라벨이 있는 것을 확인할 수 있다. switch 문은 표현식과 일치하는 case 라벨의 문장으로 점프할 뿐이다라는 개념을 이해하면, 어째서 그 후(다른 case와 default 다음)의 문장까지 실행되어 버리는지 납득할 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;그런데 대부분의 경우 아래 문장까지 실행되는 것은 바람직하지 않다. 가능하다면 목적의 case 라벨의 문장을 실행한 후의 switch를 벗어나 싶을 것이다. 여기에는 몇 가지 방법이 있지만, 가장 일반적인 것은 break 문을 사용하는 것이다. break는 이를 포함하는 가장 안쪽의 제어를 빠져 나오는 역할로써, switch와 루프를 벗어나기 위해 사용되는 키워드이다. 다음과 같이 기술하면, 특정 라벨을 실행한 후 빠져 나오게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;case 0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;case 1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;덧붙여서, case도 default도 선택적이며, 지정 위치는 임의이다. 일반적으로 default는 그 특성상, 하단 (마지막)로 지정되어 있지만, case 라벨이 default를 걸쳐도 문제는 없다. default가 생략된 상태에서 일치하는 case가 없으면 아무것도하지 않고 switch 문을 빠져 나온다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;당신은, 귀여운 고양이를 만났다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0=머리를 쓰다듬는다, 1=꼬리를 만진다, 2=손가락을 내민다 &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;반기는 듯하다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;고양이가 싫어한다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;손가가락의 냄새를 맡고 있다. 본능 같다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;올바른 선택 번호를 입력하세요.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 간단한 분기 프로그램이다. 프로그램을 실행하면 문장이 표시되고 어떻게 행동 할 것인지를 선택하는 입력이 요구된다. 그 후에 프로그램은 입력된 값을 switch 문으로 판단하여 각 case문에에 분기한다. 적절한 문장을 표시시킨 후, 프로그램을 종료한다.&lt;/p&gt;
&lt;p&gt;case에서 지정할 수 것은 상수이었지만, ASCII 코드는 1바이트의 수치로 표현할 수 있으므로, 1개의 문자 상수를 case로 지정할 수도 있다. 문자 상수를 지정하는 경우는 &lt;code&gt;case &#39;A&#39;:&lt;/code&gt; 와 같이 기술한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;당신은, 귀여운 고양이를 만났다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;A=머리를 쓰다듬는다, B=꼬리를 만진다, C=손가락을 내민다 &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chSelected&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;고양이가 싫어한다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;고양이가 싫어한다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;손가가락의 냄새를 맡고 있다. 본능 같다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;올바른 선택 번호를 입력하세요.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 코드1을 고쳐서 선택을 문자로 할 수 있도록 한 것이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | while문</title>
      <link>https://www.devkuma.com/docs/c/while%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/while%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;while 문은 조건이 참일 때, 지정한 코드를 반복한다. 여기에서는 while 문을 이용한 반복의 제어 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;루프-만들기&#34;&gt;루프 만들기&lt;/h2&gt;
&lt;p&gt;프로그램 제어에서 분기와 마찬가지로 매우 중요한 존재가 반복 처리이다. 복잡한 계산이나 검색 등, 실전 프로그램에서 여러번 사용되므로 확실히 기본을 익힐 필요가 있다. 반복 처리는 특정 문장을 지정한 조건이 충족될 때까지 반복하여 수행한다. 이를 수행하는 가장 간단한 방법은 while 문을 이용한 방법이다.&lt;/p&gt;
&lt;p&gt;while은 if 문에 유사한 구문으로, 조건식이 참이면 지정된 문장을 반복하는 것이다. 반대로 말하면 while은 조건식의 판단 결과가 거짓이 즉, 0이 될 때까지 문장을 반복한다.&lt;/p&gt;
&lt;h3 id=&#34;while-문&#34;&gt;while 문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;while(조건식) 문장
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;조건식이 거짓이 될 때까지 문장이 실행되므로, 일반적으로 while 문장에서 조건식에 영향을 주는 변수 등을 조작하여 카운터의 역할을 갖게 한다. 카운터가 되는 변수를 사용하여, 문장 반복 횟수와 현재 몇 번째 반복인지를 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드 1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iCount;
 printf(&amp;#34;반복 횟수를 입력하십시오. &amp;gt;&amp;#34;);
 scanf(&amp;#34;%d&amp;#34; , &amp;amp;iCount);

  while(iCount &amp;gt; 0) {
   printf(&amp;#34;카운터 = %d\n&amp;#34; , iCount);
   iCount--;
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드1을 실행하면 반복 횟수를 요구하고 숫자를 입력하면, while은 입력된 값을 저장한 iCount을 확인하여 이것이 0이상이면 문장을 반복한다. while의 본체 문장에서는 카운터 값을 표시한 다음에 카운터 값을 감소시키고 있다. 이것을 반복하다 보면 카운터는 언젠가 0이 되고, 그러고 루프를 빠져 나온다.&lt;/p&gt;
&lt;p&gt;무한 루프가 되어 버린 경우는 프로그램을 종료시키는 수단이 없다. 도중에 강제로 루프에서 벗어나려면, while 확인하고 있는 조건식이 거짓이 되도록 카운터를 조작하거나, break 문을 사용하여 while에서 강제로 나갈 수 있다. break 문은 제어를 벗어나 기능이 있기 때문에, 현재의 루프에서 벗어날 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iCount = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 의도적으로 while의 조건식을 1(true)하여 무한 루프로 돌도록 하고, while을 빠져 수단으로 break 문을 사용하고 있다. iCount 변수의 값을 반복할 때마다 증가하고 이것이 1000에 도달하면 빠져 있다.&lt;/p&gt;
&lt;p&gt;증가 처리는 &lt;code&gt;printf(&amp;quot;iCount = %d\n&amp;quot; , iCount++);&lt;/code&gt;에서 수행하고 있다. 초보자에게는 별로 익숙하지 않은 작성법이기 때문에 조금 설명하겠다. 이것은 두 줄로 나누어 다음과 같이 쓸 수도 있지만, 이 프로그램에서는 굳이 printf() 함수의 인수로 증가하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iCount = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 써서 문제는 없지만, 필자는 해설서 등에서 긴 소스 프로그램을 보면 피곤하므로, 불필요한 처리 및 중복 부분은 없애려고 노력하고 있다. 따라서 위의 두줄을 한줄로 정리하는 방법으로, printf() 함수의 인수로 지정하고 있는 iCount를 잘 살펴보면, printf()에서 사용된 후에 증가되도록 후위 증가 연산자를 사용했다. 후위 증가 연산자는 변수를 사용한 후에 증가하는 특징이 있었다는 것을 기억하도록 하자.&lt;/p&gt;
&lt;p&gt;덧붙여서, while와 같은 반복 제어는 중첩해도 문제는 없다. 실용적인 프로그램은 복잡한 알고리즘과 그래픽 처리 등에서 비번히 중첩된 반복 제어를 수행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;expr1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;expr2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이러한 중첩된 반복 처리는 응용 프로그램 개발은 결코 드문 일이 아니다. 예를 들어, 2차원의 정보에 대한 계산을 할 때, 반복 처리를 중첩하여 순서대로 계산하는 방법을 사용하고 있다. 이것은 2차원 컴퓨터 그래픽에 대한 전반적인 처리를 할 때 등에 응용할 수 있을 것이다. 다음 프로그램은 구구단 표를 만들어 화면에 표시한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iOp1 = 1 , iOp2 = 1;

  while (iOp1 &amp;lt; 10) {
   while(iOp2 &amp;lt; 10) {
      printf(&amp;#34;%2d &amp;#34; , iOp1 * iOp2);
     iOp2++;
   }
   printf(&amp;#34;\n&amp;#34;);
    iOp2 = 1;
   iOp1++;
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드3을 실행하면 구구단 표가 출력된다.&lt;/p&gt;
&lt;p&gt;덧붙이자면, printf() 함수의 형식 제어으로 &lt;code&gt;%2d&lt;/code&gt;라는 표현이 있는데, 이 2라는 숫자는 문자 폭을 지정하고 있다. 이 경우는 &lt;code&gt;%d&lt;/code&gt;를 지정했을 때와 동일하게 정수 값을 표시하지만, 문자 폭을 지정하고 있기 때문에, 최소 2문자의 폭을 사용하여 숫자를 표시한다. 1자리의 경우는 2문자에 못 미치기 때문에 공백으로 채워진다. 이것은 단순히 구구단 표를 아름답게 표시하기 위해 사용했을뿐, 그다지 중요하지 않다.&lt;/p&gt;
&lt;h2 id=&#34;루프의-맨-위로-돌아가기&#34;&gt;루프의 맨 위로 돌아가기&lt;/h2&gt;
&lt;p&gt;어떠한 사정으로 반복 처리의 복합 문장의 내부에서 처리를 중단하고, 다음 반복으로 넘어가고 싶은 경우가 있다. 즉, 현재의 반복은 그 시점에서 종료하고, while 문의 처음으로 돌아 표현식을 판단하고자 하는 상황이다.&lt;/p&gt;
&lt;p&gt;이를 실현하려면 continue 문을 사용한다. 이것을 사용하면 문장의 나머지 처리를 수행하지 않고 루프의 선두로 돌아올 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iCount = 0;

 while(iCount++ &amp;lt; 100) {
   if (iCount % 2) continue;
   printf(&amp;#34;%d &amp;#34; , iCount);
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 화면에 짝수만 표시한다. 카운터 변수인 iCount를 2로 나눈 나머지가 0이 아닌 경우, 이는 즉 홀수인 경우라고 생각할 수 있으며 &lt;code&gt;iCount % 2&lt;/code&gt;을 구하고, 이것이 참이라면 continue 문을 사용하여 나머지 처리는 무시한다. 그 결과 printf()가 실행되는 것은 iCount가 짝수인 경우만 이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | do~while문</title>
      <link>https://www.devkuma.com/docs/c/do~while%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/do~while%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;문장을 반복 여부의 판단을 반복할 문장을 실행한 후에 실시하는 do 문장에 대해 설명한다. do 문은 while 문과는 다르게 조건에 관계없이 반드시 1번은 문장을 실행한다.&lt;/p&gt;
&lt;h2 id=&#34;지연-판단형의-반복-처리&#34;&gt;지연 판단형의 반복 처리&lt;/h2&gt;
&lt;p&gt;while는 반복할 문장을 실행하기 전에, 조건식을 판단하여 반복 처리를 계속할지 여부를 결정한다. 그러나 이와는 반대로 문장을 실행한 후에 조건식을 판단하는 do 문장이라는 것도 있다.&lt;/p&gt;
&lt;h3 id=&#34;do-문&#34;&gt;do 문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;do 문장 while (조건식);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;반복 처리의 대상이 되는 문장을 먼저 실행하는 것을 제외하고는 while 문과 기본적으로 동일하다. while 문은 식을 판단하고 루프를 실행하기 때문에, 최초에 판단이 거짓이면 문장을 한번도 실행하지 않고 그냥 지나쳐 버린다. 비록 판단을 해서 어떤 결과이든 최소한 한번은 실행될 경우에 do 문은 위력을 발휘된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;반복 횟수를 입력하십시오. &amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;scanf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d번째 루프입니다.&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 첫번째 반복할 횟수를 입력하고 지정된 값을 바탕으로 do 문으로 문장으로 반복한다. 하지만 while 문과 크게 다른 점은 &lt;code&gt;iCount &amp;lt;= iMax&lt;/code&gt;가 성립하지 않고(거짓이라고 해도) 반드시 한번은 문을 실행하는 것이다. 입력된 값이 음수나 0이었다해도, do는 반드시 문장을 한 번 실행한다. 이 식의 판단이 문을 실행한 후에 이루어지고 있기 때문이다.&lt;/p&gt;
&lt;p&gt;그러나 상당히 특별한 경우가 아닌 한 do 문장을 사용하지 않는다. 필자의 경험으로는 수만 행에 이르는 애플리케이션 시스템을 설계했을 때도 적극적인 사용 의사가 없으면 do 문장을 사용하는 필요에 직면한 적은 없었다. 하지만 다른 사람이 작성한 소스를 읽을 때에 do 문장이 나오는 것은 충분히 생각할 수 있으며, 알고리즘에 따라 do 문을 사용하는 것이 스마트하게 쓸 수 있다는 경우도 있기 때문에 기억할 둘 필요가 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | for문</title>
      <link>https://www.devkuma.com/docs/c/for%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/for%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;for 문에 대해 설명한다. for 문은 반복 횟수를 계산하기 위한 변수의 초기화나 증가를 구문으로 작성할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;카운터-제어-루프&#34;&gt;카운터 제어 루프&lt;/h2&gt;
&lt;p&gt;기본적으로 반복 처리는 while 문만 알고 있다면 충분히 사용할 수 있지만, 대부분의 프로그래머는 앞으로 소개하는 for 문을 많이 사용하고 있다. for 문은 조건식 외에 카운터 변수의 초기화 및 계산 처리를 관리해주는 편리한 제어문이다.&lt;/p&gt;
&lt;h3 id=&#34;for-문&#34;&gt;for 문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for (초기화 식; 조건식; 루프 식) 문장
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;조건식이 참이면 문장을 반복한다는 점에서는 while과 같다. 초기화 식은 for 루프가 시작되기 전에 한번만 계산되는 식으로, 보통은 루프 제어를 이용하기 위한 카운터 변수 등을 초기화하는데 사용한다. 루프 식은 문장을 반복할 때마다 계산되는 식으로 카운터 변수를 증가하거나 감소하는데 사용된다. 이것은 다음의 while 문을 이용한 프로그램과 동일하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;초기화 식;
while (조건식) {
  문장;
  루프 식;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;대부분의 경우 while 문에서 반복 처리하는 때에 루프 제어를 위해 카운터를 이용한 위와 같은 구조이다. for 문은 이러한 구조를 완전한 구문으로 규정하고 있기에 대부분의 프로그래머는 적극적으로 for 문을 이용하고 있다.&lt;/p&gt;
&lt;p&gt;또한 for 문은 초기화 식, 조건식, 루프 식 모두 생략할 수 있다. 조건식을 생략하면 항상 참으로 해석되기 때문에 무한 루프이다. 이 경우 break 문을 사용하여 빠져 나올 수 있는 대책이 필요하다. 다만 생략하는 경우는 세미콜론;을 생략할 수 없다. 예를 들어, 모든 식을 생략하는 for 문은 &lt;code&gt;for (;;) {...&lt;/code&gt;와 같이 기술해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iMax , iCount;
  printf(&amp;#34;반복 횟수를 입력하십시오. &amp;gt;&amp;#34;);

 for(scanf(&amp;#34;%d&amp;#34; , &amp;amp;iMax) , iCount = 0 ; iCount &amp;lt; iMax ; iCount++)
    printf(&amp;#34;%d번째 반복입니다.\n&amp;#34; , iCount);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드1은 입력된 횟수만큼 for 문을 이용하여 표시 처리를 반복하는 간단한 프로그램이다. 그러나 이 프로그램은 조금 짓궂은 소스 부분이 있다. 그것은 for 문의 초기화 식의 부분에 &lt;code&gt;scanf ( &amp;quot;%d&amp;quot;, &amp;amp;iMax), iCount = 0&lt;/code&gt;이다. 이 문장에는 쉼표가 2개 있지만, 사실은 이것들은 같은 쉼표로 C 언어 구문에 다른 성질을 가지고 있다. 즉, 이질적인 기능을 가지고 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanf ( &amp;quot;%d&amp;quot;, &amp;amp;iMax), iCount = 0&lt;/code&gt;이라는 식의 두 쉼표의 차이에 대한 질문에 제대로 대답할 수있는 프로그래머는 그렇게 많지 않다. 사실 쉼표는 단순한 구분으로서 이용하는 경우와 수식 연산자로 사용할 수 있다. &lt;code&gt;scanf(&amp;quot;%d&amp;quot;, &amp;amp;iMax)&lt;/code&gt;라는 문장안에 있는 쉼표 연산자가 아니다. 이것은 구분 기호이다.&lt;/p&gt;
&lt;p&gt;이에 대해서 식에서 사용된 경우는 순차적으로 수행하는 콤마 연산자로써 기능을 한다. 이 쉼표의 사용법은 매우 희소하다. 콤마로 분리된 수식은 반드시 왼쪽에서 오른쪽으로 수행된다. 순차적으로 콤마 연산자의 연산 결과는 오른쪽 피연산자와 같은 값과 형식을 갖는다. 피연산자는 모든 타입을 지정할 수 피연산자 간의 형식 변환되지 않는다.&lt;/p&gt;
&lt;p&gt;for 문의 초기화 식이나 루프 식으로 여러 수식을 수행하려면 코드1과 같이 순차적으로 콤마 연산자를 이용하여 여러 식을 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;그러나 일반론으로서 순차적인 콤마 연산자를 적극적으로 사용하는 것은 피해야 한다고 생각한다. 서로 밀접하게 관련 구문이거나, 여러 줄의 계산을 어떻게 해서든 하나의 문장으로 서술해야 하는 경우라면 사용해도 좋다. 예를 들어, 두 변수의 내용을 교환하는 프로그램을 만드는 경우 등에 이용하는 것도 적당하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iVar1 = 100 , iVar2 = 200;
  iVar2 ^= iVar1 , iVar1 ^= iVar2 , iVar2 ^= iVar1;
 printf(&amp;#34;iVar1 = %d : iVar2 = %d\n&amp;#34; , iVar1 , iVar2);

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 변수 iVar1과 iVar2의 값을 교환하여, 그 결과를 표시하는 것이다. 값의 교환 알고리즘은 순차적으로 콤마 연산자를 사용하여 하나의 식으로 표현하고 있다. 그런데 이 프로그램에서도 조금 심술 궂은 소스가 있다. 일반적으로 변수 값의 교환은 임시 저장용 변수를 정의하고 다음과 같이 이루어지는 것이 일반적이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iTmp = iVar1 , iVar1 = iVar2 , iVar2 = iTmp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러나 코드 2에서는 배타적 논리합의 성질을 잘 이용하고, 임시 저장용 변수를 준비하지 않고 교환을 실시하고 있다. 주제에서 벗어나는데 이렇게 연구함으로써 프로그램의 요구에 적합한 처리를 실현할 수 있을 거에요.&lt;/p&gt;
&lt;p&gt;그러나 코드2는 배타적 논리합의 성질을 잘 이용하여, 임시 저장을 위한 변수를 제공하지 않고 교환을 수행하고 있다. 본론에서 벗어났지만, 이렇게 연구하여 프로그램의 요구에 적합한 처리를 실현할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;이야기를 본론으로 되돌아와서, 코드2와 같이 순차적인 콤마 연산자를 사용하여 하나의 문장으로 여러 식을 계산시킬 수 있었다. 하지만 역시 먼저 말한대로 순차적으로 콤마 연산자를 적극적으로 사용하는 것은 피해야하며, 이 경우에도 하나의 문장으로 표현하는 것에 의미는 없다. 오히려 다음과 같이 기술하는 것이 일반적이다&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iVar2 ^= iVar1 ; iVar1 ^= iVar2 ; iVar2 ^= iVar1;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 하나의 표현이 아니라 세미콜론으로 3개의 문장으로 나누어져 있다 만, 이것으로 문제가 발생하지 않는다. 오히려 이 작성법이 일반적이기 때문에 많은 프로그래머에게는 이쪽이 더 읽기 쉽다고 느낄것이다.&lt;/p&gt;
&lt;p&gt;for 문도 while과 마찬가지로 중첩될 수 있다. 물론 break 문이나 continue 문을 사용할 수도 있다. 복잡한 계산이나 처리에는 반드시라고 할 정도로 반복 처리가 필요하기 때문에 for 문이나 while 문 사용법은 확실히 마스터한다. 다음 프로그램은 while 문으로 만든 구구단 표를 for 문으로 만든 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iOp1 , iOp2;

  for(iOp1 = 1 ; iOp1 &amp;lt; 10 ; iOp1++) {
    for(iOp2 = 1 ; iOp2 &amp;lt; 10 ; iOp2++) {
      printf(&amp;#34;%2d &amp;#34; , iOp1 * iOp2);
   }
   printf(&amp;#34;\n&amp;#34;);
  }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;while을 사용하는 경우에 비해, 적은 소스 줄이 스마트해진 것을 느껴졌을 거라고 생각한다. while의 경우는 복합한 문장의 내부에서 증가 및 초기화 등의 작업을 수행해야 했지만, for를 사용하면 이들을 초기화 식이나 루프 식으로 구성할 수 있다. 많은 프로그래머들이 적극적으로 for를 사용하는 이유를 이제 알았다고 생각된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | goto문</title>
      <link>https://www.devkuma.com/docs/c/goto%EB%AC%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/goto%EB%AC%B8/</guid>
      <description>
        
        
        &lt;p&gt;지정한 문장에 무조건 점프하는 goto 문장을 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;무조건-점프&#34;&gt;무조건 점프&lt;/h2&gt;
&lt;p&gt;지금까지의 분기와 반복은 어떤 조건을 지정하여 제어를 실시했지만, 무조건 지정한 위치에 프로그램을 이동시킬 수 있다. 무조건 점프를 할 때에는 goto 문을 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;goto-문&#34;&gt;goto 문&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;goto 레벨;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;라벨(label)에는 점프하는 문장이 있는 라벨을 지정한다. 라벨은 &amp;ldquo;switch 문&amp;quot;에서 조금 소개 했었는데, 쉽게 말하면 문장에 붙이는 식별자와 같은 것이다. 문장에 라벨을 붙이면 goto 문으로 그 자리로 이동할 수 있다. 레벨은 다음과 같이 지정한다.&lt;/p&gt;
&lt;h3 id=&#34;라벨-선언&#34;&gt;라벨 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;라벨 : 문장
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면 문장에 라벨을 지정할 수 있다. 라벨에 사용되는 이름은 변수 등의 명명 규칙과 동일하다. 문장에 라벨을 붙이면, goto 문을 사용하여 자유롭게 프로그램의 흐름을 변경할 수 있다. 다만 goto 문은 동일한 함수 내에 있지 않으면 이동할 수 없다. 다른 함수의 문장에 바로 이동할 수 없기 때문에 주의하자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iCount = 0;

LOOP:
  printf(&amp;#34;카운터 = %d\n&amp;#34; , iCount);
 iCount++;
 if (iCount &amp;lt; 10) goto LOOP;

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 반복 처리를 goto 문으로 재현한 것이다. iCount 변수가 10 이하이면 goto 문을 사용하여 LOOP 레이블로 돌아가고, 그렇지 않으면 프로그램을 종료한다.&lt;/p&gt;
&lt;p&gt;그러나 for 문이나 while 문을 사용할 수 있는 곳에서는 어김없이 for 문이나 while 문을 사용하여 반복 처리를 실시해야 하며, goto 문을 사용해서는 안된다. 대부분의 경우 goto 문을 사용하지 않아도, if 나 for 문 같은 제어문에서 충분히 원하는 처리을 수행할 수 있다. goto 문을 남용하는 경우 프로그램의 흐름을 파악할 수 없으며 유지 보수가 어렵 기 때문에 goto 문은 원칙적으로 사용해서는 안된다.&lt;/p&gt;
&lt;p&gt;goto 문을 사용하는 곳이라고 생각되는 곳은, goto 문을 사용하여 프로그램을 스마트하게 기술할 수 있는 특별한 알고리즘을 작성하는 경우이거나, 여러 단계로 중첩된 제어문에서 벗어날 같은 경우이다. 예를 들어 for 문을 중첩된 프로그램이 중간에 처리를 끝내고 싶은 경우, break 문을 사용하여 한단계의 제어만 벗어날뿐 모든 제어를 벗어날 수 없다. 그래서 goto 문을 사용하여 벗어날 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for(;;) {
  for(;;) {
   ...
   if(error) goto ERROR;
 }
}
ERROR:  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이와 같이 중첩된 반복 처리의 내부에서 오류가 발생하는 등의 이유로 최상위 제어로 전환하고자 하는 경우, goto 문을 사용하여 강제로 나갈라고 하는 수단으로 효과적이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 흐름 제어 | 조건 연산자</title>
      <link>https://www.devkuma.com/docs/c/%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90/</guid>
      <description>
        
        
        &lt;p&gt;조건의 결과에 따라 판단하는 식을 선택하는 조건 연산자에 대해 설명한다. if 문에 의한 제어와 달리, 조건 연산자는 조건에 따라 어떤 식을 선택할지에 대해 판단한다.&lt;/p&gt;
&lt;h2 id=&#34;3항-연산자&#34;&gt;3항 연산자&lt;/h2&gt;
&lt;p&gt;C 언어 연산자의 대부분은 하나의 피연산자를 받는 단항 연산자 또는 두 개의 피연산자를 받는 2항 연산자이며, 3개의 피연산자를 받는 3항 연산자가 존재한다. 그것은 조건 연산자 &amp;ldquo;? :&amp;ldquo;이다.&lt;/p&gt;
&lt;p&gt;조건 연산자는 if 문과 매우 유사한 동작을 하나의 식으로 실현시킬 수 있다. 따라서 소규모 분기 처리에 적합하다. 예를 들어, 어떤 값 n이 0이 아니라면, 변수 z에 x를 대입하고, 그렇지 않으면 z에 y를 대입한다라는 식으로 분기에 적합하다. 조건 연산자는 다음과 같이 설명한다.&lt;/p&gt;
&lt;h3 id=&#34;조건-연산자&#34;&gt;조건 연산자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;조건식? 수식1 : 수식2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;조건식에는 판단하는 식을 지정한다. 여기에서 지정한 조건식이 참이면 수식1이 선택되고, 이 연산자의 결과는 그 값이 되고, 그렇지 않으면 수식2가 선택되어 그 값이 결과로 반환된다. 변수 z에 대입하는 값을 조건에 의해 분기시키고 싶은 경우는 다음과 같이 될 것이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;z = n ? x : y;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 수식에서 n이 참이면 z에 x를 대입하고, 그렇지 않으면 z에 y를 대입한다는 것을 나타낸다. 이를 if 문을 사용하여 작성할 수 있지만, if-else를 이용한 경우에는 이보다 스마트하게 기술할 수 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iVariable;
  printf(&amp;#34;Please input a number 0 or some else&amp;gt;&amp;#34;);
  scanf(&amp;#34;%d&amp;#34; , &amp;amp;iVariable);
 printf(&amp;#34;An input value is %s.\n&amp;#34; , iVariable ? &amp;#34;True&amp;#34; : &amp;#34;False&amp;#34;);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 사용자로부터 0 또는 다른 값을 입력받아 그 값을 확인한다. 입력된 값이 참, 또는 거짓에 의해 printf() 함수가 표시하는 문자가 변화하는 프로그램이다. printf() 함수에 자세히 보도록 하자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iVariable ? &amp;quot;True&amp;quot; : &amp;quot;False&amp;quot;&lt;/code&gt;라는 식은 iVariable을 확인하여 이것이 참이라면 &amp;ldquo;True&amp;quot;를, 그렇지 않으면 &amp;ldquo;Flase&amp;quot;을 돌려준다. printf() 함수의 첫번째 파라미터에는 문자열을 받을 서식 제어 문자 %s를 지정하여 이를 표시하고 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수</title>
      <link>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;함수(function)란  &amp;ldquo;기능&amp;quot;을 뜻한다. 즉, 기능을 구현하는 부분을 따로 떼어 구현하는 것으로, 구조화 프로그램의 중요한 개념이라 하겠다. 여기서는 함수 작성법 및 호출 방법에 대해서 설명하겠다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수 | 함수 만들기</title>
      <link>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>
        
        
        &lt;p&gt;반복되는 처리는 함수로서 부품화할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;특정-처리를-함수에-정리한다&#34;&gt;특정 처리를 함수에 정리한다&lt;/h2&gt;
&lt;p&gt;지금까지 프로그램은 main() 함수에 작성해 왔다. 처음에 설명했듯이 main() 함수는 프로그램이 실행될 때에 최초에 호출되는 애플리케이션 진입점을 나타내는 특수한 함수이다. 우리는 필요한 경우 main() 이외의 함수를 만들 수 있다. 지금까지는 표준 함수로 정해져 있는 printf()와 scanf() 등의 함수를 사용하여 왔는데, 이러한 일부 기능을 정리한 함수를 직접 만들 수 있는 것이다.&lt;/p&gt;
&lt;p&gt;프로그램에서 여러번 사용되는 처리 함수로 정리하여, 동일한 코드를 여러번 작성하는 번거로움에서 해방되어 프로그램 전체에 정합성을 갖게 할 수 있다. 이는 응용 프로그램의 설계에 있어서 매우 중요한 것이다. 처음에 약간 설명했지만, 함수를 정의하려면 다음과 같이 설명한다.&lt;/p&gt;
&lt;h3 id=&#34;함수의-정의&#34;&gt;함수의 정의&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;반환자료형 함수명 (매개 변수 목록) {
  문장
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기본적인 작성법은 main() 함수와 동일하다. 함수명은 변수와 동일하게 C 언어의 명명 규칙을 따르고 있으면 자유롭게 지정할 수 있다. 함수의 기능을 나타내어 알기 쉽게 의미있는 이름으로하는 것이 바람직하다. 반환 값과 매개 변수 목록은 &amp;ldquo;파라미터와 반환 값&amp;quot;에서 자세히 설명하겠지만, 이것들을 이용하면 함수간에 데이터를 교환할 수 있다. 이 장에서는 우선 함수는 다음과 같이 정의한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void 함수명() { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 함수는 값을 받지 않고 값을 돌려주지 않는 것을 나타낸다. 반환 값의 자료형으로 지정하는 void는 함수가 값을 반환하지 않는 것을 의미한다. 값을 반환하지 않는 함수는 return 키워드 값을 반환할 수 없다. 함수를 호출할 때는 printf()와 같은 표준 함수처럼 호출할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;함수명();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;한번 만든 함수는 여러번 호출할 수 있기 때문에, 프로그램의 재사용이 가능하다. 다음의 프로그램은 새로운 함수 Function()를 정의하고 main() 함수에서 이것을 호출하여 사용하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function() 함수는 printf() 함수를 호출하여 화면에 문자를 표시하는 간단한 처리를 수행한다. main() 함수에서 Function() 함수를 두번 호출한다. 그 결과, 화면에는 &amp;ldquo;Kitty on your lap&amp;quot;이라는 문자가 두 줄에 걸쳐 표시된다. 그러나 함수는 사용되는 함수보다 먼저 기술해야 합니다. 코드1을 보고 알 수 있듯이, Function() 함수는 이를 호출하는 main() 함수보다 이전에 정의되어 있다.&lt;/p&gt;
&lt;p&gt;왜 함수가 사용되기 이전의 위치로 지정해야 하냐면, 함수를 발견하기 전에 함수를 호출하면 컴파일러는 기본적으로 int 형의 반환 값을 가진 인수를 받지 않는 함수로 인식한다. 따라서 기본 형식이 아닌 함수를 정의보다 이전에 호출하고, 형의 불일치로 컴파일 에러가 되어 발생한다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음 프로그램은 Function1()는 문제없이 호출할 수 있지만 Function2()는 오류이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Function2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/*형식 불일치 오류*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function1()는 반환 값이 int 형으로 매개 변수가 없는 함수이므로 정의가 호출보다 뒤에 있어도 호출과 같은 형태이므로 문제없이 호출할 수 있지만, Function2()는 반환 값이 void 형이므로 그 이전 호출과 형태가 다르다. 컴파일러는 함수를 다시 선언으로 간주하고, 형태가 다르기 때문에 오류를 발생시키는 것이다.&lt;/p&gt;
&lt;p&gt;코드1의 흐름을 따르면, 먼저 main() 함수가 실행되고 Function() 함수가 호출된다. 함수가 호출되면 프로그램은 그 함수에 제어를 이동시킨다. 코드1의 경우 Function() 함수의 본체에 제어가 이동하게 된다. Function() 함수의 처리가 완료되면, 프로그램은 함수를 호출한 원래 위치에 제어를 리턴한다. 이 경우는 main() 함수로 돌아 오게 된다.&lt;/p&gt;
&lt;h3 id=&#34;그림1---함수의-호출과-복귀&#34;&gt;그림1 - 함수의 호출과 복귀&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/call_function.png&#34; alt=&#34;함수의 호출과 복귀&#34;&gt;&lt;/p&gt;
&lt;p&gt;함수를 호출하면 함수의 처리가 완료되면 제어가 함수를 호출한 원래의 위치로 돌아오기 때문에 프로그램의 흐름은 결국 main() 함수로 돌아간다.&lt;/p&gt;
&lt;p&gt;void 형의 반환 값을 갖는 함수는 값을 돌려 줄 필요가 없기 때문에 return 문을 생략할 수 있다. main() 함수는 int 형의 종료 코드를 시스템에 반환해야 하므로 return 문을 사용하여 값을 반환하지만 Function() 함수는 return 문을 사용하지 않는다. 그러나 다음과 같이 명시적으로 return 문을 사용하여 함수를 종료 할 수 있다. 그러나 값은 반환시키지 않기 때문에 식을 지정할 수는 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function() {
  printf(&amp;#34;Kitty on your lap\n&amp;#34;);
 return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;특정 위치에서 함수를 끝내고 싶다면, return 문을 사용하여 제어를 반환할 수 있다.&lt;/p&gt;
&lt;p&gt;함수는 몇겹씩 호출할 수 있다. &lt;code&gt;main()&lt;/code&gt; 함수가 &lt;code&gt;Function1()&lt;/code&gt; 함수를 호출하는, &lt;code&gt;Function1()&lt;/code&gt; 함수가 &lt;code&gt;Function2()&lt;/code&gt; 함수를 호출하는&amp;hellip;라는 듯 함수에서 다른 함수를 몇겹으로 불러냈다고 해도 함수는 자신을 불러낸 장소에 제어를 되돌리는 성질이 있으므로 반드시 최고 수준의 제어, 즉 main()함수로 돌아갑니다.&lt;/p&gt;
&lt;p&gt;함수는 몇번이나 겹쳐서 호출할 수 있다. &lt;code&gt;main()&lt;/code&gt; 함수가 &lt;code&gt;Function1()&lt;/code&gt; 함수를 호출하고, &lt;code&gt;Function1()&lt;/code&gt; 함수가 &lt;code&gt;Function2()&lt;/code&gt; 함수를 호출 &amp;hellip;&amp;hellip; 등등 함수에서 다른 함수를 여러번 호출해도 함수는 자신을 호출한 곳으로 제어를 되돌리는 성질이 있으므로 반드시 최상위 제어, 즉 &lt;code&gt;main()&lt;/code&gt; 함수로 복귀한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Function2() : return&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Function1() : Call Function2()&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Function2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Function1() : return&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;main() : Call Function1()&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;main() : return&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 Function1() 함수에서 Function2() 함수를 호출한다. 이 프로그램은 제어의 흐름을 시각적으로 확인할 수 있도록 하기 위해, 각 함수는 자신의 함수명과 처리를 화면에 표시한다.&lt;/p&gt;
&lt;p&gt;프로그램은 먼저 main() 함수에서 Function1() 함수를 호출하여 Function1() 함수는 Function2() 함수를 호출한다. Function2() 함수는 즉시 제어를 반환하기 때문에 Function1() 함수에 제어가 돌아간다. 그리고 Function1() 함수를 종료하고, 마지막으로 main() 함수에 복귀하고 있는 것을 확인할 수 있다. 표시된 결과를 보면 프로그램이 어떤 순서로 실행되고 있는지 이해할 수 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수 | 파라미터와 반환 값</title>
      <link>https://www.devkuma.com/docs/c/%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%99%80-%EB%B0%98%ED%99%98-%EA%B0%92/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%99%80-%EB%B0%98%ED%99%98-%EA%B0%92/</guid>
      <description>
        
        
        &lt;p&gt;함수는 호출한 곳에서 처리에 이용하기 위한 값을 받거나, 처리 결과가 되는 값을 호출자에게 되돌려 받을 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;함수에-값을-전달하기&#34;&gt;함수에 값을 전달하기&lt;/h2&gt;
&lt;p&gt;그동안 일부의 표준 함수를 사용하였다. 그 모든 것은 반드시 괄호 () 안에 값을 지정할 수 있었다. 예를 들어 printf() 함수에는 문자열을 화면에 표시하는데 문자열 상수를 () 안에 지정했다.&lt;/p&gt;
&lt;p&gt;이처럼 함수에 어떤 정보를 전달할 수 있다. 이렇게 하면 동적으로 데이터를 처리할 수 있는 실용적인 함수를 구현이 가능하게 될 것이다.&lt;/p&gt;
&lt;p&gt;함수에 전달되는 정보를 인수라고 한다. 인수의 형태는 임의로 지정할 수 있다. 인수를 호출하는 곳에서 받으려면 전달된 값을 저장하는 변수가 필요하다. 인수 목록으로 인수를 받기 위한 변수를 매개 변수라고 한다. 간단하게 말하면 함수를 호출하는 측이 함수에 전달 값을 인수라고 하고, 함수 본문이 어떤 데이터를 받기 위하여 미리 확보하는 변수를 매개 변수라고 부르는 것이다.&lt;/p&gt;
&lt;p&gt;인수를 받으려면 함수 정의의 괄호 () 안에 받을 값의 형태와 식별자를 지정한다. 여러 매개 변수를 지정하려면 쉼표로 구분한다. 예를 들어 다음 함수는 int 값과 float 형의 값을 받는 함수이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function( int iValue , float fValue) { ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;당연히, 이 함수를 호출할 때는 매개 변수에 지정된 정보를 전달해야 한다. 이 함수를 호출하려면, 예를 들어 &lt;code&gt;Function(10, 0.5F)&lt;/code&gt;와 같이 파라미터 형과 호환되는 식을 인수로 지정해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void Function(int iValue , float fValue) {
 printf(&amp;#34;iValue = %d : fValue = %g\n&amp;#34; , iValue , fValue);
}

int main() {
  Function(10 , 3.14F);
 Function(100 , 1000);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드 1에서 주목하고 원하는 Function(100 , 1000)라는행입니다. 여기서는 float형의 파라미터에 대해서 1000이라는 int형식 인수를 주고 있습니다.통상, 틀에 호환성 없는 인수를 줄 경우 함수는 값을 받을 수 없기 때문에 에러가 되지만, 대입 변환과 마찬가지로 인수에 값 대입 호출이라도 묵적 형 변환이 기능합니다.&lt;/p&gt;
&lt;p&gt;코드1에서 주목해야 하는 것은 &lt;code&gt;Function (100, 1000)&lt;/code&gt;라는 행이다. 여기에서는 float 형의 파라미터에 1000이라는 int 형의 인수를 전달하고 있다. 일반적으로 형식에 호환되지 않는 인수를 전달하면 함수는 값을 받을 수 없기 때문에 오류가 발생하지만, 대입 변환과 같은 인수에 값이 전달되도 암묵적인 형변환이 된다.&lt;/p&gt;
&lt;p&gt;iValue과 fValue 같은 매개 변수는 매개 변수를 선언하고 함수 내에서만 사용할 수 있다. main() 함수에서 iValue과 fValue을 사용할 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;함수의-결과-반환하기&#34;&gt;함수의 결과 반환하기&lt;/h2&gt;
&lt;p&gt;함수는 호출하는 곳에 함수의 결과를 알리기 위해 값을 반환할 수 있다. 이것을 반환 값이라고 한다. 함수가 주어진 수치를 바탕으로 어떤 계산을 실시하는 경우, 반환 값으로 결과를 반환할 수 있으며, 함수가 어떤 기능을 제공하는 경우, 성공 또는 실패 등의 정보를 반환할 수 있다.&lt;/p&gt;
&lt;p&gt;함수는 호출하는 곳에 반환 값을 얻어도 어떤 변수 등에 저장할 수 있으며, 반환 값을 무시할 수도 있다. 반환 값을 무시하면 함수가 반환한 값이 저장되지 않고 파기된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int Triangle(int iBase , int iHeight) {
 return iBase * iHeight / 2;
}

int main() {
  int iBase , iHeight , iArea;
  printf(&amp;#34;삼각형의 밑변과 높이를 입력하십시오. &amp;gt;&amp;#34;);
 scanf(&amp;#34;%d %d&amp;#34; , &amp;amp;iBase , &amp;amp;iHeight);

 iArea = Triangle(iBase , iHeight);
  printf(&amp;#34;삼각형의 면적 = %d\n&amp;#34; , iArea);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램 Triangle() 함수는 삼각형의 밑변 iBase와 높이 iHeight을 받아서 넓이를 반환하는 기능을 제공한다. 따라서, 어떤 기능이나 계산을 함수로 정리하면 함수를 호출하면 몇 번이라도 그 기능을 다시 사용할 수 있게 될 것이다.&lt;/p&gt;
&lt;p&gt;코드2는 iBase과 iHeight라는 식별자의 int 형 변수가 Triangle() 함수와 main() 함수의 두 곳에서 정의되어 있다. 동일한 함수 내에서 식별자가 충돌한 경우 컴파일 오류가 발생하지만, 이 경우는 함수가 다르기 때문에 문제가 없다. Triangle()의 파라미터인 iBase와 main()의 iBase는 이름이 같지만 전혀 다른 변수이다.&lt;/p&gt;
&lt;p&gt;C에서 함수의 반환 값은 생략할 수 있다. C++ 언어로 컴파일하면 오류가 발생한다. C 언어에서 형태가 생략된 경우는 기본적으로 int 형으로 해석한다. 따라서 반환 방법을 생략하는 경우는 int 형의 반환 값을 가진 것으로 인식된다. 그러나 반환 값을 생략한 오해를 낳을거 같이 이해하기 어려운 작성은 권장되지 않는다. 함수의 목적을 확실히 하기 위해서라도 반환 값은 명확하게 기술해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Function()&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 main() 함수에서 Function() 함수를 호출한다. 이 시점에서 함수는 아직 정의되어 있지 않기 때문에, 컴파일러는 기본 함수 int Function()라는 형태로 이 함수를 인식한다. 이후에 Function() 함수가 반환 값을 생략하여 정의되어 있다. 이 함수는 반환 값을 생략하고 있기 때문에, 반환 값은 기본 int로서 인식된다. 기본 함수와 같은 형태이므로 프로그램은 성공적으로 컴파일된다.&lt;/p&gt;
&lt;p&gt;다시 말하지만, 현재에는 형의 생략은 권장되지 않는다. 이는 오래된 문법과의 호환성을 위해 남아있는 것이다. 새로 작성한 코드라면 형식은 명시적으로 기술해야 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수 | 함수의 선언</title>
      <link>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98%EC%9D%98-%EC%84%A0%EC%96%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%95%A8%EC%88%98%EC%9D%98-%EC%84%A0%EC%96%B8/</guid>
      <description>
        
        
        &lt;p&gt;함수 선언은 함수의 본체(정의)가 포함되지 않은 함수 이름과 매개 변수 목록 및 반환 값만을 선언하고 지정된 함수의 존재를 컴파일러에게 알려준다. 사전에 함수를 선언하여 함수의 정의 위치에 관계없이 함수를 호출할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;함수-선언자&#34;&gt;함수 선언자&lt;/h2&gt;
&lt;p&gt;기본 형식 이외의 함수를 호출하려면 함수를 그 이전에 정의해야 했다. 하나 둘 정도의 함수는 그다시 상관 없을지도 모른다. 그러나 실제 프로그램은 수십, 수백 개의 함수를 처리한다. 예를 들어 Microsoft Windows가 제공하는 함수는 1000개를 넘는다. 내부에서는 더 많은 함수가 정의되어 있는 것이다. 그것들을 모든 main() 함수보다 먼저 정의하고, 또한 함수에서 함수를 호출할 때의 관계를 파악하는 것은 불가능할 것이다.&lt;/p&gt;
&lt;p&gt;그래서 함수 선언자라는 것이 있다. 함수 선언자는 함수의 프로토타입 선언이라고도 하고, 반환 함수 이름, 매개 변수 목록만을 제공한다. 함수 선언자는 C 언어가 발안된 당시에는 존재하지 않았다가 1989년에 표준화가 되었을 때에 추가된 사양이다.&lt;/p&gt;
&lt;p&gt;함수 선언자는 함수의 정의보다 앞에 선언하는 것으로, 컴파일러에 함수의 이름과 매개 변수 형식 및 반환 형식을 알려준다. 이 때, 본체는 정의하지 않는다.&lt;/p&gt;
&lt;h3 id=&#34;함수-선언자-1&#34;&gt;함수 선언자&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;반환형식 함수이름(매개 변수 목록);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이러한 함수 선언을 프로그램의 시작 부분으로 구성하므로써, 함수의 정의 위치를 신경 쓸 필요가 없다. 함수를 정의할 때는 물론 함수의 선언에 근거한 형태로 정의되어야 한다. 선언과 다른 형태로 정의하면, 형태의 불일치로 인해 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CharLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chMark&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iNum&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;CharLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;CharLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CharLoop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chMark&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iNum&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iNum&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chMark&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 문자 chMark을 iNum번만 반복 처리하여 표시하는 함수 CharLoop() 함수를 정의하고 있다. CharLoop() 함수는 main() 함수보다 뒤에 정의되어 있지만, main() 함수보다 앞에 CharLoop() 함수를 선언한다. 따라서 main() 함수에서 CharLoop()를 호출하고 있지만, 컴파일러는 이 시점에서 CharLoop() 함수의 매개 변수와 반환 형식을 인식하고 있기 때문에 문제는 없다.&lt;/p&gt;
&lt;p&gt;이 함수 선언자는 비교적 새로운 사양이다. 사실 사양이 제정되기 이전에는 반환 값의 데이터 형을 컴파일러에게 알리기 위해 함수 선언자가 사용되었다. 이전 함수 선언자는 매개 변수 목록에 형식 정보를 포함하지 않고, 오직 식별자(변수명)를 기술하였다. 그러나, 이런 식으로는 컴파일러가 함수에 전달되는 값의 형식을 확인할 수 없기 때문에 요즘에는 권장되지 않는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;예를 들어, 위의 코드는 이전 함수 선언자이다. 보면 알 수 있듯이, 이 함수 선언의 매개 변수 형식 정보가 포함되어 있지 않는다.&lt;/p&gt;
&lt;p&gt;이전 함수 선언자는 과거의 언어와의 호환성을 고려하여 일반적으로 현재의 컴파일러에도 구현되어 있다. 그러나 새로 프로그램 코드를 작성하는 경우는 항상 최신 사양을 유의하여 작성하여야 하며, 오늘날 오래된 함수 선언자를 이용하는 것은 넌센스이다. 모든 함수는 새로운 함수 선언자를 이용하여 함수를 선언해야 한다.&lt;/p&gt;
&lt;p&gt;그러나 오래된 함수 선언자의 존재를 모르는 경우, 뜻밖의 곳에서 문제가 발생한다. 예를 들어 다음과 같은 프로그램을 작성했다고 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 경우는 식별자를 생략한 형의 형태 정보를 포함하지 않는 이전 함수 선언자되어 버린다. 형태 정보를 명시 한다면, 그것은 새로운 함수 선언자로 인식되지만, 형태를 생략하는 기술은 이전 함수 선언자의 사양이다.&lt;/p&gt;
&lt;p&gt;따라서 새로운 사양에 따른 함수 선언자를 신경써서 작성을 한다고 해도, 이전의 함수 선언자를 작성하는 경우가 자주 발생한다. 이는 컴파일이 되기 때문에 의외로 알아채기 힘든 실수이다.&lt;/p&gt;
&lt;p&gt;매개 변수가 없는 함수를 선언에는 형 정보로 void를 지정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function (void);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 새로운 함수 선언자로 인식된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void Function(void);

int main() {
  Function();
 return 0;
}

void Function(void) {
 printf(&amp;#34;Kitty on your lap\n&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 새로운 함수 선언자를 사용하여 매개 변수가 없는 함수 선언하고 있다.&lt;/p&gt;
&lt;h2 id=&#34;식별자변수명의-생략&#34;&gt;식별자(변수명)의 생략&lt;/h2&gt;
&lt;p&gt;코드1의 함수 선언자 &lt;code&gt;void CharLoop(char chMark, int iNum);&lt;/code&gt;을 보면, 매개 변수는 형식뿐만 아니라 변수 이름도 지정하고 있다. 그러나 선언은 본체를 포함하지 않기 때문에 식별자(변수명)은 의미가 없다.&lt;/p&gt;
&lt;p&gt;그래서 함수 선언자에는 데이터형만을 지정하고, 식별자는 생략할 수 있다. 원래 새로운 함수 선언자의 목적은 컴파일러에 자료형을 전달하여 함수 호출시 오류 검출 및 인수의 대응 강화에 있다. 식별자 작성은 이전 함수 선언자에서 이어 받은 것이며, 정의가 없는 상태에서는 큰 의미가 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function (int, char, double);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어, 이 경우는 순서대로 int형, char형, double형의 인수를 받는 것을 나타낸다. 인수로 받는 매개 변수의 식별자는 함수의 정의로 지정하면 되는 것이다. 덧붙여서 식별자를 생략한 매개 변수와 식별자를 명확히 작성한 매개 변수를 동일한 함수 선언자에 포함할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function (int iValue char, double);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 함수 선언자는 첫번째 매개 변수 iValue만 식별자를 포함하여 선언하고 있지만, 그 이외의 파라미터는 식별자를 생략되어 있다. 이렇게 해도 문제는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void CharLoop(char chMark , int);

int main() {
  CharLoop(&amp;#39;*&amp;#39; , 30);
 printf(&amp;#34;\n---\n&amp;#34;);
  CharLoop(&amp;#39;*&amp;#39; , 40);
 printf(&amp;#34;\n&amp;#34;);
  return 0;
}

void CharLoop(char chMark , int iNum) {
 int iCount;
 for(iCount = 0 ; iCount &amp;lt; iNum ; iCount++) {
    printf(&amp;#34;%c&amp;#34; , chMark);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드3은 코드1을 개량하고 식별자를 기입한 경우와 생략한 경우의 조합으로 함수를 선언하고 있다. 함수 선언자의 식별자가 사용되는 것은 아니므로, 식별자를 지정하는 것은 다소 중복이 된다. 그래서 식별자는 생략하고 형식만 지정한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수 | 변수의 유효 범위</title>
      <link>https://www.devkuma.com/docs/c/%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8-%EB%B2%94%EC%9C%84/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8-%EB%B2%94%EC%9C%84/</guid>
      <description>
        
        
        &lt;p&gt;변수의 유효범위에 대해 설명한다. 변수의 범위는 선언된 함수 내에서만 유효한 자동 변수와 응용 프로그램이 실행되는 동안 항상 유효한 외부 변수에 따라 달라진다.&lt;/p&gt;
&lt;h2 id=&#34;자동-변수&#34;&gt;자동 변수&lt;/h2&gt;
&lt;p&gt;변수는 사용 가능한 범위 즉, 수명과 같은 것이 존재한다. 변수의 수명을 결정하는 것은 기억 클래스(Storage Class)라는 변수의 특성이다. 복합문의 내부에서 선언된 변수는 프로그램이 복합 문장에서 벗어날 때에 자동으로 해제되는 구조로 되어 있다. 이러한 변수를 자동 변수라고 한다 (또는, 그 국소성에서 로컬 변수라고도 한다).&lt;/p&gt;
&lt;p&gt;변수의 기억 클래스는 변수의 가시성이 생긴다. 변수의 가시성은 그 위치에서 변수에 액세스할 수 있는지하는 것이다. 예를 들어, 다음과 같은 프로그램은 오류가 발생한다. 이유는 main() 함수에서 iValue가 보이지 않기 때문이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void Function() {
 int iValue;
}
int main() {
  iValue = 10;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Function() 함수에서 분명히 iValue 변수를 선언하고 있지만, 이것은 자동 변수이므로 main() 함수에서 액세스할 수 없다. 자동 변수은 그것이 선언된 블록이 실행될 때 만들어고, 블록을 벗어날 때에 삭제된다. 즉, 변수가 선언된 블록 밖에서는 그 변수는 사용할 수 없다는 것이다.&lt;/p&gt;
&lt;p&gt;반대로 생각하면 다른 블록의 변수는 보이지 않기 때문에 다음과 같이 여러 블록에서 변수 이름이 중복되어도 프로그램은 문제 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;식별자는 항상 고유해야 하며 같은 이름이 있으면 오류가 발생한다. 위의 코드는 iValue 변수의 이름이 충돌될 거처럼 느껴지지만, Function() 함수 iValue는 main() 함수에서 보이지 않고, 마찬가지로 main() 함수의 iValue는 Function() 함수에서 보이지 않기 때문에 문제가 없다. 이러한 자동 변수는 함수 블록 내에서만 유효하기 때문이다.&lt;/p&gt;
&lt;p&gt;여기에서 중요한 것은 변수의 수명은 함수 단위가 아닌 복합 문장의 블록이라는 것이다. C 언어 초보자중에는 &amp;ldquo;함수 내의 변수는 선언된 함수 내에서만 유효하다&amp;quot;고 기억하는 사람도 있지만, 그렇지 않고 &amp;ldquo;자동 변수가 선언된 블록 중간에서만 유효하다&amp;quot;고 표현하는 것이 옳다고 말할 수 있다. 이는 다음의 프로그램에서 이해할 수있을 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1st for : iCount = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2st for : iCount = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/*printf(&amp;#34;iCount = %d&amp;#34; , iCount); /*에러*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 main() 함수에서 두 개의 복합 문에 의한 블록을 형성하고 있다. 중요한 것은 두 블록 내부에서 같은 이름의 변수 iCount을 선언하고 있다. 그러나 이는 오류가 발생하지 않는다. 블록 안에서 선언 된 변수는 블록 밖에서는 보이지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;마지막에 printf() 함수의 주석을 풀어서 컴파일하면 오류가 발생한다. 이 점에서도 블록 밖에서는 블록의 내부 변수에 액세스할 수 없다는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;외부-변수&#34;&gt;외부 변수&lt;/h2&gt;
&lt;p&gt;변수는 반드시 복합문 내부에 선언해야 한다는 것은 아니다. 함수 외부에서 변수를 선언할 수 있다. 이와 같은 위치에서 선언을 &amp;lsquo;외부적&amp;rsquo;이라고 표현한다. 예를 들어, 함수 자신은 항상 외부적이다. 함수는 어떤 블록 내부에 배치되는 것이 아니라 어디서든 호출할 수 있는 광역적인 존재이기 때문이다.&lt;/p&gt;
&lt;p&gt;함수 밖에서 선언된 변수를 외부 변수라고 한다(또는, 그 광역성에서 전역 및 글로벌 변수라고 한다). 내부 변수와의 가장 큰 차이점은 모든 함수에서 액세스할 수 있으며, 수명이 영구적이라는 점이다. 외부 변수는 프로그램이 종료될 때까지 유효하다. 외부 변수는 프로그램 전체에서 공유하고 싶은 정보를 저장하는데 적합하다.&lt;/p&gt;
&lt;p&gt;이와 같이, 변수는 선언 위치에서 기억 클래스와 가시성에 영향을 준다. 함수의 외부에 있는 선언을 외부 레벨이라고 하고, 함수내의 선언을 내부 레벨이라고 표현한다. 이러한 차이에서 변수의 가시성 및 수명이 다르기 때문에 변수의 역할에 따라 구분하고 구분한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iValue = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 외부 변수 iValue를 선언하고 있다. 이 변수는 main() 함수에서도 Function() 함수에서 액세스 할 수 있다. 프로그램을 실행하면 main() 함수에서 iValue의 값을 변경하고, Function() 함수에서 iValue를 표시하고 있다. 이것으로 같은 변수를 조작하고 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;다만, 외부 변수는 어떤 함수에서도 자유롭게 값을 변경할 수 있기 때문에 대규모 프로그램이 되면 어디에서 어떤 함수가 어떤 값을 대입하는지 알수가 없게 되거나 버그와 보기 어려운 코드를 만들어 버리는 원인이 될 수 있다. 일반적으로 인수 또는 반환 값을 사용하여 함수간에 정보를 전달하여야 하며, 특별한 사유가 없다면 외부 변수는 최대한 피해야 한다.&lt;/p&gt;
&lt;p&gt;외부 변수와 자동 변수의 식별자가 충돌하면, 로컬 변수가 우선시 된다. 이 경우는 컴파일 오류가 발생하지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iValue = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iValue = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 외부 변수의 iValue 변수와 main() 함수 내에 iValue 변수, 그리고 블록의 iValue 변수 이렇게 3가지 변수가 선언되어 있다. 이들은 동일한 이름을 가지고 있지만, 선언 위치가 다르기 때문에, 기억 클래스가 다르다. 실행 결과에서 printf() 함수의 인수로 지정하고 있는 iValue 변수는 보다 가까운 로컬(내부) 변수가 우선되는 것을 확인할 수 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 함수 | 재귀 처리</title>
      <link>https://www.devkuma.com/docs/c/%EC%9E%AC%EA%B7%80-%EC%B2%98%EB%A6%AC/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EC%9E%AC%EA%B7%80-%EC%B2%98%EB%A6%AC/</guid>
      <description>
        
        
        &lt;p&gt;자기 자신을 호출하는 함수에 의한 재귀 처리에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;자신을-호출하는-함수&#34;&gt;자신을 호출하는 함수&lt;/h2&gt;
&lt;p&gt;어떤 함수에서 다른 함수를 호출하는 방법은 지금까지 설명하였다. 그런데, 함수 내에서 자기 자신을 호출하면 어떻게 될까. 이런 함수 내에서 자신을 호출하는 것을 재귀라고 한다. 예를 들어, 다음과 같은 함수를 생각해 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function() 함수는 자기자신을 함수 내에서 호출하고 있다. 이 경우는 영원히 자신을 호출하기 때문에 무한 루프에 빠지게 된다.&lt;/p&gt;
&lt;p&gt;재귀를 사용하여 특수한 루프를 만들 수 있다. 그러나 대부분의 것은 재귀를 사용하지 않아도 반복 문장에서 가능하다. 따라서 재귀를 사용하는 것은 극히 드문 경우이다. 왜냐하면 함수 호출은 반복 문장으로 만든 반복보다 느리기 때문이다. 재귀는 일부 알고리즘을 단순화하는데 사용될 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Count = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iMax&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 재귀 처리의 이용법을 이해하는 간단한 프로그램이다. 재귀 처리를 이용한 함수 Function()는 첫번째 인수에 카운터의 초기 값을 지정하고, 두번째 인수에 최대 값을 지정한다. Function() 함수는 iCount가 iMax이하이면, &lt;code&gt;Function(iCount + 1, iMax)&lt;/code&gt;과 같이 카운터를 증가시키고 자신을 호출한다.&lt;/p&gt;
&lt;p&gt;이것을 반복하는 것으로 iCount는 언젠가 iMax에 도달하고, Function() 함수는 차례 차례로 제어를 반환하여 최종적으로 호출한 곳까지 복귀하는 구조로 되어 있다. 이 밖에도 재귀를 이용한 기술로는 함수 A() 함수가 B()를 호출하고, 함수 B()가 함수 A()를 호출하는 상호 재귀라는 관계도 생각할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FunctionA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;FunctionB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FunctionB&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;FunctionA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;재귀를 실제 이용하는 사례는 많지 않지만, 트리 구조와 같은 데이터의 분석 및 검색 등에서 응용된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 배열</title>
      <link>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4/</guid>
      <description>
        
        
        &lt;p&gt;배열(array)은 번호(인덱스)와 번호에 대응하는 데이터들로 이루어진 자료 구조를 나타낸다. 여기서는 배열의 선언 및 사용법에 대해서 설명한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 배열 | 배열</title>
      <link>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4/</guid>
      <description>
        
        
        &lt;p&gt;배열을 이용함으로써 동일한 유형의 여러 값을 하나의 식별자 번호로 관리할 수 있다. 배열의 선언과 기본적인 사용법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;값의-열&#34;&gt;값의 열&lt;/h2&gt;
&lt;p&gt;어떤 정보를 일시적으로 저장하는 수단으로 프로그램은 변수를 사용할 수 있었다. 그러나 예를 들어 10가지의 정보를 저장하기 위해, 변수를 일부러 10개나 선언하는 것은 매우 귀찮은 일이며, 그들 모두를 관리하는 것은 큰 일인 것이다. 만약 수천, 수만의 값을 변수에 저장하고 싶은 경우에 모든 변수를 선언한다는 것은 어리석은 일이다. 따라서 특정 데이터의 집합이나 데이터의 열은 배열 형태로 정리하여 관리, 제어 할 수 있다.&lt;/p&gt;
&lt;p&gt;배열은 동일한 자료형의 같은 변수 이름으로 여러 저장 공간을 확보하는 것이다. 이러한 변수 목록의 수는 프로그래머가 자유롭게 지정할 수 있으며, 각각의 배열의 값을 요소라고 한다. 배열을 선언하기 위해서는 배열 선언자를 사용한다. 배열 선언자에서는 변수 이름과 요소의 수를 다음과 같이 지정한다.&lt;/p&gt;
&lt;p&gt;배열 선언자&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;변수명[요소 수]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;요소 수는 배열의 크기를 0이상의 정수 정수로 지정한다. 배열 선언자를 사용하여 선언된 변수는 지정된 요소 수대로 값을 저장하는 영역을 지속적으로 확보한다. 기차처럼 여러 차량이 연결되어 있는 상태를 생각하면 좋을 것이다. 다음은 가장 간단한 배열인 숫자 형식의 1차원 배열의 선언이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[2];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;요소 수를 지정하는 것을 제외하고 일반 변수 선언과 변함이 없다. 이 선언에서는 int 형의 iArray 배열 변수가 만들어지고, 그 배열은 &lt;code&gt;iArray[0]&lt;/code&gt;와  &lt;code&gt;iArray[1]&lt;/code&gt;이라는 영역을 가진다. &lt;code&gt;iArray[1]&lt;/code&gt;의 [1]는 요소 번호 지정을 인덱스라고 한다.&lt;/p&gt;
&lt;p&gt;C 언어에서는 첨자는 0번부터 시작한다. 선언할 때에 지정한 수는 개수이며, &lt;code&gt;int iArray[2]&lt;/code&gt;으로 작성되는 배열은 0번과 1번 이렇게 2개로 되는 것을 잊지 말자. 첨자는 반드시 괄호 []로 묶는다. 정의된 배열은 다음 그림1과 같은 연속적인 저장 공간을 가지고 있다.&lt;/p&gt;
&lt;h3 id=&#34;그림1---데이터의-열&#34;&gt;그림1 - 데이터의 열&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;iArray[0]&lt;/th&gt;
&lt;th&gt;iArray[1]&lt;/th&gt;
&lt;th&gt;iArray[2]&lt;/th&gt;
&lt;th&gt;iArray[n]&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;요소를 2개를 갖는 int 형 배열 변수는 int 형의 일반 변수 2개와 같은 크기이다. 배열은 첨자를 지정하여 개별 요소에 액세스할 수 있으므로 반복 등에서 일괄적으로 변수를 처리할 수 있다는 큰 장점이 있다. 첨자는 정수 상수뿐만 아니라 숫자 변수를 지정하는 것도 가능하다. 다만, 배열 선언자에 요소 수를 지정하는 경우에는 반드시 정수이어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d : %d : %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 3개의 숫자를 저장하는 수단으로 별도의 숫자 변수를 사용하는 것이 아니라, 배열을 사용하고 있다. 이 프로그램의 iArray 변수는 메모리에서 다음과 같은 구조로 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;그림2---코드1의-배열과-요소의-관계&#34;&gt;그림2 - 코드1의 배열과 요소의 관계&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;iArray[0]&lt;/th&gt;
&lt;th&gt;iArray[1]&lt;/th&gt;
&lt;th&gt;iArray[2]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iArray&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이와 같이 iArray 변수는 연속된 저장 공간을 가지고 있으며, 각 영역에 저장되어 있는 요소에 액세스 하려면 인덱스에 의한 번호로 지정하는 것이다. 코드1에서 &lt;code&gt;iArray[0]&lt;/code&gt;에 값 10을 &lt;code&gt;iArray[1]&lt;/code&gt;에 100을 &lt;code&gt;iArray[2]&lt;/code&gt;에 1000을 넣고 있다.&lt;/p&gt;
&lt;p&gt;첨자는 변수에 지정할 수 있기 때문에, 배열을 이용하여 대량의 데이터를 일괄적으로 처리할 수 있다. 대부분의 경우, 배열은 반복에 의해 효율적으로 처리된다.&lt;/p&gt;
&lt;p&gt;예를 들어 비트맵(bitmap)은 픽셀 단위로 색상 정보를 가지고 있으며, 이러한 정보를 별도의 변수로 나타낼 수 없다. 각 픽셀 정보를 배열로 관리하면 비트맵 전체에 반복 문장을 사용한 일괄 처리를 실현할 수 있다. 데이터베이스 및 음성 데이터에서도 같은 것을 말할 수 있다. 이러한 대량의 정보는 배열로 모와서 처리한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iArray[5] , iCount , iAnswer;
 for(iCount = 0 ; iCount &amp;lt; 5 ; iCount++) {
   printf(&amp;#34;iArray[%d] : 값을 입력하세요. &amp;gt;&amp;#34; , iCount);
    scanf(&amp;#34;%d&amp;#34; , &amp;amp;iArray[iCount]);
  }
 for(iCount = 0 , iAnswer = 0 ; iCount &amp;lt; 5 ; iCount++)
   iAnswer += iArray[iCount];

  printf(&amp;#34;iArray의 합계 = %d\n&amp;#34; , iAnswer);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 프로그램은 5개의 요소를 가진 iArray 배열 변수를 정의하고 이를 사용자의 입력으로 초기화하고,  iArray 배열의 각 요소를 iAnswer에 가산 대입하여 배열의 총 합계를 구한다. 그리고, iArray 변수의 합계을 표시한다. for 문을 사용하여 배열을 처리할 때에 &lt;code&gt; iArray[iCount]&lt;/code&gt;와 같이 변수에 첨자를 지정하고 있는 것에 주목한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 배열 | 문자열</title>
      <link>https://www.devkuma.com/docs/c/%EB%AC%B8%EC%9E%90%EC%97%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%AC%B8%EC%9E%90%EC%97%B4/</guid>
      <description>
        
        
        &lt;p&gt;변수로 문자열을 저장하는 방법을 설명한다. 문자열은 문자의 배열이며 char 형의 배열로 관리할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;문자열을-변수에-저장하기&#34;&gt;문자열을 변수에 저장하기&lt;/h2&gt;
&lt;p&gt;지금까지 변수에 저장된 정보는 문자, 정수, 부동 소수점 중 하나였다. 그러나 문자열을 저장하는 방법은 아직 설명하지 않았다. 사실 C 언어에는 문자열을 나타내는 전용 형태라는 것이 없다.&lt;/p&gt;
&lt;p&gt;그럼 문자열을 변수로 다루고 싶은 경우는 어떻게 해야 할까? 문자열은 연속된 문자 상수라고 생각할 수 있다. 즉, 복수 개의 연속된 ASCII 코드 값이다. &amp;ldquo;연속적인 값&amp;quot;이라는 것을 제어하기 위한 가장 좋은 방법은 이미 설명하였다. &amp;ldquo;배열&amp;quot;에서 설명한 배열 이야말로 문자열을 표현하는 수단이다.&lt;/p&gt;
&lt;p&gt;문자열 char 형의 배열로 저장할 수 있다. 그리고 표시할 때 한 글자씩 순서대로 표시하는 방법을 생각할 수 있을  것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;K&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1에서 char 형의 배열 chStr의 각 요소에 1문자씩 문자 상수를 대입하고 있다. 마지막으로 printf() 함수를 사용하여 대입한 문자를 역시 한 글자 씩 표시하고 있다. 물론 문자열은 표시되지만, 효율적인 방법이라고는 할 수 없다.&lt;/p&gt;
&lt;p&gt;먼저 문자를 표시하려면 문자의 수만큼 반복 처리할 필요가 있지만, 반드시 문자 수를 관리할 수 있는 것은 아니다. 그래서 문자열의 마지막은 항상 0으로 표시하도록 한다. 이러한 규칙을 있으면 문자수를 관리할 필요가 없어진다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;K&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 코드1을 개량하여 배열 변수의 끝은 0이라고 정하고, 그 규칙에 적응한 for 루프를 작성하고 있다.&lt;/p&gt;
&lt;p&gt;printf() 함수 같은 C 언어의 표준 함수는 바로 이와 같이 문자열의 끝은 0으로 끝나는 규칙을 정하고 있다. 따라서 &amp;ldquo;Kitty&amp;quot;라는 문자열 리터럴은 문자 배열로 생각하면 그 끝은 y 대신 0으로 끝나는 6 개의 요소로 구성된 배열로 간주한다. 문자열의 끝을 나타내는 이 0을 NULL 문자라고 한다.&lt;/p&gt;
&lt;p&gt;printf() 함수의 서식 제어 문자에 %s를 지정하면 문자 배열을 표시하는 것을 나타낸다. printf() 함수는 전달된 문자 배열을 조사해 NULL 문자가 나타날 때까지 배열을 순서대로 표시한다. 즉, 코드2와 같은 것을 해준다. 그리고 printf() 함수의 첫번째 인수로 지정하여 서식 제어 문자열도 또한 NULL로 끝나는 문자열로 취급되고 있는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;K&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s : %s&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램 printf() 함수에 주목한다. printf() 함수는 &amp;ldquo;Kitty&amp;quot;라는 문자열 리터럴과 chStr 배열 변수를 인수로 전달한다. 문자열 리터럴은 암묵적으로 그 끝이 NULL 문자이다. 그리고 chStr 명시적으로 chStr[6]에 0을 대입하고 있다. 이들은 NULL 문자로 끝나는 문자 배열로 printf() 함수에 의해 화면에 표시된다.&lt;/p&gt;
&lt;p&gt;그런데 printf() 함수에 chStr 배열 변수를 전달할 때에 인덱스를 사용하지 않고 변수 이름만을 지정하고 있다. 배열은 첨자를 지정하지 않고 변수명만을 지정했을 경우, 그 배열의 시작을 나타낸다. 다만, 보다 정확하게는 배열의 첫번째 메모리 주소를 나타내는 것이라도 할 수 있다. 이것에 대해서는 포인터를 설명할 때 자세히 설명한다. 배열과 포인터는 밀접한 관계를 가지고 있기 때문에 배열을 충분히 이해하기 위해서는 포인터의 이해가 필요하다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 배열 | 다차원 배열</title>
      <link>https://www.devkuma.com/docs/c/%EB%8B%A4%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%8B%A4%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4/</guid>
      <description>
        
        
        &lt;p&gt;테이블와 같은 행과 열로 이루어진 2차원 배열을 예로 여러 차원으로 구성된 다차원 배열을 선언하는 방법을 소개한다.&lt;/p&gt;
&lt;h2 id=&#34;다차원-정보&#34;&gt;다차원 정보&lt;/h2&gt;
&lt;p&gt;정보는 물리적인 기억 장치에는 일렬로 배치되어 있지만, 논리적(개념적)으로 항상 일렬이라고 할 수 없다. 예를 들어, 테이블와 같은 데이터를 관리하는 것을 생각해 보자. 정보는 일렬이 아니다. 테이블는 행과 열을 가지고 있다. 즉, 가로와 세로라는 2차원 정보가 배치되어 있는 것이다.&lt;/p&gt;
&lt;p&gt;이 경우에도 일반 배열로 관리할 수 없다. 이는 2차원 배열을 생성하여, 보다 직관적으로 테이블에 액세스할 수 있을 것이다. 배열의 요소가 배열인 배열을 다차원 배열이라고 한다. 다차원 배열은 다음과 같이 선언한다.&lt;/p&gt;
&lt;h3 id=&#34;다차원-배열의-선언&#34;&gt;다차원 배열의 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;형태 변수명[1차원 요소 수][2차원 요소 수] ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이와 같이, 다차원 배열의 선언에 []를 차수만 기술하고, 각 차원의 요소 수(크기)를 지정한다. 다차원 배열 변수에 액세스하는 방법은 1차원 배열과 마찬가지로, 각 차원의 인덱스를 지정하면 된다. 다차원 배열 인덱스 수식은 가장 왼쪽에서 오른쪽으로 접근된다.&lt;/p&gt;
&lt;p&gt;실제 세계에서 다차원 배열형의 정보가 많이 있다. 버스나 기차의 좌석 관리와 오셀로 게임과 장기 등의 테이블 게임의 비교적 큰 정보는 이처럼 어떤 식으로든 분류되기 때문에 논리적으로 분할된 정보를 처리하려면 다차원 배열를 사용하면 편리하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0,0 = %d : 0,1 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1,0 = %d : 1,1 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 각 차원이 두 가지 요소를 가진 2차원 배열을 정의하고 있다. 이 배열은 2 × 2 개의 요소, 즉 4개의 int 형 변수를 저장하는 영역을 메모리에 할당한다. 코드1을 보면 알 수 있듯이 확실히 iArray 배열 변수는 4개의 숫자를 저장하고있는 것을 확인할 수 있다. 이 프로그램의 iArray 배열 변수는 논리적으로 다음과 같은 구조로 되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;표1---iarray-배열의-내용&#34;&gt;표1 - iArray 배열의 내용&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;[][0]&lt;/th&gt;
&lt;th&gt;[][1]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[0][]&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1][]&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;다차원 배열은 그렇게 자주 사용되는 것은 아니다. 대부분의 정보 처리는 1차원 배열로 제공할 수 있다. 그러나 3차원 그래픽 등의 분야에서는 4차원 배열이 사용되는 경우도 있다. 차원 수가 많아지면 당연히 사용하는 메모리의 용량도 늘어나기 때문에 분별적인 범위에서 메모리를 사용하도록 한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 배열 | 배열 초기화</title>
      <link>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4-%EC%B4%88%EA%B8%B0%ED%99%94/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4-%EC%B4%88%EA%B8%B0%ED%99%94/</guid>
      <description>
        
        
        &lt;p&gt;정수형 등의 변수와 마찬가지로 배열도 선언과 동시에 개별 요소를 초기화할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;배열-변수의-초기화&#34;&gt;배열 변수의 초기화&lt;/h2&gt;
&lt;p&gt;일반 변수의 선언은 동시에 변수의 값을 초기화할 수 있었다. 배열도 이와 같이 선언시에 초기화할 수 있다. 배열처럼 간단한 형태(int 나 char 등)가 아닌 단순한 형태를 집합시킨 것 같은 기억 영역을 합성체라고 한다. 합성체를 초기화하려면 대괄호{}에서 초기 값의 목록을 지정한다. 이것은 다음과 같은 구문이다.&lt;/p&gt;
&lt;h3 id=&#34;배열-초기화&#34;&gt;배열 초기화&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;형태 변명명[요소 수] = {제1요소 값, 제2요소 값, 제3요소 값, ...};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;목록에서 지정하는 각 요소의 초기 값의 수는 배열의 요소 수를 초과해서는 안된다. 반대로, 초기값의 수가 배열의 크기보다도 적은 경우에는 나머지 요소가 0으로 초기화된다. 예를 들어, 다음은 int형 배열을 초기화 정의를 같이하고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[4] = { 10 , 100 , 1000 , 10000 };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 배열은 처음부터 10, 100, 1000, 10000이라는 값으로 초기화된다. 이와 같이, 배열의 각 요소의 값이 미리 결정되어 있다면 이니셜라이저를 사용하면 소스 코드를 간략해 진다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iArray[%d] = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 iArray 배열 변수를 선언과 동시에 초기화한다. for 문을 사용하여 이 배열의 값을 표시하고 있기 때문에, 프로그램을 실행하면 배열이 올바르게 초기화되었는지를 확인할 수있는 것이다.&lt;/p&gt;
&lt;p&gt;목록의 값이 배열에 초기 값으로 주어지고 있는 것을 알 수 있다. 물론 부동 소수점에서도 초기화 방법은 동일하다.&lt;/p&gt;
&lt;p&gt;char 형 배열을 문자열로 초기화하려면, 하나는 연속된 문자 상수로 초기화하는 방법이 있다. 이 때 C 언어의 문자열의 약속인 배열 끝에 NULL 문자의 제로하는 것을 잊어서는 안된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;K&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2의 배열 변수 chStr은 초기화 문자열을 저장하고 있다. 초기화 목록에는 문자열의 각 문자를 문자 상수로 지정하고, 그 마지막에는 정수 0을 지정한다. 예상대로, 이 프로그램을 실행하면 Kitty라는 문자가 화면에 표시된다.&lt;/p&gt;
&lt;p&gt;char 형의 배열 변수를 문자 배열로 초기화 할 경우 큰 따옴표로 묶어 초기화 할 수 있다. 리터럴 문자열 끝에 암시적으로 NULL 문자가 포함되어 있기 때문에, 그 만큼의 크기를 할당하는 것도 잊지 말자. 한국어와 같은 ASCII가 아닌 문자를 사용하면 문자 코드에 따라 다르지만 일반적으로 1문자가 2 바이트로 표현되므로 주의가 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3은 프로그램으로 코드2와 동일하다. chStr 초기화 연속된 문자 상수가 아니라 리터럴 문자열을 사용한다는 점에서 코드2와 다르다. 문자 배열의 char 형 배열 변수를 초기화하려면 이것이 가장 편리한 작성법이다.&lt;/p&gt;
&lt;h2 id=&#34;다차원-배열의-초기화&#34;&gt;다차원 배열의 초기화&lt;/h2&gt;
&lt;p&gt;다차원 배열의 초기화를 시도할 경우 1차원 배열의 초기화보다 다소 복잡하다. 다차원의 경우는 그 차원 수만 중괄호를 {} 지정하여 각 차원의 목록을 중첩하여 초기화할 수 있다. 예를 들어, 2차원 배열의 경우는 다음과 같이 초기화한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[2][2] = { {1 , 2} , { 3 , 4 } };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 경우, 첫번째 {는 iArray 초기화를 나타내며, 다음에 {는 iArray[0] 초기화 리스트라는 구조로 되어 있다. 즉, &lt;code&gt;{ 1, 2 }&lt;/code&gt;는 &lt;code&gt;iArray[0] [0]&lt;/code&gt;와 &lt;code&gt;iArray[0][1]&lt;/code&gt;을 초기화한다. 마찬가지로, 다음의 &lt;code&gt;{ 3, 4 }&lt;/code&gt;는 &lt;code&gt;iArray[1]&lt;/code&gt;을 초기화한다. 배열의 수보다 목록의 수가 적은 경우, 나머지는 0으로 초기화된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iCount1 , iCount2;
  int iArray[3][3] = {
    { 2 , 4 } ,
   { 8 , 16 , 32 }
 };

  for(iCount1 = 0 ; iCount1 &amp;lt; 3 ; iCount1++) {
    for(iCount2 = 0 ; iCount2 &amp;lt; 3 ; iCount2++) {
      printf(&amp;#34;iArray[%d][%d] = %d\n&amp;#34; ,
       iCount1 , iCount2 , iArray[iCount1][iCount2]);
    }
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;배열의 초기화에 주목한다. &lt;code&gt;{ 2, 4 }&lt;/code&gt;는 &lt;code&gt;iArray[0]&lt;/code&gt;을 초기화하고 있지만 &lt;code&gt;iArray[0][2]&lt;/code&gt;의 초기값이 존재하지 않기 때문에 &lt;code&gt;iArray[0][2]&lt;/code&gt;는 0으로 초기화되어 있다. 다음 줄의 &lt;code&gt;{ 8, 16, 32 }&lt;/code&gt;는 &lt;code&gt;iArray[1]&lt;/code&gt;을 초기화한다. 초기화는 여기서 종료하고 있기 때문에 &lt;code&gt;iArray[2]&lt;/code&gt; 초기화 리스트는 존재하지 않는다. 따라서 &lt;code&gt;iArray[2]&lt;/code&gt;는 모두 0으로 초기화되어 있다. 이것은 실행 결과를 보면 분명하다.&lt;/p&gt;
&lt;p&gt;코드4에서 나타낸 초기화 방법은 {}를 중첩하고 있지만, 다음과 같이 하나의 리스트로 초기화할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[2][2] = { 1 , 2 , 3 , 4 };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 경우, 배열의 처음부터 순서대로 목록의 값으로 초기화된다. 처음에는 &lt;code&gt;iArray[0]&lt;/code&gt;에서 초기화된 목록의 처음 두 요소가 사용된다. 즉, &lt;code&gt;iArray[0][0]&lt;/code&gt;이 1로, &lt;code&gt;iArray[0][1]&lt;/code&gt;가 2로 초기화되는 것이다. 그리고 다음의 요소에서 iArray[1]가 초기화되는 순서이다. 이 경우 역시 배열의 수보다 목록의 값이 적으면 나머지는 0으로 초기화된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드5&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iCount1 , iCount2;
  int iArray[3][3] = { 
   2 , 4 , 8 , 16 , 32 , 64 , 128 , 256
  };

  for(iCount1 = 0 ; iCount1 &amp;lt; 3 ; iCount1++) {
    for(iCount2 = 0 ; iCount2 &amp;lt; 3 ; iCount2++) {
      printf(&amp;#34;iArray[%d][%d] = %d\n&amp;#34; ,
       iCount1 , iCount2 , iArray[iCount1][iCount2]);
    }
 }
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;배열이 목록의 상위부터 순서대로 올바르게 초기화되는 것을 확인할 수 있다. 이니셜라이저으로 지정하는 값은 8개이고, 배열의 요소 수 9보다 적기 때문에 마지막 &lt;code&gt;iArray[2][2]&lt;/code&gt;는 0으로 초기화되어 있다. 이러한 다차원 배열의 초기화는 예를 들어 문자열 테이블을 배열로 제공할 때 등에 편리하다.&lt;/p&gt;
&lt;h3 id=&#34;코드6&#34;&gt;코드6&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitten&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Feline&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s : %s : %s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 다차원 배열에서 문자열 배열을 생성하고 있다. 문자열은 자체가 문자 배열이므로 문자열의 배열을 만들 수 있기에 자동으로 2차원 배열을 만들어야 하는 것이 된다.&lt;/p&gt;
&lt;h2 id=&#34;요소-수의-생략&#34;&gt;요소 수의 생략&lt;/h2&gt;
&lt;p&gt;초기화를 지정하는 배열의 경우, 컴파일러는 초기화 목록에서 배열처럼 그 수를 예상 할 수 있다. 따라서 0으로 초기화하는 여분의 요소를 보유하려는 경우를 제외하고 초기화를 지정하는 배열의 크기를 직접 지정하는 것은 중복으로 간주된다. 초기화 식에서 배열의 요소 수를 제한할 수 있는 경우, 배열의 선언에서 크기를 생략할 수 있다. 다만, 그 경우에도 []를 생략할 수 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[ ] = { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 문자열을 배열 변수에 초기화할 때 등에 유용할 것이다. 요소 수를 생략하면 잘못된 크기를 할당해 버리는 실수를 피할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;코드7&#34;&gt;코드7&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드7는 chStr 배열 변수의 요소 수를 생략한다. 컴파일러는 초기화 &amp;ldquo;Kitty on your lap&amp;quot;를 배열에 저장하는데 필요한 크기를 계산하여 최적의 요소 수를 지정해 준다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트</title>
      <link>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%8A%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%8A%B8/</guid>
      <description>
        
        
        &lt;p&gt;포인터(pointer)는 C 언어가 갖는 가장 강력한 힘이자 C 언어를 배우고자 하는 사람들이 넘어야 하는 가장 높은 벽 이기도 하다. 여기서는 기본 개념부터 차근히 설명해 보도록 하겠다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인터 | 포인터</title>
      <link>https://www.devkuma.com/docs/c/pointer/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/pointer/</guid>
      <description>
        
        
        &lt;p&gt;포인터의 기본 개념과 응용에 대해 코드를 사용하여 설명한다. 포인터는 주소 연산자에서 얻은 주소를 저장하고 간접 연산자를 사용하여 원래의 기억 영역에 액세스한다.&lt;/p&gt;
&lt;h2 id=&#34;메모리-참조&#34;&gt;메모리 참조&lt;/h2&gt;
&lt;p&gt;C 언어 초보자가 좌절하기 쉬운 난관 중 하나가 포인터라고 알려져 있다. 하지만 포인터를 이해하기 위해 수학적인 지식이 필요하지 않으며, 특별히 어려운 이론을 학습해야 하는 일도 없다. 원리만 이해하고 나면 포인터는 어려운 것이 아니다. 중요한 순서대로 조금씩 확실하게 이해 가도록 노력하는 것이다.&lt;/p&gt;
&lt;p&gt;그럼, 본문에 들어가겠다. 포인터는 메모리 영역의 위치를 가리키는 변수의 일종이다. 지금까지 우리는 변수를 사용해 왔다. 변수에 문자열을 사용할 수 있게 되었다. 포인터도 변수이다. 어려운 것은 없다.&lt;/p&gt;
&lt;p&gt;문제는 포인터에 무엇을 저장하는가 하는 것이다. 보통의 변수는 특정 메모리 영역에 어떤 값을 저장하기 위해 사용하고 왔지만, 포인터는 값의 저장을 위해 사용하는 것은 아니다. 포인터는 메모리 주소를 저장하는 변수이다.&lt;/p&gt;
&lt;p&gt;변수는 값을 메모리의 어딘가에 일시적으로 저장하는 것이다. 메모리는 1바이트 단위로 어드레스(주소)가 할당되어 있고, 컴퓨터는 이 주소를 사용하여 메모리에 저장되어 있는 값에 액세스한다. 실제로 순수 기계어에는 변수 따위는 존재하지 않고 값을 저장하고 검색하려면 주소를 사용하고 있다. 주소는 처음부터 순서대로 수치로 표현된다.&lt;/p&gt;
&lt;h3 id=&#34;그림1---메모리-구성&#34;&gt;그림1 - 메모리 구성&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/point_address.png&#34; alt=&#34;메모리 구성&#34;&gt;&lt;/p&gt;
&lt;p&gt;그림1은 메모리를 그림으로 쉽게 설명하고 있다. 메모리 값을 저장할 수 있다. 문자나 실수도 결국은 값(그림에서는 알기 쉽게 10진수로 표현하고 있지만, 사실은 2진수로 저장되어 있다)으로 기록되어 있는 것이다. 값이 어떤 형태로 저장되거나 컴퓨터 아키텍처에 따라 다르지만 메모리 주소는 바이트 단위로 할당 순서대로 단순 증가하고 있다. 메모리 주소가 몇 바이트로 표시되는 것인가 하는 문제도 컴퓨터에 따라 다르다.&lt;/p&gt;
&lt;p&gt;포인터는 메모리에 메모리 주소를 나타내는 값을 저장하여 특정 변수(메모리에 저장되어 있는 값)의 위치 정보를 교환하는 수단으로 사용되는 것이다. &amp;ldquo;메모리에 메모리 주소를 저장&amp;quot;이라는 개념이 까다롭지만, 이는 곧 나중에 C 언어으로 구현하고 확인해 보자.&lt;/p&gt;
&lt;p&gt;그럼 변수가 메모리의 어디에 저장되어 있는지를 실제로 살펴보자. 변수의 주소를 얻으려면 변수 이름 앞에 앰퍼샌드 &amp;ldquo;&amp;amp;&amp;ldquo;을 붙인다. 이는 주소 연산자라고 한다.&lt;/p&gt;
&lt;p&gt;C언어에서 변수 이름을 수식에 사용하면 그 변수의 내용(저장되어 있는 값)을 반환하지만 주소 연산자를 변수 앞에 지정된 경우 해당 변수의 메모리 주소를 반환한다. 주소 연산자는 scanf(&amp;quot;%d&amp;rdquo;, &amp;amp;iVariable)과 같이 scanf() 함수에서 이미 사용했던 적이 있다. 이 때 &amp;amp; 기호는 변수의 주소를 함수에 전달한다.&lt;/p&gt;
&lt;p&gt;주소 연산자 &amp;amp;는 논리 연산자 &amp;amp;와 다르기 때문에 주의하자. 단항 연산자 &amp;amp;가 사용된 경우는 주소 연산자이며, 2항 연산자 &amp;amp;가 이용되면 논리 연산자로 해석된다.&lt;/p&gt;
&lt;p&gt;주소의 표현은 처리계에 의존하는 문제이다. 기계어 수준에서 생각하면 주소는 정수형으로 표현되고 있지만, 구현에 의존하는 처리는 피하는 것이 좋다. 주소를 printf() 함수를 사용하여 표시하는 경우 %X와 같은 형식을 사용하여 표시할 수 있지만, 보다 확실하게 표시하려면 %p를 사용하여 처리계에 맞는 표현으로 출력한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;chVar : 내용 = %c, 주소 = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar : 내용 = %d, 주소 = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;각 변수의 내용은 변수를 초기화할 때 저장한 값이다. 이것은 변수가 가리키는 메모리에 저장되어 있던 정보이다. 이에 대해 주소는 이 변수를 나타내고 있는(즉, 이 값이 저장되어 있는) 메모리 주소이다. printf()의 인수에 주소 연산자 &amp;amp;를 사용하는 것에 주목한다.&lt;/p&gt;
&lt;p&gt;표시되는 실제 숫자는 실행하는 컴퓨터와 그 때의 메모리 상황에 따라 달라진다. 메모리 주소는 응용 프로그램을 실행했을 때 시스템이 할당한 때 결정되기 때문에 정적으로 고정할 수 없다. 요즘 대부분의 컴퓨터에서 메모리를 자유롭게 처리할 수 있는 권한이 있는 것은 기본 소프트웨어(운영 체제)뿐이다.&lt;/p&gt;
&lt;h2 id=&#34;주소-저장&#34;&gt;주소 저장&lt;/h2&gt;
&lt;p&gt;메모리 주소를 얻는 방법은 알았지만, 그것만으로는 아무것도 할 수 없다. 메모리 주소의 수치를 이용하는 것은 컴퓨터이며, 개발자와 이용자에게 메모리 주소는 그다지 의미가 없다.&lt;/p&gt;
&lt;p&gt;그래서 포인터가 필요하다. 포인터는 메모리 주소를 저장하는 것을 전문으로하는 특수한 변수이다. 포인터에 주소를 대입하여 포인터 변수는 직접 메모리 주소에 액세스할 수 있게 되는 것이다. 원격에서 변수의 내용을 조작하는 것 같은 이미지이다.&lt;/p&gt;
&lt;p&gt;포인터의 선언은 기본적으로 일반 변수와 동일하지만, 변수 이름 앞에 별표 &lt;code&gt;*&lt;/code&gt;를 붙입니다.&lt;/p&gt;
&lt;h3 id=&#34;포인터의-선언&#34;&gt;포인터의 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;형식 *변수명
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면 포인터 변수에 주소를 저장할 수 있다. 예를 들어 &lt;code&gt;int *iPo&lt;/code&gt; 선언한 경우 iPo 변수는 int 형 변수에 대한 포인터임을 나타낸다. 메모리 주소는 정수임을 설명했다. 포인터 변수는 주소 저장하기 위한 변수이며 실체로는 정수형인 것을 의미하고 있다.&lt;/p&gt;
&lt;p&gt;포인터 변수가 들어있는 주소를 따라 원래의 변수(주소가 가리키는 메모리의 값)을 얻기 위해서는 간접 연산자 &lt;code&gt;*&lt;/code&gt;를 사용한다. 이 포인터 변수 앞에 지정하여 포인터 변수에 포함된 주소 값을 검색할 수 있다. 간접 연산자 &lt;code&gt;*&lt;/code&gt;는 곱셈 연산자 &lt;code&gt;*&lt;/code&gt;는 다르므로 구별해야 한다. 간접 연산자는 단항 연산자이다.&lt;/p&gt;
&lt;p&gt;간접 연산자를 사용하여 포인터가 가리키는 메모리의 값을 취득하는 것을 간접 참조라고 한다.&lt;/p&gt;
&lt;h3 id=&#34;그림2---주소에서-간접-참조&#34;&gt;그림2 - 주소에서 간접 참조&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/c/point_refer.png&#34; alt=&#34;주소에서 간접 참조&#34;&gt;&lt;/p&gt;
&lt;p&gt;그림2는 포인터를 저장하는 주소를 사용하여 간접 참조를하는 상황을 나타낸다. 포인터도 변수의 일종이며 메모리의 어딘가에 정수 값으로 주소를 저장한다. 포인터는 이것을 사용하여 원래의 변수에 액세스하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iPo = %p : &amp;amp;iVar = %p : *iPo = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;iPo 변수는 int 형 변수에 대한 포인터이다. 포인터가 저장하고 있는 메모리 주소이며, iPo 변수의 내용을 printf() 함수로 표시하면 저장된 메모리 주소임을 알 수 있다. 이것은 &amp;amp; iVar와 같은 값인 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;포인터가 저장된 주소가 가리키는 메모리의 값을 얻으려면 간접 연산자 &lt;code&gt;*&lt;/code&gt;를 사용한다. printf() 함수의 마지막에  &lt;code&gt;*iPo&lt;/code&gt;을 지정하여 iPo 변수에 할당된 주소를 사용하여 간접 참조를 하고 있다. 이렇게 함으로써 iPo에 저장되어 있는 주소, 즉 iVar 값을 간접적으로 검색할 수 있다.&lt;/p&gt;
&lt;p&gt;간접 연산자를 이용하면 주소를 간접 참조 할뿐만 아니라, 포인터가 나타내는 주소 값을 간접 할당할 수 있다. 즉, 포인터를 통해 변수에 값을 할당한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 iPo 포인터 변수에 iVar int 형 변수의 주소를 할당한다. 그럼 &lt;code&gt;*iPo = 100;&lt;/code&gt;와 같이 포인터를 사용하여 iVar 간접 할당을 하고 있는 것이다. 그 결과 printf() 함수는 iVar 값은 100이 되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;이러한 간접 대입에 무슨 의미가 있는지 이해하기 어렵지도 모른다. 확실히 코드3을 보면 값은 직접 iVar 변수에 할당하면 되는 것만으로 포인터를 사용하는 의의를 느낄수 없다.&lt;/p&gt;
&lt;p&gt;포인터는 다른 함수끼리 자동 변수를 공유할 때 위력을 발휘한다. 함수 안에서 선언된 변수는 자동 변수가되고, 변수는 선언된 블록 내부에서만 사용할 수 있다. 함수의 인수로 전달할 수 있는 값의 복사이며, 다른 함수에서 자동 변수를 조작하는 방법은 없다.&lt;/p&gt;
&lt;p&gt;그래서 함수의 인수에 포인터를 전달한다. 그러면 다른 함수의 자동 변수를 원격 조작할 수 있다. 포인터를 전달하면 함수는 이를 간접 참조하여 다른 함수의 자동 변수에 값을 대입하는 것이 가능하게 되는 것이다. 따라서 함수 포인터를 전달 간접적으로 정보에 액세스하는 방법을 참조로 전달이라고 단순히 값을 복사하여 전달 방법을 값 전달이라고 한다.&lt;/p&gt;
&lt;p&gt;예를 들어, &amp;ldquo;두 변수의 값을 바꿀 함수를 만드십시오&amp;quot;라는 과제가 주어진 경우 기존의 방법으로는 달성할 수 없다. 함수의 반환 값은 항상 하나의 값 밖에 없으며, 매개 변수의 값을 교체해도 함수의 호출에 아무런 영향도 주지 않는다. 이런 경우에 포인터를 매개 변수로 받는 방법을 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;swapInt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;swapInt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar1 = %d : iVar2 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;swapInt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드4의 swapInt() 함수는 두 개의 int 형의 포인터를 받는다. 이 함수는 전달된 포인터에서 간접 참조를 하고 호출자가 지정한 변수의 값을 변경시킬 수 있는 것이다. 프로그램을 실행하면 &lt;code&gt;iVar1 = 1000 : iVar2 = 100&lt;/code&gt;이라는 결과를 얻을 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;그런데 포인터 변수에 데이터 형이 존재한다. char 형 변수의 주소는 char 형의 포인터를 int 변수의 주소는 int 형 포인터에 할당해야 한다. 하지만 포인터는 메모리 주소를 나타내는 정수를 저장하기 위한 것으로, 포인터 변수가 점유하는 메모리 영역은 항상 같은 크기이다. 포인터는 C 컴파일러가 포인터가 가리키는 변수가 몇 바이트인지를 인식하는데 사용된다. 이제 간접 참조로 할당하고 검색을 갔을 때 몇 바이트 단위로 값을 복사하거나 대입하는 방법이 결정된다. 따라서 특별한 경우를 제외하고 서로 다른 타입의 포인터 변수에 주소를 할당할 수는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드5&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xFFF&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iVar1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chPo&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iVar2 = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iVar2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램은 부호없는 char 형의 포인터 chPo에 int 형 변수 iVar1 주소를 대입한다. 확실히 chPo는 iVar1의 주소를 틀림없이 저장할 수 있지만 &lt;code&gt;iVar2 = *chPo&lt;/code&gt;에서 간접 참조했을 때, 컴파일러는 이 포인터 참조는 1바이트(char 타입)으로 판단한다. iVar1에 저장되는 값은 16 진수 0xFFF이지만, char 형태로 간접 참조하면, 이 중 하위 1바이트 밖에 보이지 않기 때문에 iVar2는 16 진수 0xFF 즉 10 진수 255이 대입된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 포인터 연산</title>
      <link>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%97%B0%EC%82%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%97%B0%EC%82%B0/</guid>
      <description>
        
        
        &lt;p&gt;포인터에 저장되는 주소는 실질적으로 정수이므로 포인터를 연산하여 참조를 변경할 수 있다. 이를 응용하여 배열과 같은 구조적인 데이터에 대한 포인터에서 모든 요소를 가르키 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;주소를-계산하기&#34;&gt;주소를 계산하기&lt;/h2&gt;
&lt;p&gt;포인터는 메모리 주소를 저장하는 특수한 변수이다. 포인터도 다른 변수와 동일하게 데이터 형이 존재하고, 변수처럼 취급할 수 있다. 중요한 것은 포인터의 실체는 간단한 정수 값이며,이를 산술 계산을 할 수 있다는 것이다.&lt;/p&gt;
&lt;p&gt;하지만 엉터리 숫자를 메모리 주소로 참조해서는 그 정보에 의미는 없다. 변수 등에서 취득한 올바른 주소 이외를 간접 참조하는 것은 프로그램의 충돌로 이어진다.&lt;/p&gt;
&lt;p&gt;포인터 연산은 연속된 메모리 영역을 확보하고 있는 주소에 유효한 것이다. 연속된 메모리 영역은 예를 들어 배열이다. 배열과 같은 연속적인 공간을 가진 합성체는 메모리 주소도 연속하고 있기 때문에 그 범위를 예상할 수 있다. 따라서 인덱스를 사용하는 대신 포인터를 연산하여 특정 요소를 볼 수 있게 되는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chStr[%d] = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 chStr 배열의 각 요소의 메모리 주소를 순서대로 표시한다. 이 결과에서 흥미로운 것은 배열과 주소의 관계이다. 재미있는 것은 주소가 배열의 처음부터 순서대로 단순 증가하고 있다.&lt;/p&gt;
&lt;p&gt;이것은 배열이 연속된 메모리 영역을 확보하고 있음을 나타낸다. 이 특징을 잘 이용하면 포인터를 산술 연산자로 계산하여 간접 참조를 할 수 있다. 위의 예제에서 생각해 보면, chStr[0]의 주소에 다섯을 가산하면 chStr[5]의 주소와 동일하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*iPo = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2는 배열이 연속된 주소를 가지는 것을 이용하여, iPo 포인터에 iArray 배열 변수의 시작 주소를 할당 할 때, 덧셈 연산자 +를 사용하여 메모리 주소에 1을 가산하고 있다. 그 결과, 본래는 iArray[0]을 나타내는 것이었던 주소가 그 다음에 iArray[1]로 변경된다. printf()에서 iPo 포인터에서 간접 참조 값을 출력하고 있는데, 결과에서 포인터가 iArray [1]을 나타내고 있음을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;포인터 연산에서는 모든 주소가 1바이트 단위로 할당한다는 점에 유의해야 한다. 32비트 컴퓨터에서 int는 4바이트의 메모리 공간을 확보한다. 이 경우 int 형 변수 다음의 주소는 이 변수의 주소에 4를 가산한다. 코드1의 실행 결과가 단순히 1씩 증가되어 있던 것은 chStr 배열 변수가 1바이트의 char 형 이었기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iArray[] = { 2 , 4 };

 printf(&amp;#34;&amp;amp;iArray[0] = %p\n&amp;#34; , &amp;amp;iArray[0]);
  printf(&amp;#34;&amp;amp;iArray[1] = %p\n&amp;#34; , &amp;amp;iArray[1]);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드3와 코드1의 결과와는 달리, 주소가 4단위로 증가하고 있는 것을 알 수 있다. 이 결과는 int 형이 4바이트의 컴퓨터에서 실행한 것이다. iArray 배열 변수는 int 형이기 때문에 각 요소가 4바이트 단위로 다루어지고 있는 것이다.&lt;/p&gt;
&lt;p&gt;다행히도, 개발자는 이 사실을 거의 신경 쓸 필요는 없다. 예를 들어 iArray[0] 포인터 iPointer이 존재하는 것처럼, 이 포인터를 사용하여 iArray[1]의 주소를 계산하려면, iPointer += 4 로 할 필요는 없다. 직관적으로 iPointer += 1으로 한다.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;포인터&amp;quot;절에서도 설명했지만, 포인터 형은 컴파일러가 참조하는 주소를 몇 바이트 단위로 취급해야 하는지 판단하기 위해 이용된다. 컴파일러는 주소의 계산을 수행하면, 포인터의 형태에 따라 올바른 것라고 생각할 수 있는 연산 결과를 산출한다. 32비트 컴퓨터에서 int 형 변수에 대한 포인터에 1을 가산 한 경우 실제 메모리 주소는 4가 가산되는 구조로 되어 있다.&lt;/p&gt;
&lt;p&gt;즉, 포인터에 대한 연산이 행해진 경우 암시적으로 정수로 포인터의 크기를 곱한 값이 계산된다. 컴파일러가 이 계산을 해주기 때문에, 개발자는 포인터 형에 따른 번거로운 메모리 주소 계산을 할 필요가 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 int iArray[] = { 2 , 4 };
 int *iPo = &amp;amp;iArray[0];

  printf(&amp;#34;*iPo = %d : iPo = %p\n&amp;#34; , *iPo , iPo);
 iPo += 1;
 printf(&amp;#34;*iPo = %d : iPo = %p\n&amp;#34; , *iPo , iPo);

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;주소는 실행했을 때 상황에 따라 다르지만, 그것은 중요하지 않다. 결과를 보면, 프로그램을 실행했을 때 iArray 배열 변수의 선두 요소에 할당된 메모리 주소는 0033FDA4라는 주소 이었다. int 형는 32비트 컴퓨터에서 실행되고 있다고 가정하고 0033FDA4, 0033FDA5,0033FDA6,0033FDA7 4 바이트을 iArray[0]가 점유하고 있다고 생각된다.&lt;/p&gt;
&lt;p&gt;프로그램은 iArray 배열 변수의 첫번째 요소에 대한 포인터 iPo가 정의되어 있다. 먼저 iPo의 포인터가 가리키는 값으로 저장하는 메모리 주소를 표시하지만, 이것은 당연히 iArray[0]의 값 2와 주소 0033FDA4가 표시된다. 다음 iPo += 1을 의해 iPo에 정수1을 가산하고 있지만만, 여기에서는 iPo 값이 0033FDA5 대신 0033FDA8이 되는 것이 포인트이다.&lt;/p&gt;
&lt;p&gt;이것은 두번째 printf() 함수의 결과에서 확인할 수 있다. iPo의 주소에 1을 더하면 int 형의 크기만큼 메모리 주소가 나아가서, 정확하게 두번째 요소 iArray[1]을 가리킨다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 배열과 포인터</title>
      <link>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4%EA%B3%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B0%B0%EC%97%B4%EA%B3%BC-%ED%8F%AC%EC%9D%B8%ED%84%B0/</guid>
      <description>
        
        
        &lt;p&gt;배열을 가리키는 포인터를 계산하고, 어떤 요소에 간접 참조하는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;배열에-간접-참조&#34;&gt;배열에 간접 참조&lt;/h2&gt;
&lt;p&gt;지금까지 배열의 첫번째 요소의 주소를 얻기 위해 &amp;amp;iArray[0]과 같이 쓰는 방법으로 사용해 왔다. 그러나 사실은 배열 변수라는 것은 특별한 변수 이름만 지정하면 배열의 위로의 주소를 나타내는 것으로 되어 있다. 예를 들어, 지금까지는 배열 변수 iArray의 선두 요소의 메모리 주소를 얻으려면 다음과 같이 기술하였다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int *iPo = &amp;amp;iArray[0];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이는 틀린 것은 아니지만, 이보다 단순히 배열 이름에서 선두의 주소를 가져올 수 있다. 이는 다음과 같이 쓸 수도 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int *iPo = iArray;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;자세히 다루지 않았지만, 이전 printf() 함수에 %s으로 문자열을 표시하는 경우, 배열 이름만 전달했던 이유가 여기에 있다. printf() 함수의 서식 지정 문자 %s에 대응하는 인수는 문자 배열에 대한 포인터해야만 한다. 일반적으로 주소 연산자를 사용하여 주소를 가져오지만, 문자 배열의 경우는 붙어있지 않는다. 왜냐하면 배열 변수의 경우, 인덱스 생략의 변수 이름은 배열의 시작 주소를 나타내기 때문이다.&lt;/p&gt;
&lt;p&gt;그러나 배열 변수의 변수 이름은 포인터가 아니므로 착각하지 않도록 주의하자. 인덱스를 생략한 배열 변수의 이름은 선두 요소의 주소를 나타내는 상수와 같은 것이며, 이에 어떤 값을 대입할 수는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Kitty on your lap&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chStr[0] = %p : chStr = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 &lt;code&gt;&amp;amp;chStr[0]&lt;/code&gt;와  &lt;code&gt;chStr&lt;/code&gt;가 동일한 주소를 나타내고 있음을 증명하고 있다. printf() 함수는 &lt;code&gt;&amp;amp;chStr[0]&lt;/code&gt;와 &lt;code&gt;chStr&lt;/code&gt;을 인수 받아, 이를 16진수로 화면에 표시하면, 프로그램은 동일한 수치를 화면에 표시한다.&lt;/p&gt;
&lt;p&gt;이 특성을 이용하면 인덱스 대신에 간접 연산자 &lt;code&gt;*&lt;/code&gt;를 사용하여 배열을 제어할 수 있다. 배열이 메모리 상에 어떻게 배치되어 있는가하는 본질에 관련되어 있기 때문에, 이 방법에 의한 요소에 대한 액세스를 이해하는 것은 매우 중요하다. 다음 문은 배열 변수 iArray 중 iArray[2]에 간접 연산자를 사용하여 참조한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*(iArray + 2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 때 주의해야 하는 것이, 간접 연산자 &lt;code&gt;*&lt;/code&gt;는 덧셈 연산자 &lt;code&gt;+&lt;/code&gt;보다 우선 순위가 높기 때문에 괄호를 빼버리면 먼저 &lt;code&gt;*iArray&lt;/code&gt;이 연산된다. 따라서 괄호로 &lt;code&gt;iArray + 2&lt;/code&gt;를 먼저 계산하도록 작성해야 한다. 이와 같이, 연산과 간접 참조가 동일한 식에 있으면, &lt;code&gt;*&lt;/code&gt; 연산자 우선 순위에 주의해야 한다. 특히 증가 연산자와 간접 참조 연산자를 동시에 사용하는 경우 &lt;code&gt;*iPo++&lt;/code&gt;로 작성하면 iPo 포인터의 주소를 증가하는 것을 나타내며, &lt;code&gt;(*iPo)++&lt;/code&gt;로 작성하면 iPo가 가리키는 내용을 증가하는 것을 나타내는 것이다. 이러한 미묘한 차이에 당황하는 경우가 많기 때문에, 조심해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;간접참조=%d,%d,%d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;첨자지정=%d,%d,%d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드2를 실행하면 &lt;code&gt;*(iArray + 1)&lt;/code&gt;과 &lt;code&gt;iArray[1]&lt;/code&gt;이나 &lt;code&gt;*(iArray + 2)&lt;/code&gt;과 &lt;code&gt;iArray[2]&lt;/code&gt;가 같은 값을 참조하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;실질적으로 iArray[index]라는 인덱스 연산은 &lt;code&gt;*(iArray + index)&lt;/code&gt;와 동일한 조작이다. 따라서 &lt;code&gt;iArray[index]&lt;/code&gt;와 &lt;code&gt;*(iArray + index)&lt;/code&gt;는 동일하다고 생각할 수 있다. 마찬가지로, &lt;code&gt;&amp;amp;iArray[index]&lt;/code&gt; 문장은 &lt;code&gt;iArray + index&lt;/code&gt;와 동일하다. 이것은 포인터와 배열의 관계에서 가장 중요한 관계이기 때문에 충분히 이해해야 한다.&lt;/p&gt;
&lt;p&gt;이 특성을 반대로 생각하면, 인덱스를 지정하고 배열 변수의 요소에 액세스하는 것은 간접 참조이라는 것이다. 결국은 배열의 주소를 저장하는 포인터 &lt;code&gt;iPo&lt;/code&gt;에서도 &lt;code&gt;iPo[index]&lt;/code&gt;와 같이 인덱스 지정에 간접 참조를 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;다차원-배열과-포인터&#34;&gt;다차원 배열과 포인터&lt;/h2&gt;
&lt;p&gt;저장 공간 및 주소의 관계는 1차원 배열과 같은 것이다. 다차원 배열은 프로그래밍 언어가 개념적 계층을 위한 것이며, 물리적으로 (기계어 수준) 다원화되는 것은 아니다. 2개의 요소를 가진 2차원 배열 &lt;code&gt;Array [2] [2]&lt;/code&gt;는 4개의 요소를 가진 배열 &lt;code&gt;Array[4]&lt;/code&gt;와 요소의 수를 동일하기 때문에 할당된 메모리 크기는 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;chArray = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chArray[0][0] = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chArray[0][1] = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chArray[1][0] = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;amp;chArray[1][1] = %p&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드3은 다차원 배열의 주소 구조를 이해하기 위한 것이다. 먼저 첨자를 생략한 배열 이름이 항상 배열의 시작 주소를 나타내는 것은 동일하다. 2차원 배열에서 배열의 선두는 &lt;code&gt;[0] [0]&lt;/code&gt; 요소이다. chArray 돌려주는 값이 &lt;code&gt;&amp;amp;chArray[0] [0]&lt;/code&gt;가 반환된 값과 동일하다는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;주목해야 하는 것은 각 요소가 반환 메모리 주소이다. 2차원 배열이라고 해도, 할당된 메모리는 일렬로 되어 있다는 것을 이 결과에서 확인할 수 있다. 다차원 배열도 보통의 1차원 배열처럼 연속된 메모리 영역에 할당된다.&lt;/p&gt;
&lt;p&gt;이 특성을 알면, 다차원 배열에서도 목적의 차원과 요소에 포인터에서 액세스할 수 있다. 예를 들어 2차원 배열에 있어서 다음과 같은 계산식을 이용하는 방법이 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*(iPointer + (일차원 첨자 * 이차원 요소 수) + 이차원 첨자)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;반복 문장의 카운터를 이용하여 다차원 배열을 처리하는 일이 요구된 경우는 이러한 방법으로 간접 참조할 수 있을 것이다. 그러나 다차원 배열의 첨자를 생략한 변수 이름에서 간접 참조를 시도하면 뜻밖의 결과를 얻을 수 있다. 다음 문장은 아마 예상한 것과 다른 결과가 될 것이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int iArray[2][2] = { 1 , 2 , 3 , 4 };
printf(&amp;#34;%d&amp;#34; , *iArray);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 경우 iArray는 배열의 선두 &lt;code&gt;iArray[0] [0]&lt;/code&gt;의 주소를 보여주기 위해, &lt;code&gt;*iArray&lt;/code&gt;는 1이라는 결과를 간접 참조해 줄 것을 기대하고 있지만, 전혀 다른 값을 표시한다. 첨자를 생략한 변수 이름 iArray을 printf()함수에서 예시로 표시시켜 보면, 확실히 &lt;code&gt;&amp;amp;iArray[0][0]&lt;/code&gt;에 동일한 비록 간접으로 얻을 수 있는 값은 &lt;code&gt;iArray[0][0]&lt;/code&gt;에 저장되는 값이 아니다. 이것은 매우 이상한 현상이다.&lt;/p&gt;
&lt;p&gt;이전, &lt;code&gt;iArray[index]&lt;/code&gt; 문은 &lt;code&gt;*(iArray + index)&lt;/code&gt;와 동일하다고 설명했지만 ,이를 역으로 생각하면 다차원 배열의 &lt;code&gt;*iArray&lt;/code&gt;는 &lt;code&gt;iArray[0]&lt;/code&gt;에 동일한 것이다. 이것은 차원을 지정하고 있지만 요소를 지정하지 않는다. 2차원 배열 변수에서 &lt;code&gt;iArray[0]&lt;/code&gt;을 지정한 경우는 &lt;code&gt;iArray[0][0]&lt;/code&gt;의 주소를 돌려준다. 따라서, 위에 예문은 기대한 결과 1 대신, &lt;code&gt;&amp;amp;iArray[0][0]&lt;/code&gt;을 표시하게 되는 것이다.&lt;/p&gt;
&lt;p&gt;이것을 해결하는 하나의 방법으로는 iArray 2차원 배열 변수를 &lt;code&gt;(int *)&lt;/code&gt;로 캐스팅해 버리는 것이다. 그러면 차원을 신경 쓸 필요 없이 직접 int 변수에 대한 간접 참조로 각 요소에 액세스할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[][&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount1&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드4는 for 문을 사용하여 2차원 배열을 처리하지만, 배열 액세스는 인덱스가 아닌, 포인터의 연산에 의한 간접 참조로 실현하고 있다. iArray을 직접 연산한 경우는 간접 참조를 하여도 요소 주소가 반환되기 때문에, 한번 int 형 포인터 iPo에 캐스팅하고 이를 조작하고 있다. 형식 변환은 명시적으로 할 필요는 없지만 컴파일러에서 잘못된 포인터 조작임을 경고될 가능성이 있기 때문에 &lt;code&gt;(int *)iArray&lt;/code&gt;와 같이 명시적으로 변환한다.&lt;/p&gt;
&lt;p&gt;이 프로그램은 iArray의 각 요소를 화면에 표시하고 첫 번째 요소가 0 인 경우에 처리를 종료한다.&lt;/p&gt;
&lt;h2 id=&#34;함수와-포인터&#34;&gt;함수와 포인터&lt;/h2&gt;
&lt;p&gt;표준적인 설계는 배열이나 구조체 등의 대용량 데이터를 함수에 전달하는 방법으로 포인터를 이용한다. 포인터를 이용하지 않는 이유는 값을 반환하지 입력 목적의 단순 형식을 사용하는 경우에만, 예를 들면 char, int, double 등 형태의 입력할 경우이다.&lt;/p&gt;
&lt;p&gt;문자열과 데이터 배열을 받거나 호출자에게 돌려주는 경우, 함수는 포인터를 받아야한다 생각되고 있다. 포인터가 아닌 일반 배열로 전달할 수도 있는데, 이 경우 크기가 명확하게 결정되어 있어야 해서 불편하다. 포인터 이외의 방법으로 합성체를 전달하려면 함수를 호출 할 때마다 배열 등을 통째로 복사해야 되고, 이것은 실행 속도와 메모리에 심각한 부담을 주게 된다. 이 방법에 장점이 없기 때문에, 상급자는 망설임없이 포인터 정보를 교환해야 한다고 판단하는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드5&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;stringToLower&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x40&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x5B&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;～KITTY on YOUR lap～&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;stringToLower&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 프로그램의 함수 tolower()에는 인수 문자열에 대한 포인터를 지정한다. tolower() 함수는 주어진 포인터로부터 문자에 간접 참조하고, 그 문자가 대문자인지 여부를 ASCII 코드의 성질을 이용하여 조사하고 있다. ASCII 코드의 대문자에 16진수 0x20를 추가하면 그대로 소문자가 되기 때문에, 이를 이용하여 문자열 내에 대문자가 존재하는 경우에 이를 소문자로 변환한다. 즉,이 함수의 역할은 주어진 문자 배열의 문자로 변환할 수 있는 모든 문자를 소문자로 하는 것이다.&lt;/p&gt;
&lt;p&gt;덧붙여서, tolower 함수 정의의 매개 변수에&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;라는 선언은 다음과 같이 설명할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;chpStr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 두개는 함수의 매개 변수에만 동일하다고 해석되지만, 전자 &lt;code&gt;char *chpStr&lt;/code&gt;이라는 기법이 인수가 포인터임을 명확하게 보여주고 있기 때문에 권장된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 문자열 포인터</title>
      <link>https://www.devkuma.com/docs/c/%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%8F%AC%EC%9D%B8%ED%84%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%8F%AC%EC%9D%B8%ED%84%B0/</guid>
      <description>
        
        
        &lt;p&gt;문자 배열과 문자열에 대한 포인터에 대해 설명한다. 특성상 리터럴 문자열에 대한 포인터에서 리터럴 문자열을 변경해서는 안된다. 리터럴 문자열에서 읽어 들인 문자열을 편집할 경우는 배열에 복사해야 한다.&lt;/p&gt;
&lt;h2 id=&#34;리터럴-문자열에-대한-포인터&#34;&gt;리터럴 문자열에 대한 포인터&lt;/h2&gt;
&lt;p&gt;리터럴 문자열을 배열 초기화를 하면 배열에 문자열을 저장할 수 있었다. 그런데 어떤 의문이 생긴다. 초기화 이외의 식에서 리터럴 문자열을 지정한 경우, 이 문자열 리터럴은 어떤 형태로 사용되는가. 사실, 문자열 리터럴은 그 문자열에 대한 포인터를 반환한다.&lt;/p&gt;
&lt;p&gt;예를 들어 &lt;code&gt;printf(&amp;quot;Kitty on your lap&amp;quot;)&lt;/code&gt;라는 문장은 printf() 함수에 &lt;code&gt;char *&lt;/code&gt;형의 값을 인수로 전달하고 있다고 생각할 수 있다. 그럼 이 문자열은 어디에 저장되어 있는가.&lt;/p&gt;
&lt;p&gt;리터럴 문자열이나 숫자 등의 상수는 모두 컴파일시 고정 값으로 바이너리화되어 결국 실행 파일에 데이터가 저장된다. 프로그램 실행시 데이터가 상수 값으로 메모리에 로드할 수 있도록 되어 있다. 구체적으로 상수를 어떻게 저장하고 실행시에 어떻게 가져올지 컴파일러와 시스템에 의존한다.&lt;/p&gt;
&lt;p&gt;이 점을 감안하면 문자열 리터럴은 프로그램을 실행하고 있을 때에 이미 메모리에 저장되어 있기 때문에 배열 이니셜 라이저를 사용하여 다른 배열에 복사를 한다는 것은, 문자 단위의 편집 등을 의도 하지 않으면 의미가 없는 행위이다. 목적에 따라 리터럴에 대한 포인터를 사용하는지 배열에 복사할지 여부를 선택해야 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char chStr[] = &amp;#34;Kitty on your lap&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 문장은 리터럴 문자열을 새로운 배열 chStr에 복사할 수 있다. 리터럴 문자열에서 생성된 배열을 편집할 경우에 유효하지만 단순히 문자열을 가리키는 변수를 준비하고 싶은 것 뿐이라면 리터럴 문자열을 배열에 복사할 필요가 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char *chpStr = &amp;#34;Kitty on your lap&amp;#34;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것은 배열 이니셜 라이저에 리터럴 문자열을 지정하는 문장과는 큰 차이가 있다. &lt;code&gt;chStr[] = &amp;quot;...&amp;quot;&lt;/code&gt;는 문자열을 저장만 하는  충분한 배열이 할당되고, 이것을 지정한 리터럴 문자열을 복사하지만, &lt;code&gt;*chpStr = &amp;quot;Kitty on your lap&amp;quot;&lt;/code&gt;의 경우는 실행 파일에서 메모리에 로드된 문자열 리터럴에 주소를 대입하고 있는 것에 지나지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 char *chpStr = &amp;#34;Kitty on your lap&amp;#34;;
 printf(&amp;#34;%s\n&amp;#34; , chpStr);
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드1에서 포인터 chpStr에 리터럴 문자열 &amp;ldquo;Kitty on your lap&amp;quot;에 주소를 할당한다. 결과는 예상대로 &amp;ldquo;Kitty on your lap&amp;quot;라는 문자열을 표시할 뿐이다. 이 때, 포인터에서 리터럴 문자열의 내용을 변경할 수 없다. 내용의 변경을 시도했을 경우의 결과는 부정된다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 포인트 배열</title>
      <link>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%B0%EC%97%B4/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%B0%B0%EC%97%B4/</guid>
      <description>
        
        
        &lt;p&gt;각 요소가 포인터 형인 포인터의 배열을 만든다. 포인터의 배열을 이용하여 대용량 데이터를 구조적으로 관리할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;포인터의-배열을-만들기&#34;&gt;포인터의 배열을 만들기&lt;/h2&gt;
&lt;p&gt;포인터는 메모리 주소를 저장하는 변수의 일종이므로, 정수형 등의 일반적인 변수와 마찬가지로 포인터의 배열을 만들 수 있다. 배열의 각 요소가 포인터라는 점을 제외하면, 일반 배열처럼 처리할 수 있다. 1차원에서도 다차원에서도 기본적으로 지금까지의 배열과 동일하다.&lt;/p&gt;
&lt;p&gt;포인터의 배열은 다음과 같이 선언할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;포인터-배열의-선언&#34;&gt;포인터 배열의 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;형식 *포인터변수명[];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면, 여러 포인터를 배열로 통일된 관리를 할 수 있다. 첨자를 지정하여 저장되어 있는 주소를 꺼내거나 요소에 저장되어 있는 주소의 내용에 액세스할 수 있다. 단순히 포인터 변수를 배열화한 것이고, 그 취급은 배열과 포인터를 이해하고 있으면 어려운 것이 아니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 여러 문자열을 배열처럼 관리할 필요가 있는 경우, 다차원 배열을 이용하는 것보다도 문자열에 대한 포인터를 배열로 관리하는 형태가 자연스럽다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
 char *chStr[] = {
   &amp;#34;Blue Blue Glass Moon&amp;#34; ,
    &amp;#34;Under The Crimson Air&amp;#34;
 };

  printf(&amp;#34;%s\n%s\n&amp;#34; , *chStr , *(chStr + 1));
 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드1의 배열 chStr는 문자열에 대한 포인터를 저장하는 2가지 요소로 구성되어 있다. 이 배열의 요소는 문자열을 포함하고 있는 것이 아니라, 문자열에 대한 포인터를 저장하고 있을 뿐이다. 2차원 배열에 의한 문자열 테이블에 비해 유연하게 처리할 수 포인터가 참조하는 주소를 바꾸는 것만으로 테이블을 갱신할 수 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 포인터의 포인터</title>
      <link>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%8F%AC%EC%9D%B8%ED%84%B0/</guid>
      <description>
        
        
        &lt;p&gt;주소를 저장하는 포인터도 편집의 일종이며, 포인터 자신도 주소가 있다. 주소 연산자를 사용하여 포인터의 주소 즉, 포인터에 대한 포인터를 얻을 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;포인터의-주소&#34;&gt;포인터의 주소&lt;/h2&gt;
&lt;p&gt;포인터의 실체는 참조된 주소를 나타내는 숫자를 저장하는 일종의 변수라고 설명했다. 포인터도 주소를 저장하는 변수의 일종이며, 포인터 자신의 주소가 존재한다. 말이 반복되지만, 포인터의 포인터를 만들 수 있다는 것이다. 즉, 포인터의 주소를 다른 포인터에 저장하는 것이 가능하다.&lt;/p&gt;
&lt;p&gt;포인터의 포인터가 참조하는 포인터이며, 이 포인터에서 더 참조할 수 있는 원래의 변수에 액세스할 수 있다. 이러한 다중 간접 참조의 이해는 포인터의 개념에서 중요한 부분이므로 확실히 이해하도록 한다. 포인터의 포인터를 선언하려면 별표 &lt;code&gt;*&lt;/code&gt;를 더 추가한다.&lt;/p&gt;
&lt;h3 id=&#34;포인터의-포인터-선언&#34;&gt;포인터의 포인터 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;형식 **변수명;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다중 간접 참조하려면 역시 간접 연산자 &lt;code&gt;*&lt;/code&gt;를 참조하는 수준만큼 지정한다. 포인터의 참조 횟수가 많아지면 처리 속도에도 영향을 주기 때문에, 무의미한 다중 간접 참조는 좋을 것이 없다. 그러나 개발자가 보유하고 있는 포인터를 다른 함수에서 제어하고 싶은 경우에, 포인터의 포인터가 이용될 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  int iVariable = 100;
  int *ip = &amp;amp;iVariable;
 int **ipp = &amp;amp;ip;

  printf(&amp;#34;--ip 포인터가 나타내는 값--\n&amp;#34;);
  printf(&amp;#34;주소 = %p\n&amp;#34; , &amp;amp;ip);
 printf(&amp;#34;저장 주소 = %p\n&amp;#34; , ip);
 printf(&amp;#34;저장 주소 내용 = %d\n\n&amp;#34; , *ip);

  printf(&amp;#34;--ipp 포인터의 포인터가 나타내는 값--\n&amp;#34;);
  printf(&amp;#34;저장 값  = %p\n&amp;#34; , ipp);
  printf(&amp;#34;저장 주소의 내용 = %p\n&amp;#34; , *ipp);
 printf(&amp;#34;저장 주소 주소 내용 = %d\n&amp;#34;, **ipp);

 return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드1은 정수 100을 저장하는 변수 iVariable과 iVariable의 주소를 저장하는 포인터 ip, 그리고 ip로 주소를 저장하는 포인터의 포인터 ipp가 정의되어 있다. 이 프로그램에서는 포인터와 &amp;ldquo;포인터의 포인터 &amp;lsquo;의 관계를 이해하기 위해 printf() 함수에서 각종 정보를 표시한다. 표시되는 주소는 실행시기에 따라 다르지만 위의 결과처럼 될 것이다.&lt;/p&gt;
&lt;p&gt;포인터 ip 주소를 주소 연산자 &amp;amp;로 얻을 수 있다. 포인터의 포인터 ipp는 이를 저장하고 있기 때문에 ip 주소와 ipp의 저장 값은 동일하다는 것을 확인할 수 있다. 또한 포인터의 포인터 ipp을 간접 참조하는 것은 ip가 저장한 값을 참조한다는 것이다. ipp 저장하는 주소의 내용과 ip가 저장 주소가 동일한 지에서이를 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;포인터의 포인터에서 원래 변수의 값을 참조하려면 다중 간접 참조를 해야 한다. &lt;code&gt;**ipp&lt;/code&gt;로 작성하여 다중 간접 참조를 하고, 마지막 printf() 함수에서 ipp가 저장한 주소(즉 ip)가 저장 주소(즉, iVariable)를 참조하고 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 포인터의 형변환</title>
      <link>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%98%95%EB%B3%80%ED%99%98/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%9D%98-%ED%98%95%EB%B3%80%ED%99%98/</guid>
      <description>
        
        
        &lt;p&gt;보통의 변수가 변환 연산자로 형변환할 수 있도록 포인터 변수도 캐스트 연산자로 다른 포인터 형식으로 변환할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;포인터의-형변환을-이용하기&#34;&gt;포인터의 형변환을 이용하기&lt;/h2&gt;
&lt;p&gt;하드웨어에 가까운 저급 프로그램을 이해하는데 가장 중요한 것은 메모리 구조를 이해하는 것이다. C 언어는 고급 언어에 속하지만, 그 본질은 어셈블리 언어에 가까운 하드웨어 쪽의 저수준 처리도 특기로 여기고 있다. 그 대표적인 개념이 포인터이다.&lt;/p&gt;
&lt;p&gt;포인터를 충분히 학습하면 C 언어에 있어서 형은 컴파일러가 변수와 포인터에 액세스할 때에 조작해야 하는 사이즈를 알 수 있기 위한 정보에 불과하다는 것이 알수 있다. 예를 들어, 32비트 컴퓨터에서 int의 배열 iArray[2]의 크기는 총 8바이트이며, 이를 char 형의 포인터로 다루기 위해 8개의 요소를 가지는 char 배열처럼 처리할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x02040810&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0x20408000&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cp&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cp + %d = %d&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cp&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 int 형의 배열 iArray의 첫번째 요소에 주소를 char 형의 포인터 cp에 대입하고 있다. char 형을 중심으로 생각하면 2개의 요소를 가지는 int 형 배열은 32비트 컴퓨터에서는 8개의 요소를 가진 배열로 조작할 수 있기 때문에 for 문은 cp + 8까지의 값을 바이트 단위로 표시하고 있다.&lt;/p&gt;
&lt;p&gt;이렇게 강제로 포인터를 변환하여 바이트 단위 또는 워드 단위로 값을 추출하는 것이 가능하다. 형은 한번에 조작할 바이트 크기를 나타내기 위한 정보에 불과하다는 것은 이와 같은 프로그램을 만들어 보면 쉽게 이해할 수 있을 것이다. 다만, int 형에서 원하는 바이트를 추출하는 경우는 일반적으로 이동 및 형 캐스팅 만 제공하므로 코드1과 같은 방식은 드물다.&lt;/p&gt;
&lt;p&gt;어떤 기록 방식을 채택하고 있는 컴퓨터에서 이 프로그램을 실행하면 이상한 현상이 발생한다. 예를 들어 Microsoft Windows를 실행하는 Intel x86 호환 CPU의 경우 위와 같은 결과가 나타날 것이다. 프로그램을 보면 메모리는 표1과 같이 처음부터 2,4,8 &amp;hellip; 그리고 순서에 값이 저장되는 것을 기대하고 있지만 결과를 보면 표 2와 같이 16, 8, 4, 2 &amp;hellip;와 같이 역순으로 배치되어 있는 것을 확인할 수 있다. 왜 이런 결과를 얻게 되는 것일까?&lt;/p&gt;
&lt;h3 id=&#34;표1---기대되는-배열-내용&#34;&gt;표1 - 기대되는 배열 내용&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;iArray[0]&lt;/th&gt;
&lt;th&gt;iArray[1]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2 | 4 | 8 | 16&lt;/td&gt;
&lt;td&gt;32 | 64  | 128 | 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;표2---intel-x86-호환-cpu에서-실행하는-경우-물리적-메모리의-내용&#34;&gt;표2 - Intel x86 호환 CPU에서 실행하는 경우 물리적 메모리의 내용&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;iArray[0]&lt;/th&gt;
&lt;th&gt;iArray[1]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;16 | 8  | 4  | 2&lt;/td&gt;
&lt;td&gt;0 | 128  | 64 | 32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Intel의 CPU는 리틀 엔디안(little endian)이라는 방식으로 메모리에 정보를 기록하고 있다. 리틀 엔디안은 멀티 바이트(2바이트 이상의 정보)를 저장할 때, 하위 바이트부터 저장하는 특성을 나타낸다. 이와는 반대로, 모든 정보를 표1과 같이 상위 바이트부터 저장 형식을 빅 엔디안(big endian)이라고 한다. 옛 PDP 시리즈와 Motorola 등은 이 방법을 채택하고 있었다. 지금은 접할 기회가 적다고 생각되지만 빅 엔디안 형식을 채용한 컴퓨터에서 코드1을 실행하면 위의 결과와는 다른 결과를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;문자 등의 바이트 단위의 정보를 취급하는 경우는 신경 쓸 필요는 없지만, 멀티 바이트 포인터 등으로 직접 취급하거나 메모리 덤프 등을 사용하여 디버깅할 경우 이러한 지식이 요구될 수 있다 .&lt;/p&gt;
&lt;p&gt;포인터 형에서 다른 포인터 형식으로 변환은 프로그래머의 책임으로 할 수 있었지만, 포인터를 정수로 변환을 하는 것은 가능한가? 원칙적으로는 포인터와 정수는 상호 교환할 수 없다고 규정하고 있다. 그러나 물리적 메모리 주소는 숫자로 표현되고 있기 때문에 많은 처리계에서는 정수와의 상호 교환을 실현할 수 있을 것이다. 그러나 이식성 등을 중시하는 경우 처리계 의존 코드는 피해야 한다.&lt;/p&gt;
&lt;p&gt;다만, 포인터와 정수의 상호 교환에서 0은 유일한 예외라고 되어 있다. 일반적으로 포인터는 어떤 변수를 가리키지만, 반드시 유효한 주소를 보유할 수 있다고는 할 수 없다. 어떤 유효한 포인터를 반환하는 함수를 만드는 경우, 받은 인수가 잘못된 값이었기 때문에 함수의 처리를 이행할 수 없는 경우, 함수는 무엇을 반복하면 좋은 것일까 요? 적어도 엉터리 값을 반환 피해야 한다. 그래서 사용되는 것이 0의 포인터이다.&lt;/p&gt;
&lt;p&gt;0을 저장하는 포인터는 유효한 포인터와 비교하면 동일하지 않다는 것을 보증하고 있다. 즉, 포인터가 유효한 경우 0과 동일하게 되지 않는다.&lt;/p&gt;
&lt;p&gt;포인터에 사용되는 0은 NULL이라는 별명이 주어 있다. 이 NULL이라는 식별자(NULL은 식별자이며, 키워드가 아니다)는 일반적으로 매크로로 정의되어 있다. 매크로에 대해서는 &amp;ldquo;매크로 상수&amp;quot;에서 자세히 설명하겠지만, 컴파일시에 NULL을 0으로 대체되기 때문에 NULL이라는 식별자와 0은 동일하다고 생각할 수 있다. (NULL == 0)은 성립한다.&lt;/p&gt;
&lt;p&gt;포인터가 유효한지 여부를 조사하고 싶으면 NULL로 비교한다. 마찬가지로 포인터를 해제하고 싶다면 NULL 포인터에 대입한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;char *str = NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;유효한 객체를 참조할 수 없는 포인터에는 NULL을 대입하는 것으로 잘못된 포인터임을 어필할 수 있다. NULL 포인터를 참조할 수 없다. NULL 포인터를 참조한 결과는 미정으로되어 있다. 포인터를 반환해야 함수가 처리에 실패하고, 적절한 포인터를 돌려 줄 수 없는 경우 NULL을 반환하여 오류를 알리는 방법은 사용 오래되었기 때문에, 포인터와 NULL의 비교는 프로그램에서 자주 사용되고 있을 것이다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | 범용 포인터</title>
      <link>https://www.devkuma.com/docs/c/%EB%B2%94%EC%9A%A9-%ED%8F%AC%EC%9D%B8%ED%84%B0/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EB%B2%94%EC%9A%A9-%ED%8F%AC%EC%9D%B8%ED%84%B0/</guid>
      <description>
        
        
        &lt;p&gt;임의 포인터를 저장할 수 있는 void 형 포인터를 소개한다. void 형 포인터는 함수를 통해 형식에 관계없이 포인터를 전달하고자 할 때 응용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;범용형&#34;&gt;범용형&lt;/h2&gt;
&lt;p&gt;포인터를 받는 함수를 만들 때, 포인터의 형태를 특정하고 싶지 않은 경우가 있다. 예를 들어, 함수가 상태에 따라 다른 형태의 포인터를 받거나, 또는 반환하는 구조가 바람직한 경우이다.&lt;/p&gt;
&lt;p&gt;예를 들어, 형식에 관계없이 특정 메모리 범위를 지정한 값으로 초기화하는 함수를 요청한 경우 어떻게 함수를 설계해야 할까? 하나의 방법으로는 &lt;code&gt;char *&lt;/code&gt;형 포인터를 받고, 이에 지정된 값을 대입하는 방법을 생각할 수 있다. 그러나 함수의 이용자는 &lt;code&gt;char *&lt;/code&gt; 이외의 경우는 함수를 호출할 때마다 포인터를 캐스팅해야한다.&lt;/p&gt;
&lt;p&gt;특정 메모리 영역을 초기화하는 행위에 형태는 관계 없기 때문에 이 함수는 포인터 형에 관계없이 포인터를 받아야 한다. 이러한 경우 범용 포인터를 이용한다. 일반 포인터는 임의의 포인터를 대입할 수 있으며, 마찬가지로 형식 캐스팅에 의해 형태를 복원할 수 있다. 일반 포인터와 포인터의 형식에 void 키워드가 지정된 포인터이다.&lt;/p&gt;
&lt;h3 id=&#34;void-형-포인터-선언&#34;&gt;void 형 포인터 선언&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void * 변수명
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;void 형 포인터는 모든 형태의 포인터를 캐스팅하여 할당할 수 있다. 이를 이용하면 보다 확실하고 간단하게 형식에 관계없이 포인터를 받을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FillMemory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000&#34;&gt;FillMemory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0xFF&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;iArray[%d] = %X&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iArray&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1의 FillMemory() 함수는 mem 초기화하는 영역에 대한 포인터를 size는 mem의 크기를 n은 초기화 값을 지정한다. main() 함수는 int 형의 배열 iArray[8]을 작성하고, 이를 FillMemory() 함수를 사용하여 0xFF로 초기화한다. 이 프로그램은 32비트 컴퓨터를 상정하고 있기 때문에, int 형은 4바이트, 배열은 8요소까지이기 때문에 iArray 배열 변수는 32바이트로 구성되어 있다. 따라서 FillMemory() 함수의 size 인수는 &lt;code&gt;4 * 8&lt;/code&gt;을 지정한다.&lt;/p&gt;
&lt;p&gt;이러한 형식에 관계없이 순수하게 메모리 주소를 전달하는 것이 목적 함수를 만드는 것은 드문 일이 아니다. 확장성이 뛰어난 시스템을 만들 때에는 실체를 추상화할 필요가 있기에 void 형 포인터를 적용할 수 있다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 포인트 | main() 함수의 매개 변수</title>
      <link>https://www.devkuma.com/docs/c/main-%ED%95%A8%EC%88%98%EC%9D%98-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/main-%ED%95%A8%EC%88%98%EC%9D%98-%EB%A7%A4%EA%B0%9C-%EB%B3%80%EC%88%98/</guid>
      <description>
        
        
        &lt;p&gt;프로그램 기동시에 부모 프로세스와 명령으로부터 받은 문자열을 가져온다.&lt;/p&gt;
&lt;h2 id=&#34;명령-줄command-line-인수&#34;&gt;명령 줄(command line) 인수&lt;/h2&gt;
&lt;p&gt;main() 함수도 인수를 받을 수 있다. 그럼 main() 함수는 어디에서 인수를 받는가? main() 함수는 자신을 기동시키는 부모 프로세스부터 시작시에 지정된 옵션을 문자열로 받는다. 일반적으로 명령 줄에서 전달된다. 이에 따라 프로그램의 실행에 필요한 정보를 요청할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;main() 함수는 두 개의 인수가 전달된다. 하나는 명령 줄에서 전달된 인수의 수이다. 다른 하나는 명령 줄 인수로 전달된 문자열이다. 관행적으로 첫번째 가인수을 argc, 둘째 가인수를 argv라고 명명한다. argc에는 인수의 수가 argv에는 인수의 문자열이 들어간다. 따라서 일반적인 main() 함수는 지금까지 사용해 온 인수를 받지 않는 형식 외에도 인수를 받는 형태 중 하나를 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;main-함수&#34;&gt;main() 함수&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main(int argc , char *argv[])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;명령 인수를 처리하는 경우는 위의 형식을 사용해야 한다. 가인수의 이름은 선택 사항이지만 argument count를 축약한 argc와 argument vector를 축약한 argv를 사용하는 것이 관행으로 되어 있다. 배열 변수 argv에 액세스하여 지정된 번호의 명령 문자열을 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코드 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;argc&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;argv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[])&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;argc&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%d번째 인수 = %s&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;argv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iCount&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;코드1은 main() 함수에 주어진 인수를 표시한다. argc가 상수인 경우 argv[0]은 반드시 실행된 프로그램의 이름으로 정해져 있다. argc가 1이상의 값이면 어떤 명령 인수가 전달되었는지를 나타낸다.&lt;/p&gt;
&lt;p&gt;실행 결과처럼 명령 인수는 문자열 테이블로 저장되어 있기 때문에 argc를 점검하고 argv의 적절한 요소에 액세스하여 원하는 인수를 얻을 수 있을 것이다. 실질적인 첫번째 인수는 &lt;code&gt;argv[1]&lt;/code&gt;이며, 반드시 마지막 인수는 &lt;code&gt;argv[argc - 1]&lt;/code&gt;이다. 이외에 표준은 &lt;code&gt;argv[argc]&lt;/code&gt;이 NULL임을 보증한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
    <item>
      <title>C 언어 | 구조체 선언</title>
      <link>https://www.devkuma.com/docs/c/%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%84%A0%EC%96%B8/</link>
      <pubDate>Sun, 22 Oct 2017 15:52:10 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/c/%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%84%A0%EC%96%B8/</guid>
      <description>
        
        
        &lt;p&gt;구조체에 대해서 설명한다.&lt;/p&gt;

      </description>
      
      <category>C</category>
      
    </item>
    
  </channel>
</rss>
