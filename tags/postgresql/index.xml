<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – PostgreSQL</title>
    <link>https://www.devkuma.com/tags/postgresql/</link>
    <image>
      <url>https://www.devkuma.com/tags/postgresql/logo/180x180.jpg</url>
      <title>PostgreSQL</title>
      <link>https://www.devkuma.com/tags/postgresql/</link>
    </image>
    <description>Recent content in PostgreSQL on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>PostgreSQL | PostgreSQL 설치</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-%EC%84%A4%EC%B9%98/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-%EC%84%A4%EC%B9%98/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL의 다운로드 방법과 Windows 환경에서의 설치에 대해 설명한다.&lt;/p&gt;
&lt;p&gt;아래 사이트에서 각 OS에 맞게 다운로드 받아서 설치한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.org/download/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설치 | PostgreSQL 다운로드 및 설치</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-download-install/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-download-install/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL의 다운로드 및 설치하는 방법을 설명한다. 2020년 3월 현재 최신 버전은 PostgreSQL 12.2이다. 이번에는 Windows10 (64bit)에 설치한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql-다운로드&#34;&gt;PostgreSQL 다운로드&lt;/h2&gt;
&lt;p&gt;다음 URL에서 PostgreSQL을 다운로드한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_org_download_1.png&#34; alt=&#34;Postgresql.org Download&#34;&gt;&lt;/p&gt;
&lt;p&gt;화면 상단에 표시되어 있는 Download를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_org_download_2.png&#34; alt=&#34;Postgresql.org Download&#34;&gt;&lt;/p&gt;
&lt;p&gt;Binary packages에 있는&amp;quot; Windows&amp;quot; 링크를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_org_download_3.png&#34; alt=&#34;Postgresql.org Download&#34;&gt;&lt;/p&gt;
&lt;p&gt;Windows 용 다운로드 페이지가 표시되고, &amp;ldquo;Download the installer&amp;rdquo; 링크를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_org_download_4.png&#34; alt=&#34;Postgresql.org Download&#34;&gt;&lt;/p&gt;
&lt;p&gt;버전 별 다운로드를 할 수 있는 화면이 표시되고, 여기서 PostgreSQL 12.2 Windows x86-64를 사용하기에 해당 위치에 있는 Download를 클릭한다.&lt;/p&gt;
&lt;p&gt;그러면 다운로드가 시작된다. 적당한 위치에 저장하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql-설치&#34;&gt;PostgreSQL 설치&lt;/h2&gt;
&lt;p&gt;계속해서 설치한다. 다운로드를 한 postgresql-12.2-1-windows-x64.exe 파일을 더블 클릭하면 다음과 같은 창이 표시된다.  여기서 Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_1.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;설치 위치를 지정한다. 디폴트로 그대로 두어도 괜찮고, 변경하고 싶다면 설치 디렉토리를 지정한다. 여기서는 디폴트 그대로 설치하도록 한다. Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_2.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;설치할 구성 요소를 선택한다. 여기서는 모두 체크한 상태로 Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_3.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;데이터베이스 등 생성된 데이터를 설치할 디렉토리를 지정한다. 변경하려면 디렉토리를 지정한다. 이번에도 디폴트 그대로 놔둬었다. Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_4.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;슈퍼 유저 postgres 계정의 암호를 설정한다. 확인을 위해 암호를 두번 입력한다. 설정이 끝나면 Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_5.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 와 연결을 하기 위한 포트 번호를 지정한다. 일반적으로 디폴트 5432 으로도 상관 없지만 변경하여도 된다. 설정이 끝나면 Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_6.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;새 데이터베이스 클러스터를 생성할 때에 로케일을 지정한다. 처음은 [Default locale] 설정되어 있는데, 이를 Korean, Korea을 선택하고, Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_7.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;여기까지의 설정 내용을 확인한다. Next를 클릭하십시오.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_8.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;설치 전 최종 확인을 하고, 설치를 해도 된다면 Next를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_9.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;설치가 시작되면 설치 파일이 생성된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_10.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;다음과 같이 표시되면 PostgreSQL 설치가 완료된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_setup_11.png&#34; alt=&#34;Postgresql Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Stack Builder라고 적힌 왼쪽의 체크를 된 상태로 Finish를 클릭하면 드라이버 등 추가 응용 프로그램을 설치하기 위한 스택 작성기를 시작한다. 여기서는 하지 않을 것이기에 체크를 해제하고 Finish를 클릭한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL의 다운로드 및 설치 방법에 대해 설명을 마치도록 하겠다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설치 | PATH 설정</title>
      <link>https://www.devkuma.com/docs/postgresql/path-%EC%84%A4%EC%A0%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/path-%EC%84%A4%EC%A0%95/</guid>
      <description>
        
        
        &lt;p&gt;명령 프롬프트에서 PostgreSQL에 연결하는 경우에는 PATH를 설정하면 편리하다. 여기에서는 여기에 PATH의 설정 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;path-설정&#34;&gt;PATH 설정&lt;/h2&gt;
&lt;p&gt;명령 라인으로 실행하는 PostgreSQL 프로그램은 PostgreSQL을 설치 한 디렉토리 안에서 bin 디렉토리에 포함되어 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;\Program&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; Files\PostgreSQL\12\bin&amp;gt;dir/w&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; C 드라이브의 볼륨에는 이름이 없습니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 볼륨 일련 번호: XXXX-XXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; C:\Program Files\PostgreSQL\12\bin 디렉터리
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[.]                           [..]                          clusterdb.exe                 createdb.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;createuser.exe                dropdb.exe                    dropuser.exe                  ecpg.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;icudt53.dll                   icuin53.dll                   icuio53.dll                   icule53.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iculx53.dll                   icutest53.dll                 icutu53.dll                   icuuc53.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initdb.exe                    isolationtester.exe           libcrypto-1_1-x64.dll         libcurl.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libcurl.lib                   libecpg.dll                   libecpg_compat.dll            libiconv-2.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libintl-8.dll                 libpgtypes.dll                libpq.dll                     libssl-1_1-x64.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libwinpthread-1.dll           libxml2.dll                   libxslt.dll                   oid2name.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pgbench.exe                   pg_archivecleanup.exe         pg_basebackup.exe             pg_checksums.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_config.exe                 pg_controldata.exe            pg_ctl.exe                    pg_dump.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_dumpall.exe                pg_isolation_regress.exe      pg_isready.exe                pg_receivewal.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_recvlogical.exe            pg_regress.exe                pg_regress_ecpg.exe           pg_resetwal.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_restore.exe                pg_rewind.exe                 pg_standby.exe                pg_test_fsync.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pg_test_timing.exe            pg_upgrade.exe                pg_waldump.exe                postgres.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psql.exe                      reindexdb.exe                 stackbuilder.exe              vacuumdb.exe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vacuumlo.exe                  wxbase28u_net_vc_custom.dll   wxbase28u_vc_custom.dll       wxbase28u_xml_vc_custom.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxmsw28u_adv_vc_custom.dll    wxmsw28u_aui_vc_custom.dll    wxmsw28u_core_vc_custom.dll   wxmsw28u_html_vc_custom.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wxmsw28u_xrc_vc_custom.dll    zic.exe                       zlib1.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              69개 파일          56,286,000 바이트
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               2개 디렉터리  442,429,300,736 바이트 남음
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;\Program&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt; Files\PostgreSQL\12\bin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러면 PATH를 설정해보도록 하자. 여기서는 Windows10 환경에서 설정하려고 한다.&lt;/p&gt;
&lt;p&gt;먼저, 탐색기창을 열어서 &amp;ldquo;내 PC&amp;quot;를 선택하고 마우스 오른쪽 버튼을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_path_1.png&#34; alt=&#34;Postgresql path&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;시스템&amp;quot;화면이 표시되면 왼쪽 메뉴에 &amp;ldquo;고급 시스템 설정&amp;quot;을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_path_2.png&#34; alt=&#34;Postgresql path&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;시스템 속성&amp;quot;화면이 표시되면 아래 부근에 &amp;ldquo;환경 변수&amp;quot;를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_path_3.png&#34; alt=&#34;Postgresql path&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;환경 변수 편집&amp;rdquo; 화면이 표시되는데 이 화면에서 PATH을 설정한다.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;시스템 변수&amp;quot;에서 &amp;ldquo;변수&amp;quot;가 &amp;ldquo;Path&amp;quot;라고 쓰여진 것이 있는지를 찾는다. 찾았으면 &amp;ldquo;Path&amp;quot;라고 적힌 부분을 한 번 클릭하여 선택하고 &amp;ldquo;편집&amp;rdquo; 버튼을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_path_4.png&#34; alt=&#34;Postgresql path&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;환경 변수 편집&amp;rdquo; 화면이 표시된다.&lt;/p&gt;
&lt;p&gt;오른쪽 상단의 &amp;lsquo;새로 만들기&amp;rsquo;를 클릭하면 왼쪽 목록의 마지막에 새로운 항목을 추가 할 수 있게 되고 여기에 PostgreSQL의 bin 디렉토리리인 &amp;ldquo;C:\Program Files\PostgreSQL\12&amp;rdquo; 을 입력한다. (설치된 PostgreSQL의디렉토리에 맞게 입력한다). 입력이 끝나면 &amp;ldquo;확인&amp;quot;를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_path_5.png&#34; alt=&#34;Postgresql path&#34;&gt;&lt;/p&gt;
&lt;p&gt;이것으로 PATH 설정에 PostgreSQL로 사용하는 PATH를 추가가 완료되었다.&lt;/p&gt;
&lt;h2 id=&#34;path가-제대로-설정되었는지-확인&#34;&gt;PATH가 제대로 설정되었는지 확인&lt;/h2&gt;
&lt;p&gt;그럼 설정이 잘되어 있는 확인해 보자.  PATH 설정을 한 이후에는 명령 프롬프트를 새로 실행하여 열지 않으면 설정이 적용되지 않기에 명령 프롬프트를 새로 열도록 한다. 그리고 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ psql --version
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql --version
psql (PostgreSQL) 12.2

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PostgreSQL 버전이 표시되면 PATH 설정은 제대로 된것이다.&lt;/p&gt;
&lt;p&gt;혹시 아래와 같이 &amp;ldquo;&amp;lsquo;psql&amp;rsquo;은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다.&amp;ldquo;라고 표시된다면 PATH 설정이 제대로 되지 않은 것이니 다시 확인해 보도록 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql --version
&amp;#39;psql&amp;#39;은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
배치 파일이 아닙니다.

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;PostgreSQL를 명령 라인에서 사용을 하기 위한 PATH를 설정하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://www.devkuma.com/docs/postgresql/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL는 세계적으로 널리 이용되고 있는 데이터베이스이다. 여기에서는 PostgreSQL을 앞으로 사용하시는 분들을 대상으로 PostgreSQL 소개하려고 한다. PostgreSQL의 설치 방법과 PostgreSQL을 사용하여 데이터베이스를 구축하는 방법에 대한 간단한 예제를 사용하여 직접 체험하면서 하나 하나 설명하는 것이다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설치 | Windows 서비스 시작 및 중지</title>
      <link>https://www.devkuma.com/docs/postgresql/windows-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91-%EB%B0%8F-%EC%A4%91%EC%A7%80/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/windows-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%9C%EC%9E%91-%EB%B0%8F-%EC%A4%91%EC%A7%80/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL을 Windows 환경에 설치하면 자동으로 Windows 서비스로 등록되어 &amp;ldquo;실행 중&amp;quot;인 상태로 된다. 여기에서는 PostgreSQL가 어떻게 Winodws 서비스에 등록되어 있는지를 확인하고 PostgreSQL을 중지하거나 다시 시작하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;windows-서비스-목록에서-확인&#34;&gt;Windows 서비스 목록에서 확인&lt;/h2&gt;
&lt;p&gt;먼저 PostgreSQL가 Windows 서비스로 등록되어 있는지 확인한다. Windows 서비스 목록을 표시하려면 바탕 화면 왼쪽 하단의 시작 메뉴를 마우스 오른쪽 버튼을 클릭하여, 표시되는 메뉴 중에서 &amp;ldquo;컴퓨터 관리&amp;quot;를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_1.png&#34; alt=&#34;컴퓨터 관리&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;컴퓨터 관리&amp;quot;화면이 표시되면, 왼쪽 메뉴의 &amp;ldquo;서비스 및 응용 프로그램&amp;quot;에 있는 &amp;ldquo;서비스&amp;quot;를 클릭한다. &amp;ldquo;서비스&amp;quot;에 대한 정보가 표시된다. 그리고 표시된 목록에서 &amp;ldquo;postgresql-x64-12&amp;quot;을 찾아 더블 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_2.png&#34; alt=&#34;컴퓨터 관리-서비스&#34;&gt;&lt;/p&gt;
&lt;p&gt;그러면 아래와 같이 Windows 서비스로 등록되어 있는 PostgreSQL에 대한 속성이 표시된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_3.png&#34; alt=&#34;PostgreSQL 속성&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;postgresql-서비스-시작-및-중지&#34;&gt;PostgreSQL 서비스 시작 및 중지&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;시작 유형&amp;quot;을 &amp;ldquo;자동&amp;quot;으로 설정되어 있어서 Windows가 시작될 때 자동으로 PostgreSQL도 서비스로 시작되도록 되어 있다. 만약 수동으로 PostgreSQL을 시작하고 싶은 경우는 &amp;ldquo;시작 유형&amp;quot;을 &amp;ldquo;수동&amp;quot;으로 변경하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_4.png&#34; alt=&#34;PostgreSQL 속성&#34;&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL을 정지시키려면, &amp;ldquo;서비스 상태&amp;quot;에 있는 &amp;ldquo;정지&amp;quot;를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_5.png&#34; alt=&#34;PostgreSQL 속성-중지&#34;&gt;&lt;/p&gt;
&lt;p&gt;정지 한 PostgreSQL을 시작하려고 한다면,  &amp;ldquo;서비스 상태&amp;quot;에 있는 &amp;ldquo;시작&amp;quot;을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_service_6.png&#34; alt=&#34;PostgreSQL 속성-시작&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;실행 파일 경로&amp;quot;에는 어떤 명령어로 PostgreSQL가 시작되는지 확인 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files\PostgreSQL\12\bin\pg_ctl.exe&amp;#34; runservice -N &amp;#34;postgresql-x64-12&amp;#34; -D &amp;#34;C:\Program Files\PostgreSQL\12\data&amp;#34; -w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL가 Windows 서비스에 어떻게 등록되어 있는지 확인하고 Windows 서비스로 PostgreSQL을 시작하거나 중지하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설치 | PostgreSQL 문서 참조</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-%EB%AC%B8%EC%84%9C-%EC%B0%B8%EC%A1%B0/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-%EB%AC%B8%EC%84%9C-%EC%B0%B8%EC%A1%B0/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL을 사용하는데 도움이 되는 문서를 참조하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql-관련-온라인-문서&#34;&gt;PostgreSQL 관련 온라인 문서&lt;/h2&gt;
&lt;p&gt;PostgreSQL 문서를 참조하려면 다음 URL에 액세스한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.org/&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;화면 상단에 표시되는 &amp;ldquo;Documentation&amp;quot;을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_docu_1.png&#34; alt=&#34;postgresql.org&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Documentation&amp;rdquo; 페이지가 표시되고, 화면 오른쪽&amp;rdquo; Online Manuals&amp;quot;을 보면, 버전마다 링크가 포함되어 있는 것을 볼 수 있다. 설치한 PostgreSQL 버전은 12 이었으므로 12이라고 쓰여진 링크를 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_docu_2.png&#34; alt=&#34;Documentation&#34;&gt;&lt;/p&gt;
&lt;p&gt;*&amp;ldquo;Translated Manuals&amp;quot;를 보면 번역된 언어 목록를 볼 수 있다. 안타깝게도 한국어는 목록에 없다. *&lt;/p&gt;
&lt;p&gt;PostgreSQL 12.2 문서가 표시된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/postgresql/postgresql_docu_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | psql을 사용하여 PostgreSQL에 연결</title>
      <link>https://www.devkuma.com/docs/postgresql/psql%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-postgresql%EC%97%90-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/psql%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-postgresql%EC%97%90-%EC%97%B0%EA%B2%B0/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서는 데이터베이스와 테이블을 만들고 데이터를 추가하고 검색하기 위한 도구로 커멘드 라인 기반에서 사용할 수있는 psql이라는 도구를 제공한다. 여기에서 psql을 사용하여 PostgreSQL에 연결하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;p&gt;psql  명령어는 &lt;code&gt;{postgres 설치 경로}/bin&lt;/code&gt; 디렉토리에 존재한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | psql을 사용하여 PostgreSQL에 연결 | PostgreSQL 연결과 해제</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-%EC%97%B0%EA%B2%B0%EA%B3%BC-%ED%95%B4%EC%A0%9C/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-%EC%97%B0%EA%B2%B0%EA%B3%BC-%ED%95%B4%EC%A0%9C/</guid>
      <description>
        
        
        &lt;p&gt;psql을 사용하여 PostgreSQL에 접속하는 방법과 PostgreSQL에서 연결을 해제하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql에-연결하기&#34;&gt;PostgreSQL에 연결하기&lt;/h2&gt;
&lt;p&gt;psql는 컨멘드 라인 기반으로 PostgreSQL에 작성된 데이터베이스에 연결하거나 테이블에서 데이터를 검색 등을 할 수 있는 도구이다. Windows 환경에서 psql을 이용하려면 명령 프롬프트에서 해야 한다.&lt;/p&gt;
&lt;p&gt;먼저 명령 프롬프트를 시작한다.&lt;/p&gt;
&lt;p&gt;psql을 사용하여 PostgreSQL에 연결하려면 다음과 같이 실행한다. (실제로는 PostgreSQL로 작성된 지정된 데이터베이스에 연결한다).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -h {호스트명} -p {포트 번호} -U {사용자명} -d {데이터베이스명}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;호스트명은 PostgreSQL가 실행중인 호스트명 또는 IP 주소이다. 기본값은 localhost 이기에 로컬 호스트에서 실행중인 PostgreSQL에 접속하는 경우는 생략 할 수 있다.&lt;/p&gt;
&lt;p&gt;포트 번호는 PostgreSQL가 사용하는 포트 번호이다. 기본 값이 PostgreSQL 설치시 설정한 값인 5432로 되어 있기에 다른 포트 번호를 사용하는 경우가 아니라면 생략 할 수 있다.&lt;/p&gt;
&lt;p&gt;사용자명은 PostgreSQL을 설치 한 직후에는 수퍼 유저로 postgres 역할 밖에 생성되지 않으므로 -U postgres로 지정한다. 사용자명을 생략하게 되면 OS의 사용자명이 사용된다.&lt;/p&gt;
&lt;p&gt;※ PostgreSQL에서는 일반적으로 사용자라는 것과 그룹이라는 것을 정리하여 역할이라고 부른다.&lt;/p&gt;
&lt;p&gt;데이터베이스 명에는 연결할 데이터베이스 이름을 지정한다. 생략하게 되면 사용자명과 동일한 이름의 데이터베이스에 연결한다. (postgres 데이터베이스는 자동으로 생성되며, postgres 역할로 접속한 경우는 postgres 데이터베이스에 연결된다.)&lt;/p&gt;
&lt;p&gt;모든 지정하여 PostgreSQL에 접속하는 경우는 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -h localhost -p 5432 -U postgres -d postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;locahost이라면 호스트명 지정을 생략할 수 잇고, 포트 번호를 생략 할 수도 있다. 그리고 사용자명과 같은 데이터베이스에 연결한다면 데이터베이스명을 생략 할 수 있으므로, 다음과 같이 실행해도 위에 동일하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -U postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 실제로 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres
postgres 사용자의 암호:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;연결하려고 하는 사용자의 로그인 비밀번호를 입력을 위해 대기가 상태가 된다. postgres의 비밀번호는 PostgreSQL 설치시 지정한 것이다. 입력을 한 후에 [Ener] 키를 누른다. 제대로 입력 하였다면 다음과 같은 화면이 나타난다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;연결 중에는 &amp;ldquo;데이터베이스명=#&amp;ldquo;으로 표시된다. 여기서는 postgres 데이터베이스에 연결되어 있기에 &amp;ldquo;postgres=#&amp;ldquo;로 표시되고 있다.&lt;/p&gt;
&lt;h2 id=&#34;psql을-종료하고-postgresql에서-연결-해제&#34;&gt;psql을 종료하고 PostgreSQL에서 연결 해제&lt;/h2&gt;
&lt;p&gt;psql을 종료하고 PostgreSQL에서 연결 해제하려면 다음과 같이 수행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\q
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# \q

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sql이 종료되고 PostgreSQL에서 연결이 해제되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;psql을 사용하여 PostgreSQL에 연결하는 방법과 연결을 해제하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | psql을 사용하여 PostgreSQL에 연결 | psql 옵션 사용법과 옵션 목록</title>
      <link>https://www.devkuma.com/docs/postgresql/psql-%EC%98%B5%EC%85%98-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%B5%EC%85%98-%EB%AA%A9%EB%A1%9D/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/psql-%EC%98%B5%EC%85%98-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%B5%EC%85%98-%EB%AA%A9%EB%A1%9D/</guid>
      <description>
        
        
        &lt;p&gt;psql을 실행할 때에 연결에 사용하는 사용자명 및 데이터베이스를 지정하는 옵션 이외에도 몇 가지 옵션을 제공한다. 여기에서 psql을 실행할 때 지정할 수 있는 옵션의 사용법과 옵션의 목록에 대해 설명한다.&lt;/p&gt;
&lt;p&gt;psql을 실행할 때에 자주 사용하는 옵션은 PostgreSQL에 연결할 때 사용하는 -h와 -U 옵션이지만,  그외  몇 가지 옵션을 제공하고 있다.&lt;/p&gt;
&lt;h2 id=&#34;버전-확인&#34;&gt;버전 확인&lt;/h2&gt;
&lt;p&gt;-V 옵션은 PostgreSQL 버전을 표시할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -V
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -V
psql (PostgreSQL) 12.2

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;옵션-목록-및-도움말-표시&#34;&gt;옵션 목록 및 도움말 표시&lt;/h2&gt;
&lt;p&gt;-? 옵션 목록 및 도움말을 표시하는 옵션이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -?
psql은 PostgreSQL 대화식 터미널입니다.

사용법:
  psql [OPTION]... [DBNAME [USERNAME]]

일반 옵션:
  -c, --command=COMMAND    하나의 명령(SQL 또는 내부 명령)만 실행하고 끝냄
  -d, --dbname=DBNAME      연결할 데이터베이스 이름(기본 값: &amp;#34;devkuma&amp;#34;)
  -f, --file=FILENAME      파일 안에 지정한 명령을 실행하고 끝냄
  -l, --list               사용 가능한 데이터베이스 목록을 표시하고 끝냄
  -v, --set=, --variable=NAME=VALUE
                           psql 변수 NAME을 VALUE로 설정
                           (예, -v ON_ERROR_STOP=1)
  -V, --version            버전 정보를 보여주고 마침
  -X, --no-psqlrc          시작 파일(~/.psqlrc)을 읽지 않음
  -1 (&amp;#34;one&amp;#34;), --single-transaction
                           명령 파일을 하나의 트랜잭션으로 실행
  -?, --help[=options]     이 도움말을 표시하고 종료
      --help=commands      psql 내장명령어(\문자로 시작하는)를 표시하고 종료
      --help=variables     특별 변수들 보여주고, 종료

입출력 옵션:
  -a, --echo-all           스크립트의 모든 입력 표시
  -b, --echo-errors        실패한 명령들 출력
  -e, --echo-queries       서버로 보낸 명령 표시
  -E, --echo-hidden        내부 명령이 생성하는 쿼리 표시
  -L, --log-file=FILENAME  세션 로그를 파일로 보냄
  -n, --no-readline        확장된 커멘드 라인 편집 기능을 사용중지함(readline)
  -o, --output=FILENAME    쿼리 결과를 파일(또는 |파이프)로 보냄
  -q, --quiet              자동 실행(메시지 없이 쿼리 결과만 표시)
  -s, --single-step        단독 순차 모드(각 쿼리 확인)
  -S, --single-line        한 줄 모드(줄 끝에서 SQL 명령이 종료됨)

출력 형식 옵션:
  -A, --no-align           정렬되지 않은 표 형태의 출력 모드
      --csv                CSV (쉼표-분리 자료) 테이블 출력 모드
  -F, --field-separator=STRING
                           unaligned 출력용 필드 구분자 설정(기본 값: &amp;#34;|&amp;#34;)
  -H, --html               HTML 표 형태 출력 모드
  -P, --pset=VAR[=ARG]     인쇄 옵션 VAR을 ARG로 설정(\pset 명령 참조)
  -R, --record-separator=STRING
                           unaligned 출력용 레코드 구분자 설정
                           (기본 값: 줄바꿈 문자)
  -t, --tuples-only        행만 인쇄
  -T, --table-attr=TEXT    HTML table 태그 속성 설정(예: width, border)
  -x, --expanded           확장된 표 형태로 출력
  -z, --field-separator-zero
                           unaligned 출력용 필드 구분자를 0 바이트로 지정
  -0, --record-separator-zero
                           unaligned 출력용 레코드 구분자를 0 바이트로 지정

연결 옵션들:
  -h, --host=HOSTNAME      데이터베이스 서버 호스트 또는 소켓 디렉터리
                           (기본값: &amp;#34;로컬 소켓&amp;#34;)
  -p, --port=PORT          데이터베이스 서버 포트(기본 값: &amp;#34;5432&amp;#34;)
  -U, --username=USERNAME  데이터베이스 사용자 이름(기본 값: &amp;#34;devkuma&amp;#34;)
  -w, --no-password        암호 프롬프트 표시 안 함
  -W, --password           암호 입력 프롬프트 보임(자동으로 처리함)

자세한 내용을 보려면 psql 내에서 &amp;#34;\?&amp;#34;(내부 명령) 또는 &amp;#34;\help&amp;#34;(SQL
명령)를 입력하거나 PostgreSQL
설명서에서 psql 섹션을 참조하십시오.

오류보고: &amp;lt;pgsql-bugs@lists.postgresql.org&amp;gt;.

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;결과-표시-방법을-html-테이블-태그-사용하도록-지정&#34;&gt;결과 표시 방법을 HTML 테이블 태그 사용하도록 지정&lt;/h2&gt;
&lt;p&gt;psql을 사용하여 PostgreSQL에 접속한 뒤의 표시 방법에 관한 것도 있다. 예를 들면, PostgreSQL에 접속한 후에 데이터베이스를 목록을 표시하면 다음과 같이 표시된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;psql -U postgres&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres 사용자의 암호:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psql (12.2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;도움말을 보려면 &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;를 입력하십시오.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=# \l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      데이터베이스 목록
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   이름    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;  소유주  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; 인코딩 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;     Collate      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;      Ctype       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;      액세스 권한
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------+----------+--------+------------------+------------------+-----------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; postgres  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; UTF8   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; template0 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; UTF8   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; =c/postgres          +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; postgres=CTc/postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; template1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; UTF8   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; Korean_Korea.949 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; =c/postgres          +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;                  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; postgres=CTc/postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;3개 행&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-H 옵션을 사용하면 psql을 실행 PostgreSQL에 접속하면 동일한 데이터베이스 목록을 검색하면 HTML 테이블 태그를 사용하여 형식으로 출력할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;psql -H -U postgres&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres 사용자의 암호:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psql (12.2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;도움말을 보려면 &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;를 입력하십시오.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=# \l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;table border=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;caption&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;데이터베이스 목록&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/caption&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;이름&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;소유주&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;인코딩&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Collate&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Ctype&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;th align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;액세스 권한&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;tr valign=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;UTF8&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&amp;amp;nbsp; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;tr valign=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;template0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;UTF8&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;=c/postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;br /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=CTc/postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;tr valign=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;template1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;UTF8&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Korean_Korea.949&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;td align=&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;=c/postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;br /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=CTc/postgres&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/table&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;(3개 행)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;br /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postgres=#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 언급한 데이터베이스 목록을 검색뿐 아니라, 다른 검색도 HTML 형태로 테이블 태그를 사용하여 형식으로 출력이 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# select now()
postgres-# ;
&amp;lt;table border=&amp;#34;1&amp;#34;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;th align=&amp;#34;center&amp;#34;&amp;gt;now&amp;lt;/th&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr valign=&amp;#34;top&amp;#34;&amp;gt;
    &amp;lt;td align=&amp;#34;left&amp;#34;&amp;gt;2020-03-15 02:30:16.292241+09&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;p&amp;gt;(1개 행)&amp;lt;br /&amp;gt;
&amp;lt;/p&amp;gt;

postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;파일을-이용한-sql-실행&#34;&gt;파일을 이용한 SQL 실행&lt;/h2&gt;
&lt;p&gt;-f 옵션을 사용하면 파일을 이용해서 SQL를 실행 시킬 수도 있다.&lt;/p&gt;
&lt;p&gt;먼저 아래와 같이 SQL 파일을 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;gt;copy con file.sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;select now();&lt;span style=&#34;color:#4e9a06&#34;&gt;^Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        1개 파일이 복사되었습니다.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;작성한 파일을 아래와 같이 실행시키면 출력 결과를 볼 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;D:\&amp;gt;psql -U postgres -f file.sql
postgres 사용자의 암호:
              now
-------------------------------
 2020-03-15 02:39:17.327284+09
(1개 행)



D:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;이와 같이 psql의 옵션에는 여러가지 기능을 제공하고 있기에, 나중에 옵션 목록을 확인하여 무엇을 할 수 있는지를 확인해 두면 유용하게 사용할 수 있을 것이다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | psql을 사용하여 PostgreSQL에 연결 | psql 메타 명령의 목록과 실행 방법</title>
      <link>https://www.devkuma.com/docs/postgresql/psql-%EB%A9%94%ED%83%80-%EB%AA%85%EB%A0%B9%EC%9D%98-%EB%AA%A9%EB%A1%9D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/psql-%EB%A9%94%ED%83%80-%EB%AA%85%EB%A0%B9%EC%9D%98-%EB%AA%A9%EB%A1%9D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;p&gt;psql을 사용하여 PostegreSQL에 연결하여 실행 가능한 psql 메타 명령의 사용법과 명령의 목록에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;psql-명령의-실행-방법&#34;&gt;psql 명령의 실행 방법&lt;/h2&gt;
&lt;p&gt;psql는 PostgreSQL에 접속하여 실행 가능한 명령이 많이 제공되고 있다. 명령의 목록을 확인하려면 다음과 같이 수행한다.
psql 명령 목록과 사용법이 표시된다. (명령 목록은이 페이지의 마지막에 기재되어 있다.)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\?
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \?
일반
  \copyright             PostgreSQL 사용법 및 저작권 정보 표시
  \crosstabview [칼럼들] 쿼리를 실행하고, 피봇 테이블 형태로 자료를 보여줌
  \errverbose            최대 자세히 보기 상태에서 최근 오류를 다 보여줌
  \g [FILE] 또는 ;       쿼리 실행(및 결과를 파일 또는 |파이프로 보냄)
  \gdesc                 쿼리를 실행하지 않고 그 결과 칼럼과 자료형을 출력
  \gexec                 쿼리를 실행하고, 그 결과를 각각 실행 함
  \gset [PREFIX]         쿼리 실행 뒤 그 결과를 psql 변수로 저장
  \gx [FILE]             \g 명령과 같으나, 출력을 확장 모드로 강제함
  \q                     psql 종료
  \watch [SEC]           매 초마다 쿼리 실행

도움말
  \? [commands]          psql 역슬래시 명령어 설명
  \? options             psql 커멘드 라인 옵션 도움말 보기
  \? variables           psql 환경 설정 변수들에 설명 보기
  \h [NAME]              SQL 명령 구문 도움말, 모든 명령을 표시하려면 * 입력
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;psql 명령은 Windows의 경우 백 슬래시()에서 시작하는 것으로, 예를 들어 psql를 종료하고 PostgreSQL과의 연결을 끊을 때 사용하는 &lt;code&gt;\q&lt;/code&gt;도 psql 명령 중 하나이다 .&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\q
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# \q

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;psql 명령을 사용하여 생성된 데이터베이스 목록을 검색 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\l
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \l
postgres=# \l
                                      데이터베이스 목록
   이름    |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
-----------+----------+--------+------------------+------------------+-----------------------
 devkuma   | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 postgres  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 template0 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
 template1 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
(4개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결된 데이터베이스와 다른 데이터베이스에 연결할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\c devkuma
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \c devkuma
접속정보: 데이터베이스=&amp;#34;devkuma&amp;#34;, 사용자=&amp;#34;postgres&amp;#34;.
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;psql-명령-목록&#34;&gt;psql 명령 목록&lt;/h2&gt;
&lt;h3 id=&#34;일반&#34;&gt;일반:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\copyright&lt;/td&gt;
&lt;td&gt;PostgreSQL 사용법 및 저작권 정보 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\crosstabview [칼럼들]&lt;/td&gt;
&lt;td&gt;쿼리를 실행하고, 피봇 테이블 형태로 자료를 보여줌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\errverbose&lt;/td&gt;
&lt;td&gt;최대 자세히 보기 상태에서 최근 오류를 다 보여줌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\g [FILE] 또는 ;&lt;/td&gt;
&lt;td&gt;쿼리 실행(및 결과를 파일 또는| 파이프로 보냄)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\gdesc&lt;/td&gt;
&lt;td&gt;쿼리를 실행하지 않고 그 결과 칼럼과 자료형을 출력&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\gexec&lt;/td&gt;
&lt;td&gt;쿼리를 실행하고, 그 결과를 각각 실행 함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\gset [PREFIX]&lt;/td&gt;
&lt;td&gt;쿼리 실행 뒤 그 결과를 psql 변수로 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\gx [FILE]&lt;/td&gt;
&lt;td&gt;\g 명령과 같으나, 출력을 확장 모드로 강제함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\q&lt;/td&gt;
&lt;td&gt;psql 종료&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\watch [SEC]&lt;/td&gt;
&lt;td&gt;매 초마다 쿼리 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;도움말&#34;&gt;도움말:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;? [commands]&lt;/td&gt;
&lt;td&gt;psql 역슬래시 명령어 설명&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;? options&lt;/td&gt;
&lt;td&gt;psql 커멘드 라인 옵션 도움말 보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;? variables&lt;/td&gt;
&lt;td&gt;psql 환경 설정 변수들에 설명 보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\h [NAME]&lt;/td&gt;
&lt;td&gt;SQL 명령 구문 도움말, 모든 명령을 표시하려면 * 입력&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;쿼리-버퍼&#34;&gt;쿼리 버퍼:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\e [FILE] [LINE]&lt;/td&gt;
&lt;td&gt;외부 편집기로 쿼리 버퍼(또는 파일) 편집&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ef [FUNCNAME [LINE]]&lt;/td&gt;
&lt;td&gt;외부 편집기로 해당 함수 내용 편집&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ev [VIEWNAME [LINE]]&lt;/td&gt;
&lt;td&gt;외부 편집기로 해당 뷰 정의 편집&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\p&lt;/td&gt;
&lt;td&gt;쿼리 버퍼의 내용 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;쿼리 버퍼 초기화(모두 지움)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w FILE&lt;/td&gt;
&lt;td&gt;쿼리 버퍼를 파일에 기록&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;입력출력&#34;&gt;입력/출력:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\copy &amp;hellip;&lt;/td&gt;
&lt;td&gt;클라이언트 호스트에 있는 자료를 SQL COPY 명령 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\echo [STRING]&lt;/td&gt;
&lt;td&gt;문자열을 표준 출력에 기록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\i FILE&lt;/td&gt;
&lt;td&gt;파일에서 명령 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ir FILE&lt;/td&gt;
&lt;td&gt;\i 명령과 같으나, 경로가 현재 위치 기준 상대적&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\o [FILE]&lt;/td&gt;
&lt;td&gt;모든 쿼리 결과를 파일 또는 | 파이프로 보냄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\qecho [STRING]&lt;/td&gt;
&lt;td&gt;문자열을 쿼리 출력 스트림에 기록(\o 참조)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;조건문&#34;&gt;조건문:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\if EXPR&lt;/td&gt;
&lt;td&gt;조건문 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\elif EXPR&lt;/td&gt;
&lt;td&gt;else if 구문 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\else&lt;/td&gt;
&lt;td&gt;조건문의 그 외 조건&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\endif&lt;/td&gt;
&lt;td&gt;조건문 끝&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;정보보기&#34;&gt;정보보기:&lt;/h3&gt;
&lt;p&gt;(옵션: S = 시스템 개체 표시, + = 추가 상세 정보)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d[S+]&lt;/td&gt;
&lt;td&gt;테이블, 뷰 및 시퀀스 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d[S+]  NAME&lt;/td&gt;
&lt;td&gt;테이블, 뷰, 시퀀스 또는 인덱스 설명&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\da[S]  [PATTERN]&lt;/td&gt;
&lt;td&gt;집계 함수 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dA[+]  [PATTERN]&lt;/td&gt;
&lt;td&gt;접근 방법 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\db[+]  [PATTERN]&lt;/td&gt;
&lt;td&gt;테이블스페이스 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dc[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;문자셋 변환자 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dC[+]  [PATTERN]&lt;/td&gt;
&lt;td&gt;자료형 변환자 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dd[S]  [PATTERN]&lt;/td&gt;
&lt;td&gt;다른 곳에서는 볼 수 없는 객체 설명을 보여줌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dD[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;도메인 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ddp    [PATTERN]&lt;/td&gt;
&lt;td&gt;기본 접근권한 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dE[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;외부 테이블 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\det[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;외부 테이블 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\des[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;외부 서버 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\deu[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;사용자 매핑 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dew[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;외부 데이터 래퍼 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\df[anptw][S+] [PATRN]&lt;/td&gt;
&lt;td&gt;[agg/normal/procedures/trigger/window]  | 함수 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dF[+]  [PATTERN]&lt;/td&gt;
&lt;td&gt;텍스트 검색 구성 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dFd[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;텍스트 검색 사전 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dFp[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;텍스트 검색 파서 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dFt[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;텍스트 검색 템플릿 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dg[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;롤 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\di[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;인덱스 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dl&lt;/td&gt;
&lt;td&gt;큰 개체 목록, \lo_list 명령과 같음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dL[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;프로시져 언어 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dm[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;materialized 뷰 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dn[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;스키마 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\do[S]  [PATTERN]&lt;/td&gt;
&lt;td&gt;연산자 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dO[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;collation 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dp     [PATTERN]&lt;/td&gt;
&lt;td&gt;테이블, 뷰 및 시퀀스 액세스 권한 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dP[itn+] [PATTERN]&lt;/td&gt;
&lt;td&gt;파티션 릴레이션 목록 [인덱스/테이블만] [n=nested]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\drds [PATRN1 [PATRN2]]&lt;/td&gt;
&lt;td&gt;데이터베이스별 롤 설정 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dRp[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;복제 발행 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dRs[+] [PATTERN]&lt;/td&gt;
&lt;td&gt;복제 구독 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\ds[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;시퀀스 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dt[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;테이블 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dT[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;데이터 형식 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\du[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;롤 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dv[S+] [PATTERN]&lt;/td&gt;
&lt;td&gt;뷰 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dx[+]  [PATTERN]&lt;/td&gt;
&lt;td&gt;확장 모듈 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\dy     [PATTERN]&lt;/td&gt;
&lt;td&gt;이벤트 트리거 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\l[+]   [PATTERN]&lt;/td&gt;
&lt;td&gt;데이터베이스 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\sf[+]  함수이름&lt;/td&gt;
&lt;td&gt;함수 정의 보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\sv[+] 뷰이름&lt;/td&gt;
&lt;td&gt;뷰 정의 보기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;출력-형식&#34;&gt;출력 형식:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;정렬되지 않은 출력 모드와 정렬된 출력 모드 전환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\C [STRING]&lt;/td&gt;
&lt;td&gt;테이블 제목 설정 또는 값이 없는 경우 설정 안 함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f [STRING]&lt;/td&gt;
&lt;td&gt;unaligned 출력에 대해 필드 구분자 표시 또는 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\H&lt;/td&gt;
&lt;td&gt;HTML 출력 모드 전환(현재 off)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\pset [이름 [값]]&lt;/td&gt;
&lt;td&gt;테이블 출력 옵션 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(border|columns|csv_fieldsep|expanded|fieldsep|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fieldsep_zero|footer|format|linestyle|null|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;numericlocale|pager|pager_min_lines|recordsep|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;recordsep_zero|tableattr|title|tuples_only|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;unicode_border_linestyle|unicode_column_linestyle|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;unicode_header_linestyle)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t [on|off]&lt;/td&gt;
&lt;td&gt;행만 표시(현재 off)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\T [STRING]&lt;/td&gt;
&lt;td&gt;HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 태그 속성 설정 또는 비었는 경우 설정 안 함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\x [on|off|auto]&lt;/td&gt;
&lt;td&gt;확장된 출력 전환 (현재 off)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;연결&#34;&gt;연결:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo}&lt;/td&gt;
&lt;td&gt;새 데이터베이스에 접속 (현재 &amp;ldquo;postgres&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\conninfo&lt;/td&gt;
&lt;td&gt;현재 데이터베이스 접속 정보 보기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\encoding [ENCODING]&lt;/td&gt;
&lt;td&gt;클라이언트 인코딩 표시 또는 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\password [USERNAME&lt;/td&gt;
&lt;td&gt;사용자 암호를 안전하게 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;운영-체제&#34;&gt;운영 체제:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\cd [DIR]&lt;/td&gt;
&lt;td&gt;현재 작업 디렉터리 변경&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\setenv NAME [VALUE]&lt;/td&gt;
&lt;td&gt;환경 변수 지정 및 해제&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\timing [on|off]&lt;/td&gt;
&lt;td&gt;명령 실행 시간 전환(현재 off)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;! [COMMAND]&lt;/td&gt;
&lt;td&gt;셸 명령 실행 또는 대화식 셸 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;변수&#34;&gt;변수:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\prompt [TEXT] NAME&lt;/td&gt;
&lt;td&gt;사용자에게 내부 변수를 설정하라는 메시지 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\set [NAME [VALUE]]&lt;/td&gt;
&lt;td&gt;내부 변수 설정 또는 미지정 경우 모든 변수 목록 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\unset NAME&lt;/td&gt;
&lt;td&gt;내부 변수 설정 해제(삭제)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;큰-개체&#34;&gt;큰 개체:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\lo_export LOBOID FILE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\lo_import FILE [COMMENT]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\lo_list&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\lo_unlink LOBOID&lt;/td&gt;
&lt;td&gt;큰 개체 작업&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | psql을 사용하여 PostgreSQL에 연결 | psql에서 SQL 명령 실행</title>
      <link>https://www.devkuma.com/docs/postgresql/psql%EC%97%90%EC%84%9C-sql-%EB%AA%85%EB%A0%B9-%EC%8B%A4%ED%96%89/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/psql%EC%97%90%EC%84%9C-sql-%EB%AA%85%EB%A0%B9-%EC%8B%A4%ED%96%89/</guid>
      <description>
        
        
        &lt;p&gt;psql에서 SELECT 문이나 CREATE 문 등 SQL 명령을 실행하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;sql-명령을-실행하기&#34;&gt;SQL 명령을 실행하기&lt;/h2&gt;
&lt;p&gt;데이터베이스와 테이블을 만들거나 테이블에 저장된 데이터를 검색하거나 하려면 psql에서 SQL 명령을 실행해야 한다 (실제로는 SQL 명령이 서버로 전송되어 처리된다). SQL 명령을 실행하려면 먼저 명령 프롬프트를 시작하고 psql을 사용하여 PostgreSQL에 연결한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 프롬프트가 표시된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SQL 명령을 실행하려면 다음과 같이 입력한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# SQL문;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SQL 명령을 입력 할 때는 마지막에 세미콜론 (;)을 입력한 후 [Enter] 키를 누르면 SQL 명령이 실행된다. 세미콜론을 입력하기 전에 그냥 [Enter] 키를 눌러도 분할하여 입력을 하는 것만으로 실행되지 않는다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 새 데이터베이스를 만든다. 다음과 같이 입력 한 후에 [Enter] 키를 누른다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create database sample;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create database sample;
CREATE DATABASE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SQL 명령이 서버로 전송되어 처리되었다.&lt;/p&gt;
&lt;h2 id=&#34;sql-명령을-분할하여-입력하기&#34;&gt;SQL 명령을 분할하여 입력하기&lt;/h2&gt;
&lt;p&gt;SQL 명령이 긴 경우에는 분할하여 입력 할 수 있다. 그러면 실제로 해보도록 하자. 이번 예로 테이블을 만들 SQL 명령을 분할하여 입력 해 본다. 먼저 create 만 입력하고 [Enter] 키를 누른다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create
postgres-#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SQL 명령을 실행할 때 마지막에 세미콜론을 입력하고 Enter 키를 누른다. 세미콜론이 입력되기 전에 [Enter] 키를 누르면 입력이 분할 된 것으로 간주더;ㄴ다.&lt;/p&gt;
&lt;p&gt;분할된 입력을 할 때 프롬프트 표시가 &lt;code&gt;postgres=#&lt;/code&gt;에서 &lt;code&gt;postgres-#&lt;/code&gt;으로 바껴서 구별 할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;그럼 다음 table staff 입력하고 [Enter] 키를 누른다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create
postgres-# table staff
postgres-#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;마지막으로 &lt;code&gt;(id integer, name character varying (10));&lt;/code&gt; 입력하고 [Enter] 키를 누른요. 세미콜론 (;)이 입력된 후 [Enter] 키를 눌렸기 때문에 SQL 명령의 입력이 완료되었다고 판단되는 SQL 명령이 실행된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create
postgres-# table staff
postgres-# (id integer, name character varying(10));
CREATE TABLE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SQL 명령이 실행되어 새로운 테이블이 생성되었다.&lt;/p&gt;
&lt;p&gt;이렇게 긴 SQL 명령은 입력 도중 [Enter] 키를 누르면 분할하여 입력 할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;분할하여-입력하는-도중에-취소하기&#34;&gt;분할하여 입력하는 도중에 취소하기&lt;/h2&gt;
&lt;p&gt;SQL 명령을 분할하여 입력하고있을 때 중간에 SQL 명령의 입력을 취소하고자 하는 경우에는 psql 명령 &lt;code&gt;\r&lt;/code&gt;을 입력하고 Enter 키를 누른다.&lt;/p&gt;
&lt;p&gt;실제로 해보록 하자. &lt;code&gt;create table&lt;/code&gt;까지 입력하고 [Enter] 키를 누른다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create table
postgres-#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서 입력을 취소하기 위해 &lt;code&gt;\r&lt;/code&gt;을 입력하고 Enter 키를 누른다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create table
postgres-# \r
쿼리 버퍼 초기화 (비웠음).
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 SQL 명령의 입력이 취소된다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;psql에서 SQL 명령을 실행하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설정 파일</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에 관한 설정은 기본 설정을 위한 postgresql.conf 파일, 호스트 기반으로 연결 권한을 설정하는 pg_hba.conf 파일, OS 사용자 이름 및 데이터베이스 사용자 이름 매핑하는 pg_ident.conf 파일 이렇게 3개가 존재한다. 여기에서는 각각의 설정 파일 작성 방법에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설정 파일 | postgresql.conf 파일 설정 방법</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;p&gt;postgresql.conf 파일은 PostgreSQL에 대한 기본 설정하는 파일이다. 여기에서는 postgresql.conf 파일의 설정 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresqlconf-파일-위치&#34;&gt;postgresql.conf 파일 위치&lt;/h2&gt;
&lt;p&gt;postgresql.conf은 기본적으로 PostgreSQL을 설치한  data 디렉토리에 저장되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files\PostgreSQL\12\data&amp;gt;dir
 C 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: XXXX-XXXX

 C:\Program Files\PostgreSQL\12\data 디렉터리

2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          .
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          ..
2020-07-08  오전 12:28    &amp;lt;DIR&amp;gt;          base
2020-07-08  오전 12:00                45 current_logfiles
2020-07-08  오전 12:20    &amp;lt;DIR&amp;gt;          global
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          log
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_commit_ts
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_dynshmem
2020-03-10  오전 12:24             4,156 pg_hba.conf
2020-03-10  오전 12:24             1,678 pg_ident.conf
2020-07-08  오전 12:38    &amp;lt;DIR&amp;gt;          pg_logical
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_multixact
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_notify
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_replslot
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_serial
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_snapshots
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_stat
2020-07-08  오후 11:35    &amp;lt;DIR&amp;gt;          pg_stat_tmp
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_subtrans
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_tblspc
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_twophase
2020-03-10  오전 12:24                 3 PG_VERSION
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_wal
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_xact
2020-03-10  오전 12:24                90 postgresql.auto.conf
2020-03-10  오전 12:24            27,377 postgresql.conf &amp;lt;------------- 여기 저장되어 있다.
2020-07-07  오후 11:20                91 postmaster.opts
2020-07-07  오후 11:20                70 postmaster.pid
               8개 파일              33,510 바이트
              20개 디렉터리  424,537,530,368 바이트 남음

C:\Program Files\PostgreSQL\12\data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;postgresql.conf 파일은 텍스트 파일으로 되어 있어, 내용을 확인하거나 편집하려면 텍스트 편집기에서 파일을 열 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -----------------------------
# PostgreSQL configuration file
# -----------------------------
#
# This file consists of lines of the form:
#
#   name = value
#
# (The &amp;#34;=&amp;#34; is optional.)  Whitespace may be used.  Comments are introduced with
# &amp;#34;#&amp;#34; anywhere on a line.  The complete list of parameter names and allowed
# values can be found in the PostgreSQL documentation.
#
# The commented-out settings shown in this file represent the default values.
# Re-commenting a setting is NOT sufficient to revert it to the default value;
# you need to reload the server.
#
# This file is read on server startup and when the server receives a SIGHUP
# signal.  If you edit the file on a running system, you have to SIGHUP the
# server for the changes to take effect, run &amp;#34;pg_ctl reload&amp;#34;, or execute
# &amp;#34;SELECT pg_reload_conf()&amp;#34;.  Some parameters, which are marked below,
# require a server shutdown and restart to take effect.
#
# Any parameter can also be given as a command-line option to the server, e.g.,
# &amp;#34;postgres -c log_connections=on&amp;#34;.  Some parameters can be changed at run time
# with the &amp;#34;SET&amp;#34; SQL command.
#
# Memory units:  kB = kilobytes        Time units:  ms  = milliseconds
#                MB = megabytes                     s   = seconds
#                GB = gigabytes                     min = minutes
#                TB = terabytes                     h   = hours
#                                                   d   = days

... 이하 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;postgresqlconf-설정&#34;&gt;postgresql.conf 설정&lt;/h2&gt;
&lt;p&gt;각 항목은 &amp;ldquo;매개 변수 이름 = 설정 값&amp;rdquo; 형식으로 되어 있다. 예를 들어 postgresql.conf 파일을 보면 다음과 같은 내용을 볼 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# - Connection Settings -

listen_addresses = &amp;#39;*&amp;#39;		# what IP address(es) to listen on;
					# comma-separated list of addresses;
					# defaults to &amp;#39;localhost&amp;#39;; use &amp;#39;*&amp;#39; for all
					# (change requires restart)
port = 5432				# (change requires restart)
max_connections = 100			# (change requires restart)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;첫 번째 listen_addresses 매개 변수는 PostgreSQL에 대한 클라이언트의 연결을 허용 할 호스트와 IP 주소를 설정한다. 현재는 &lt;code&gt;&#39;*&#39;&lt;/code&gt;가 설정되어 있으며, 모든 클라이언트의 연결을 허용한다는 것을 뜻한다. (실제 어떤 데이터베이스에 연결을 허용할지 등의 자세한 설정은 pg_hba.conf 파일로 설정한다. 이 설정은 그 이전 단계이다.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 다음에 작성된 문장은 모두 주석으로 처리된다. 설정에 대한 주석을 작성하거나 파라메타에 대한 설정을 해제할 경우에 사용된다. 예를 들어 설정 파일을 보면 다음과 같은 내용이 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# - Authentication -

#authentication_timeout = 1min		# 1s-600s
#password_encryption = md5		# md5 or scram-sha-256
#db_user_namespace = off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;매개 변수에 대한 설명이 있지만 앞에 &lt;code&gt;#&lt;/code&gt;이 있기 때문에 현재는 주석이 되고 설정이 되어 있지 않는다. 매개 변수에 대한 설정을 할 경우 첫 번째 &lt;code&gt;#&lt;/code&gt;을 제거하고 필요에 따라 값을 변경하면 된다. (물론 &lt;code&gt;#&lt;/code&gt;이 붙은 문장은 그 상태로 처음부터 기술해도 상관 없다). 예를 들어, authentication_timeout 매개 변수에 대한 설정을 해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# - Authentication -

authentication_timeout = 1min		# 1s-600s
#password_encryption = md5		# md5 or scram-sha-256
#db_user_namespace = off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설정 내용을 변경하는 경우에는 PostgreSQL을  다시 시작 하지 않으면 설정 내용이 반영되지 않는 것과 바로 반영이 되는 것이 있다. 설정 파일 &lt;code&gt;(change requires restart)&lt;/code&gt;라고 작성되 있는 것은 다시 시작해야 한다.&lt;/p&gt;
&lt;p&gt;각각의 매개 변수에 대해서는 이후 설정이 필요할 때 설명하겠다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;postgresql.conf의 설정 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설정 파일 | pg_hba.conf 파일 설정 방법</title>
      <link>https://www.devkuma.com/docs/postgresql/pghba-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/pghba-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;p&gt;pg_hba.conf 파일은 PostgreSQL에 접속하는 클라이언트에 대한 인증 설정을 설명하는 파일이다. 여기에서는 pg_hba.conf 파일의 설정 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;pg_hbaconf-파일-위치&#34;&gt;pg_hba.conf 파일 위치&lt;/h2&gt;
&lt;p&gt;pg_hba.conf는 postgresql.conf와 마찬가지로 기본적으로 PostgreSQL을 설치한 data 디렉토리에 저장되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files\PostgreSQL\12\data&amp;gt;dir
 C 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: XXXX-XXXX

 C:\Program Files\PostgreSQL\12\data 디렉터리

2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          .
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          ..
2020-07-08  오전 12:28    &amp;lt;DIR&amp;gt;          base
2020-07-08  오전 12:00                45 current_logfiles
2020-07-08  오전 12:20    &amp;lt;DIR&amp;gt;          global
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          log
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_commit_ts
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_dynshmem
2020-03-10  오전 12:24             4,156 pg_hba.conf &amp;lt;------------- 여기 저장되어 있다.
2020-03-10  오전 12:24             1,678 pg_ident.conf
2020-07-08  오전 12:38    &amp;lt;DIR&amp;gt;          pg_logical
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_multixact
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_notify
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_replslot
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_serial
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_snapshots
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_stat
2020-07-08  오후 11:35    &amp;lt;DIR&amp;gt;          pg_stat_tmp
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_subtrans
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_tblspc
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_twophase
2020-03-10  오전 12:24                 3 PG_VERSION
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_wal
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_xact
2020-03-10  오전 12:24                90 postgresql.auto.conf
2020-03-10  오전 12:24            27,377 postgresql.conf
2020-07-07  오후 11:20                91 postmaster.opts
2020-07-07  오후 11:20                70 postmaster.pid
               8개 파일              33,510 바이트
              20개 디렉터리  424,537,530,368 바이트 남음

C:\Program Files\PostgreSQL\12\data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pg_hba.conf  파일은 텍스트 파일으로 되어 있어, 내용을 확인하거나 편집하려면 텍스트 편집기에서 파일을 열 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Refer to the &amp;#34;Client Authentication&amp;#34; section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
#
# local      DATABASE  USER  METHOD  [OPTIONS]
# host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
#
# (The uppercase items must be replaced by actual values.)
#
# The first field is the connection type: &amp;#34;local&amp;#34; is a Unix-domain
# socket, &amp;#34;host&amp;#34; is either a plain or SSL-encrypted TCP/IP socket,
# &amp;#34;hostssl&amp;#34; is an SSL-encrypted TCP/IP socket, and &amp;#34;hostnossl&amp;#34; is a
# plain TCP/IP socket.
#
# DATABASE can be &amp;#34;all&amp;#34;, &amp;#34;sameuser&amp;#34;, &amp;#34;samerole&amp;#34;, &amp;#34;replication&amp;#34;, a
# database name, or a comma-separated list thereof. The &amp;#34;all&amp;#34;

... 이하 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pg_hbaconf-설정&#34;&gt;pg_hba.conf 설정&lt;/h2&gt;
&lt;p&gt;pg_hba.conf 파일은 클라이언트의 주소와 역할 이름을 지정하고 모든 데이터베이스에 연결을 허용할지 여부를 설정하는데 사용한다. 현재 pg_hba.conf에 설정되어 있는 내용을 확인하면 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# TYPE  DATABASE        USER            ADDRESS                 METHOD

# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;한 줄에 하나의 설정으로 되어 있다. 예를 들어, 다음 설정에는 클라이언트의 IP 주소가 &lt;code&gt;127.0.0.1/32&lt;/code&gt;의 모든 역할에 대해 복제(replication)를 제외한 모든 데이터베이스에 인증 방식 md5를 사용하여 연결을 허용한다는 의미이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ &lt;code&gt;127.0.0.1/32&lt;/code&gt;하는 것은 로컬 루프백 주소라고 하는 주소에서 자신을 나타내는 IP 주소이다. 이 경우에는 PostgreSQL가 실행중인 서버의 IP 주소이다. localhost도 같은 의미로 사용된다. 또한 IPv6의 로컬 루프백 주소 &lt;code&gt;:: 1/128&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;그러면 설정하는 항목에 대해 하나 하나 살펴 보겠다.&lt;/p&gt;
&lt;p&gt;각 설정은 다음 형식 중 하나이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;local      DATABASE  USER  METHOD  [OPTIONS]
host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;TYPE은 local, host, hostssl, hostnossl 중 하나를 설정한다. local은 Unix 도메인 소켓을 사용하는 경우에 사용되는 것으로, 이번에는 Windows 환경이므로 사용하지 않는다. host, hostssl, hostnossl는 모두 TCP / IP를 사용하여 연결하는 경우에 사용하고 host를 지정한 경우 SSL 또는 비 SSL로 연결, hostssl를 사용하면 SSL로 연결, hostnossl 비 SSL로의 연결을 허용한다.&lt;/p&gt;
&lt;p&gt;DATABASE에 연결할 수 있는 데이터베이스 이름을 지정한다. 복수 지정하는 경우는 쉼표 (,)로 구분하여 작성한다. 또한 특수한 값으로 all을 지정했을 경우는 복제(replication)를 제외한 모든 데이터베이스를 의미하고 sameuser를 지정한 경우는 사용자 이름과 동일한 이름의 데이터베이스를 의미한다. 또한 samerole을 지정한 경우 연결하는 사용자가 연결하는 데이터베이스와 동일한 이름의 역할의 구성원이어야 한다. 다른 파일에 데이터베이스 이름의 목록을 작성하는 경우 &lt;code&gt;@파일 이름&lt;/code&gt; 형식으로 지정할 수도 있다.&lt;/p&gt;
&lt;p&gt;USER에 연결할 수 있는 역할 이름을 지정한다. 복수 지정하는 경우는 쉼표(,)로 구분하여 작성한다. 또한 특수한 값 all을 지정하면 모든 역할을 의미한다. 또한 역할 이름 앞에 &lt;code&gt;+&lt;/code&gt;를 붙이면 그룹으로 사용되고 있는 역할 이름을 의미한다. 이 경우 이 그룹으로 역할의 구성원이 역할에 연결이 허용된다. 다른 파일에 역할 이름의 목록을 작성하는 경우 &lt;code&gt;@파일 이름&lt;/code&gt; 형식으로 지정할 수도 있다.&lt;/p&gt;
&lt;p&gt;ADDRESS에 연결할 수 있는 호스트 이름 또는 IP 주소 범위를 지정한다. IP 주소는 IPv4에서 지정하는 경우 &lt;code&gt;172.20.143.0/24&lt;/code&gt;와 같은 형식으로 IPv6를 지정하는 경우는&lt;code&gt;fe80::7a31:c1ff:0000:0000/96&lt;/code&gt;와 같은 형식으로 지정한다. 그리고 특수한 값 all을 지정하면 모든 IP 주소를 의미하고 samehost로 지정한 경우는 PostgreSQL가 실행중인 서버와 동일한 IP 주소를 의미한다. samenet로 지정한 경우는 서버와 동일한 네트워크를 의미한다.&lt;/p&gt;
&lt;p&gt;ADDRESS에서 호스트 이름을 지정하는 경우는 blog.devkuma.com처럼 별도의 호스트 이름을 지정한다. 그리고 .devkuma.com과 같이 지정한 경우 devkuma.com의 모든 호스트 (blog.example.com 등)을 의미한다.&lt;/p&gt;
&lt;p&gt;METHOD에는 인증 방법을 지정한다. 설정 값과 인증 방식은 다음을 참조한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;설정값&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;trust&lt;/td&gt;
&lt;td&gt;모든 역할 이름에 암호없이 연결 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reject&lt;/td&gt;
&lt;td&gt;연결을 거부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scram-sha-256&lt;/td&gt;
&lt;td&gt;암호 인증 가장 안전하지만 일부 클라이언트에서 지원되지 않음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;md5&lt;/td&gt;
&lt;td&gt;암호 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;암호 인증 암호를 평문으로 전송&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gss&lt;/td&gt;
&lt;td&gt;GSSAPI를 이용한 싱글 사인온&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sspi&lt;/td&gt;
&lt;td&gt;SSPI를 이용한 싱글 사인온&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ident&lt;/td&gt;
&lt;td&gt;Ident 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;peer&lt;/td&gt;
&lt;td&gt;Peer 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ldap&lt;/td&gt;
&lt;td&gt;LDAP 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;radius&lt;/td&gt;
&lt;td&gt;RADIUS 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cert SSL&lt;/td&gt;
&lt;td&gt;클라이언트 인증서를 사용한 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pam&lt;/td&gt;
&lt;td&gt;PAM 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bsd&lt;/td&gt;
&lt;td&gt;BSD 인증&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;예를 들어 192.168.1.0/24 네트워크에서 데이터베이스 mydb에 대한 연결을 사용자 devkuma에 대해 인증 방식 md5에서 허용하는 경우는 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;host mydb devkuma 192.168.1.0/24 md5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 pg_hba.conf 파일에서의 설정 내용에 관계없이 postgresql.conf 파일의 listen_addresses 매개 변수로 클라이언트의 IP 주소 또는 호스트가 PostgreSQL에 접속을 허용하지 않으면 연결할 수 없다. &amp;ldquo;postgresql.conf 설정&amp;quot;을 참조한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 시습을 해보자. 현재 클라이언트의 IP 주소가 서버와 동일한 IP 주소 상황에서 postgres 역할에 대해 mydb 데이터베이스에 대한 액세스를 허용해 본다.  pg_hba.conf에서 설정되어 기존 내용은 주석으로 처리하고 다음 줄을 추가하였다. 설정 파일의 저장이 끝나면 일단 PostgreSQL을 다시 시작한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# TYPE  DATABASE        USER            ADDRESS                 METHOD

# IPv4 local connections:
# host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
# host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
# host    replication     all             127.0.0.1/32            md5
# host    replication     all             ::1/128                 md5

host    mydb            postgres        ::1/128            md5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;먼저 연결을 허용하는 설정했던 mydb 데이터베이스에 연결을 해본다. 명령 프롬프트를 시작하고 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -U postgres -d mydb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;사용자 암호 입력하도록 나오고, postgres 역할의 암호를 입력하면 연결이 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres -d mydb
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

mydb=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;일단 PostgreSQL 접속을 종료하고, 이번에는 postgres 데이터베이스에 연결을 시도하기 위해 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -U postgres -d postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 오류가 표시되어 연결에 실패한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt;psql -U postgres -d postgres
psql: 오류: 서버 접속 실패: 치명적오류:  호스트 &amp;#34;::1&amp;#34;, 사용자 &amp;#34;postgres&amp;#34;, 데이터베이스 &amp;#34;postgres&amp;#34;, SSL 중지 연결에 대한 설정이 pg_hba.conf 파일에 없습니다.

C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;따라서 pg_hba.conf 파일에서 연결을 허용하여 데이터베이스에 연결이 가능하지만, 허가를 하지 않은 데이터베이스에 연결하려고 하면 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;pg_hba.conf의 설정 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 설정 파일 | pg_ident.conf 파일 설정 방법</title>
      <link>https://www.devkuma.com/docs/postgresql/pgident-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/pgident-conf-%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;p&gt;pg_ident.conf 파일은 클라이언트의 인증 방식으로 Ident 인증을 사용하는 경우, ident 사용자 이름을 PostgreSQL의 역할 이름에 매핑하는데 사용하는 파일이다. 여기에서는 pg_ident.conf 파일의 설정 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;pg_identconf-파일-위치&#34;&gt;pg_ident.conf 파일 위치&lt;/h2&gt;
&lt;p&gt;pg_ident.conf는 postgresql.conf와 마찬가지로 기본적으로 PostgreSQL을 설치한 data 디렉토리에 저장되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files\PostgreSQL\12\data&amp;gt;dir
 C 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: XXXX-XXXX

 C:\Program Files\PostgreSQL\12\data 디렉터리

2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          .
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          ..
2020-07-08  오전 12:28    &amp;lt;DIR&amp;gt;          base
2020-07-08  오전 12:00                45 current_logfiles
2020-07-08  오전 12:20    &amp;lt;DIR&amp;gt;          global
2020-07-08  오전 12:00    &amp;lt;DIR&amp;gt;          log
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_commit_ts
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_dynshmem
2020-03-10  오전 12:24             4,156 pg_hba.conf
2020-03-10  오전 12:24             1,678 pg_ident.conf &amp;lt;------------- 여기 저장되어 있다.
2020-07-08  오전 12:38    &amp;lt;DIR&amp;gt;          pg_logical
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_multixact
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_notify
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_replslot
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_serial
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_snapshots
2020-07-07  오후 11:20    &amp;lt;DIR&amp;gt;          pg_stat
2020-07-08  오후 11:35    &amp;lt;DIR&amp;gt;          pg_stat_tmp
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_subtrans
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_tblspc
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_twophase
2020-03-10  오전 12:24                 3 PG_VERSION
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_wal
2020-03-10  오전 12:24    &amp;lt;DIR&amp;gt;          pg_xact
2020-03-10  오전 12:24                90 postgresql.auto.conf
2020-03-10  오전 12:24            27,377 postgresql.conf
2020-07-07  오후 11:20                91 postmaster.opts
2020-07-07  오후 11:20                70 postmaster.pid
               8개 파일              33,510 바이트
              20개 디렉터리  424,537,530,368 바이트 남음

C:\Program Files\PostgreSQL\12\data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pg_ident.conf 파일은 텍스트 파일으로 되어 있어, 내용을 확인하거나 편집하려면 텍스트 편집기에서 파일을 열 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# PostgreSQL User Name Maps
# =========================
#
# Refer to the PostgreSQL documentation, chapter &amp;#34;Client
# Authentication&amp;#34; for a complete description.  A short synopsis
# follows.
#
# This file controls PostgreSQL user name mapping.  It maps external
# user names to their corresponding PostgreSQL user names.  Records
# are of the form:
#
# MAPNAME  SYSTEM-USERNAME  PG-USERNAME
#
# (The uppercase quantities must be replaced by actual values.)
#
# MAPNAME is the (otherwise freely chosen) map name that was used in
# pg_hba.conf.  SYSTEM-USERNAME is the detected user name of the
# client.  PG-USERNAME is the requested PostgreSQL user name.  The
# existence of a record specifies that SYSTEM-USERNAME may connect as
# PG-USERNAME.
#
# If SYSTEM-USERNAME starts with a slash (/), it will be treated as a
# regular expression.  Optionally this can contain a capture (a
# parenthesized subexpression).  The substring matching the capture
# will be substituted for \1 (backslash-one) if present in
# PG-USERNAME.

... 이하 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pg_identconf-설정&#34;&gt;pg_ident.conf 설정&lt;/h2&gt;
&lt;p&gt;pg_ident.conf 파일의 마지막 부분을 보면 다음과 같은 부분이 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Put your actual configuration here
# ----------------------------------

# MAPNAME       SYSTEM-USERNAME         PG-USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재는 아무것도 설정이 추가되지 않은 상태이다. 매핑을 추가하는 경우 MAPNAME에 매핑에 대한 임의의 이름을 설정하고 SYSTEM-USERNAME에 ident 사용자 이름, 그리고 PG-USERNAME에 PostgreSQL의 역할 이름을 지정한다. 예를 들어 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Put your actual configuration here
# ----------------------------------

# MAPNAME       SYSTEM-USERNAME         PG-USERNAME
mymap           kim                   kc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 &amp;ldquo;pg_hba.conf 파일의 설정 방법&amp;quot;에 작성된 pg_hba.conf 파일에 다음과 같은 작성한다.&lt;/p&gt;
&lt;p&gt;방금 매핑을 추가할 때 지정한 MAPNAME를 지정하고 있다.&lt;/p&gt;
&lt;p&gt;이제 ident에서 kim로 인증 된 사용자가 kc로 PostgreSQL에 접속이 허용된다.&lt;/p&gt;
&lt;p&gt;단지 내 환경에서 직접 테스트 할 수 없었기 때문에 올바르게 설정되어 있는지 확인할 수 없다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;pg_ident.conf 설정 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성</title>
      <link>https://www.devkuma.com/docs/postgresql/postgresql-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%84%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/postgresql-%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL를 이용하는데있어서 숫자 나 문자열의 작성 방법 등 기본적인 구문에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 문자열이나 숫자 값을 입력하는 방법</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%B4%EB%82%98-%EC%88%AB%EC%9E%90-%EA%B0%92%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%B4%EB%82%98-%EC%88%AB%EC%9E%90-%EA%B0%92%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/</guid>
      <description>
        
        
        &lt;h3 id=&#34;문자열-상수의-입력-방법&#34;&gt;문자열 상수의 입력 방법&lt;/h3&gt;
&lt;p&gt;문자열 작성은 작은 따옴표 (&amp;rsquo;)로 묶어 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#39;문자열&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자열에서 작은 따옴표를 넣으로면 2개의 작은 따옴표를 연속으로 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select &amp;#39;My father&amp;#39;&amp;#39;s car&amp;#39;;
    ?column?
-----------------
 My father&amp;#39;s car
(1개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자열 중에 특별히 취급해야하는 문자는 작은 따옴표를 문자로 작성하면 된다. \ 등은 그대로 문자로 처리된다.&lt;/p&gt;
&lt;p&gt;문자열은 줄 바꿈(빈칸)을 사이에 두고 이어서 작성하게 되면 하나의 문자열로 처리된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select &amp;#39;Hello&amp;#39;
devkuma-# &amp;#39;World&amp;#39;;
  ?column?
------------
 HelloWorld
(1개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자열 &amp;lsquo;Hello&amp;rsquo;와 문자열 &amp;lsquo;World&amp;rsquo;는 줄 바꿈을 사이에 두고 나뉘어져 있지만 하나의 문자열로 처리된다.&lt;/p&gt;
&lt;h2 id=&#34;이스케이프-문자열&#34;&gt;이스케이프 문자열&lt;/h2&gt;
&lt;p&gt;키보드에서 입력할 수 없는 문자를 문자열에 표시하려는 경우 또는 특별한 문자를 입력하려면, PostgreSQL에서는 이스케이프 문자열을 사용한다. 이스케이프 문자열은 작은 따옴표 앞에 E 또는 e를 넣는다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;E&amp;#39;문자열&amp;#39;
e&amp;#39;문자열&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이스케이프 문자열 중에서는 다음과 같은 특수 문자를 입력할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\b      백스페이스 문자
\f      페이지 나누기
\n      개행
\r      캐리지 리턴
\t      탭 문자
\o      8진수 바이트 값
\xh     16 진수 바이트 값
\uxxxx  16 또는 32 비트의 16 진수 Unicode 문자 값
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이스케이프 문자열에서 &lt;code&gt;\&lt;/code&gt;을 문자로 사용하는 경우 &lt;code&gt;\\&lt;/code&gt;와 같이 2개의 이어서 작성한다. 또한 작은 따옴표를 문자로 작성하는 경우 일반 문자열처럼 &lt;code&gt;&#39;&#39;&lt;/code&gt;와 같이 2개를 이이서 작성하는 이외에 &lt;code&gt;\&#39;&lt;/code&gt;로도 작성할 수 있다.&lt;/p&gt;
&lt;p&gt;아래에서 탭 문자를 포함해서 표시하고 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# select e&amp;#39;문자\t열&amp;#39;;
  ?column?
------------
 문자    열
(1개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;숫자-상수-입력-방법&#34;&gt;숫자 상수 입력 방법&lt;/h2&gt;
&lt;p&gt;수를 작성하는 경우 그대로 수를 작성하면 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;7
105
3.512
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;소수점을 작성하는 경우, 전후에 적어도 1개의 수가 필요하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.552
8.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;지수 기호 e를 사용하여 작성할 수도 있다. 그런 경우는 적어도 1개의 e의 뒤에 숫자가 필요하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8e5
1.41e-3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;숫자 앞에 + 또는 -를 선택한 경우 + 또는 - 숫자의 일부가 아닌 연산자로 처리된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-42
+602
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;비트-문자열-상수의-입력-방법&#34;&gt;비트 문자열 상수의 입력 방법&lt;/h2&gt;
&lt;p&gt;비트 문자열 상수를 작성하는 경우 일반 문자열 앞에 B 또는 b를 작성한다. 문자열로 사용할 수 있는 문자는 0 또는 1뿐이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;B&amp;#39;01 &amp;#39;
b&amp;#39;1001 &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2진수 대신 16진수 표기로 작성할 수 있다. 일반 문자열 앞에 X 또는 x를 넣는다. 문자열로 사용할 수 있는 문자는 0에서 9 및 A ~ F이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;X&amp;#39;3F &amp;#39;
x&amp;#39;A37E &amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;PostgreSQL에서 문자열이나 숫자 등의 값을 입력 할 경우 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 식별자와 키워드</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8B%9D%EB%B3%84%EC%9E%90%EC%99%80-%ED%82%A4%EC%9B%8C%EB%93%9C/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8B%9D%EB%B3%84%EC%9E%90%EC%99%80-%ED%82%A4%EC%9B%8C%EB%93%9C/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL의 식별자와 키워드에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;식별자와-키워드&#34;&gt;식별자와 키워드&lt;/h2&gt;
&lt;p&gt;예를 들어, 다음과 같이 SQL 명령을 예로 살펴 보겠다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MYTBL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때 SELECT와 FROM 같이 SQL에서 의미를 가지고 있는 단어는 키워드라고 하고, 테이블 이름에 사용되는 MYTBL은 식별자라고 한다.&lt;/p&gt;
&lt;p&gt;키워드는 따옴표를 붙이지 않는 경우는 식별자로 사용할 수 없다. 예를 들어, 테이블명으로 키워드 SELECT를 사용하여 테이블을 만들려고 하면 오류가 발생한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create table select (id integer);
오류:  구문 오류, &amp;#34;select&amp;#34; 부근
줄 1: create table select (id integer);
                   ^
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;식별자와 키워드는 인용 식별자 이외는 대소 문자를 구분하지 않는다. 그러기에 다음 두 SQL 명령은 같은 의미이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SELECT * FROM MYTBL;
select * from mytbl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;식별자와 키워드는 첫 번째 문자는 문자 또는 밑줄(&lt;code&gt;_&lt;/code&gt;)로 시작하고, 두번째 이후는 문자는 문자, 밑줄, 숫자, 달러 기호 ($)를 사용할 수 있다. 단지 식별자에 달러 기호는 사용할 수 없는 데이터베이스도 있으므로 자주 사용하지 않는 것이 좋다.&lt;/p&gt;
&lt;h2 id=&#34;인용따옴표-식별자&#34;&gt;인용(따옴표) 식별자&lt;/h2&gt;
&lt;p&gt;SELECT 또는 UPDATE 등 SQL로 의미를 가진 단어는 키워드로 PostgreSQL에 등록되어 있다. 키워드는 식별자는 기본적으로 사용할 수 없다. 단지 키워드와 일반적 사용할 수 없는 공백을 포함한 값은 인용함으로써 식별자로 데이터베이스 이름과 테이블 이름에 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;인용 식별자 사용하려면 문자열을 큰 따옴표 (&lt;code&gt;&amp;quot;&lt;/code&gt;)로 둘러 쌓아야 한다. 예를 들어, 테이블 이름으로 키워드 SELECT를 사용하여 테이블을 만들려면 다음과 같이 인용 식별자를 사용한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create table &amp;#34;select&amp;#34;(id integer);
CREATE TABLE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 오류가 발생하지 않고 테이블을 만들 수 있었다. 여기서 테이블 이름은 SELECT 대신 &amp;ldquo;SELECT&amp;quot;으로 한 점이 앞에서와는 달랐다.&lt;/p&gt;
&lt;p&gt;인용 식별자으로는 어떤 문자도 포함할 수 있다. 큰 따옴표 자신을 문자로 사용하는 경우는 2개 겹쳐서 (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) 작성한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql로-등록-된-키워드-목록&#34;&gt;PostgreSQL로 등록 된 키워드 목록&lt;/h2&gt;
&lt;p&gt;PostgreSQL로 등록되어 있는 키워드는 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALL
ANALYSE
ANALYZE
AND
ANY
ARRAY
AS
ASC
ASYMMETRIC
AUTHORIZATION (함수 또는 형식으로 사용 가능)
BINARY (함수 또는 형식으로 사용 가능)
BOTH
CASE
CAST
CHECK
COLLATE
COLLATION (함수 또는 형식으로 사용 가능)
COLUMN
CONCURRENTLY (함수 또는 형식으로 사용 가능)
CONSTRAINT
CREATE
CROSS (함수 또는 형식으로 사용 가능)
CURRENT_CATALOG
CURRENT_DATE
CURRENT_ROLE
CURRENT_SCHEMA (함수 또는 형식으로 사용 가능)
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_USER
DEFAULT
DEFERRABLE
DESC
DISTINCT
DO
ELSE
END
EXCEPT
FALSE
FETCH
FOR
FOREIGN
FREEZE (함수 또는 형식으로 사용 가능)
FROM
FULL (함수 또는 형식으로 사용 가능)
GLOBAL
GRANT
GROUP
HAVING
ILIKE (함수 또는 형식으로 사용 가능)
IN
INLINE
INNER (함수 또는 형식으로 사용 가능)
INTERSECT
INTO
IS (함수 또는 형식으로 사용 가능)
ISNULL (함수 또는 형식으로 사용 가능)
LATERAL
LEFT (함수 또는 형식으로 사용 가능)
LIKE (함수 또는 형식으로 사용 가능)
LIMIT
LOCALTIME
LOCALTIMESTAMP
NATURAL (함수 또는 형식으로 사용 가능)
NOT
NOTNULL (함수 또는 형식으로 사용 가능)
NULL
OFFSET
ON
ONLY
OR
ORDER
OUTER (함수 또는 형식으로 사용 가능)
OVERLAPS (함수 또는 형식으로 사용 가능)
PLACING
PRIMARY
REFERENCES
RETURNING
RIGHT (함수 또는 형식으로 사용 가능)
SELECT
SESSION_USER
SIMILAR (함수 또는 형식으로 사용 가능)
SOME
SYMMETRIC
TABLE
TABLESAMPLE (함수 또는 형식으로 사용 가능)
THEN
TO
TRAILING
TRUE
UNION
UNIQUE
USER
USING
VARIADIC
VERBOSE (함수 또는 형식으로 사용 가능)
WHEN
WHERE
WINDOW
WITH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL의 식별자와 키워드에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 주석(comment) 작성</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%A3%BC%EC%84%9D-comment-%EC%9E%91%EC%84%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%A3%BC%EC%84%9D-comment-%EC%9E%91%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL로 SQL을 작성 할 때 주석을 작성하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;주석을-작성하는-방법&#34;&gt;주석을 작성하는 방법&lt;/h2&gt;
&lt;p&gt;SQL 문을 작성할 때, 주석을 하고자하는 경우에는 하이픈을 두개 연속해서 작성(&lt;code&gt;--&lt;/code&gt;) 한 곳에서 문장의 끝까지가 주석이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-- 한줄이 주석이다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고, 여러 줄의 코멘트를 작성하려면 &lt;code&gt;/*&lt;/code&gt;에서 &lt;code&gt;*/&lt;/code&gt;까지의 부분을 주석이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/* 여기에서부터 주석이다.
여러 줄의 주석이 가능하다.
*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;주석은 실행이 되면 완전히 무시가 되어서 psql을 커멘드 라인 기반에서 SQL 명령을 실행하면 주석 부분은 아무 의미가 없지만, 다른 파일에 SQL 명령을 작성 두었다가 파일을 로드하고 실행하는 경우 등에 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도로 하자. 텍스트 편집기를 열고 다음과 같이 작성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*
테이블 생성 및 데이터 추가
2020/10/26
*/

-- 테이블 만들기
create table friends (id integer, name varchar (10));

-- 데이터 추가
insert into friends values (1, &amp;#39;kimkc&amp;#39;);
insert into friends values (2, &amp;#39;hwang.yh&amp;#39;);
insert into friends values (5, &amp;#39;lim.yt&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;작성한 파일을 이번에는 test.sql라는 이름으로 &lt;code&gt;c:\dev&lt;/code&gt; 디렉토리에 저장한다.&lt;/p&gt;
&lt;p&gt;현재 psql의 문자 코드를 확인하면 UHC로 되어 있으므로, 파일 문자 코드은 EUC_KR로 저장한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \encoding
UHC
postgres=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 psql을 사용하여 PostgreSQL의 mydb 데이터베이스에 연결한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres -d mydb
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;저장된 파일을 로드하고 실행하려면 psql 명령어로  &lt;code&gt;\i&lt;/code&gt;를 사용하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# \i c:/dev/test.sql
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;파일에 작성한 코멘트 부분은 무시되고 그 이외의 부분이 성공적으로 실행되었다. 확인을 위해 psql에서 다음과 같이 SQL 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select * from friends;
 id |   name
----+----------
  1 | kimkc
  2 | hwang.yh
  5 | lim.yt
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;테이블에 작성되어 있고, 데이터가 3건 추가되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL로 주석을  작성하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 논리 연산자 사용(AND, OR, NOT)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9-and-or-not/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9-and-or-not/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서는 논리 연산자로 AND, OR, NOT의 세 가지가 준비되어 있다. 여기에서는 논리 연산자의 사용법에 대해 설명한다.&lt;/p&gt;
&lt;p&gt;※ PostgreSQL에서 참이거나 거짓을 나타내는 값이 무엇인가에 대해서는 &amp;ldquo;&lt;a href=&#34;https://www.devkuma.com/books/pages/1447&#34;&gt;논리 값 데이터 형식(boolean)&lt;/a&gt;&amp;ldquo;을 참조하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;논리곱-and&#34;&gt;논리곱 (AND)&lt;/h2&gt;
&lt;p&gt;AND는 논리곱이다. 좌변과 우변이 TRUE, FALSE, NULL이었을 때,  어떻게 판단되는지는 다음 목록을 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TRUE   AND  TRUE   -&amp;gt; TRUE
TRUE   AND  FALSE  -&amp;gt; FALSE
TRUE   AND  NULL   -&amp;gt; NULL
FALSE  AND  FALSE  -&amp;gt; FALSE
FALSE  AND  NULL   -&amp;gt; FALSE
NULL   AND  NULL   -&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;전체 표현식이 TRUE가 되는 것은 좌변과 우변이 모두 TRUE 인 경우 뿐이다. 또한 &lt;code&gt;TRUE AND NULL&lt;/code&gt;이 &lt;code&gt;NULL&lt;/code&gt;인데 비해 &lt;code&gt;FALSE AND NULL&lt;/code&gt;은 &lt;code&gt;FALSE&lt;/code&gt;가 되는 점에 주의한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음과 같은 테스트 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table test(flag1 boolean,  flag2 boolean);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 데이터를 테이블에 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into test values (TRUE, TRUE), (TRUE, FALSE), (TRUE, NULL), (FALSE, FALSE), (FALSE, NULL), (NULL, NULL);
INSERT 0 6
mydb=# select * from test;
 flag1 | flag2
-------+-------
 t     | t
 t     | f
 t     |
 f     | f
 f     |
       |
(6개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러고 SELECT 명령을 사용하여 논리곱으로 좌변과 우변의 값에 의해 전체가 어떻게 판단되는지를 해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select flag1, flag2, flag1 and flag2 as &amp;#34;flag1 and flag2&amp;#34; from test;
 flag1 | flag2 | flag1 and flag2
-------+-------+-----------------
 t     | t     | t
 t     | f     | f
 t     |       |
 f     | f     | f
 f     |       | f
       |       |
(6개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 좌변과 우변의 값에 의해 논리곱 결과가 어떻게 되지는 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;논리합or&#34;&gt;논리합(OR)&lt;/h2&gt;
&lt;p&gt;OR은 논리합입니다. 좌변과 우변이 TRUE, FALSE, NULL이었을 때,  어떻게 판단되는지는 다음 목록을 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TRUE   OR  TRUE   -&amp;gt; TRUE
TRUE   OR  FALSE  -&amp;gt; TRUE
TRUE   OR  NULL   -&amp;gt; TRUE
FALSE  OR  FALSE  -&amp;gt; FALSE
FALSE  OR  NULL   -&amp;gt; NULL
NULL   OR  NULL   -&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;좌변과 우변의 적어도 어느 하나가 TRUE 인 경우 전체 표현식이 TRUE이다. 또한 &lt;code&gt;TRUE OR NULL&lt;/code&gt;이 &lt;code&gt;TRUE&lt;/code&gt; 인 반면 &lt;code&gt;FALSE AND NULL&lt;/code&gt;은 &lt;code&gt;NULL&lt;/code&gt;이 되는 점에주의한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음의 같이 논리곱으로 사용한 테이블을 그대로 사용하여 SELECT 명령을 사용하여 논리합의 좌변과 우변에 의해 어떻게 판단되는지 해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select flag1, flag2, flag1 or flag2 as &amp;#34;flag1 or flag2&amp;#34; from test;
 flag1 | flag2 | flag1 or flag2
-------+-------+----------------
 t     | t     | t
 t     | f     | t
 t     |       | t
 f     | f     | f
 f     |       |
       |       |
(6개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 좌변과 우변의 값에 의해 논리합 결과가 어떻게 되지는 알 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;부정-not&#34;&gt;부정 (NOT)&lt;/h2&gt;
&lt;p&gt;NOT 연산자는 부정이다. 우변이 TRUE, FALSE, NULL이었을 때,  어떻게 판단되는지는 다음 목록을 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NOT  TRUE   -&amp;gt; FALSE
NOT  FALSE  -&amp;gt; TRUE
NOT  NULL   -&amp;gt; NULL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;우변이 TRUE이면 FALSE가 되고, 우변이 FALSE이면 TRUE가 된다. 또한 NOT NULL은 NULL이 된다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음과 같은 테스트 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table test2( flag boolean);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 데이터를 테이블에 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into test2 values (TRUE),(FALSE),(NULL);
INSERT 0 3
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 SELECT 명령을 사용하여 부정의 우변의 값에 의해 결과가 어떻게 판단되는지를 해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select flag, not flag as &amp;#34;not flag&amp;#34; from test2;
 flag | not flag
------+----------
 t    | f
 f    | t
      |
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이것으로 우변의 값에 의해 부정의 결과가 어떻게 되지는 알 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL에서 제공되는 논리 연산자의 사용법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 비교 연산자 사용 (&lt;, &gt;, =, BETWEEN, IS NULL)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;비교 연산자는 두 값을 비교하여 크거나 작거나 같은지 다른지 등의 비교 판단을 한다. 여기에서 비교 연산자의 사용법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;크거나-작거나-같은지-비교&#34;&gt;크거나 작거나 같은지 비교&lt;/h2&gt;
&lt;p&gt;비교 연산자는 왼쪽과 오른쪽을 비교하여 결과로서 boolean 형의 값을 돌려준다.&lt;/p&gt;
&lt;p&gt;크기를 비교하는 비교 연산자 &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;  이렇게 4가지가 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;    왼쪽은 오른쪽보다 작다
&amp;gt;    외쪽이 오른쪽보다 크다
&amp;lt;=   왼쪽은 오른쪽보다 작거나 같다
&amp;gt;=   왼쪽은 오른쪽보다 크거나 같다
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;같은지에 대한 비교 연산자 &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;  이렇게 3가지가 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;=    왼쪽과 오른쪽은 동일하다
&amp;lt;&amp;gt;   왼쪽과 오른쪽은 동일하지 않다
!=   왼쪽과 오른쪽은 동일하지 않다
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음과 같은 테스트 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table customer(name varchar(10),  old integer);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 데이터를 테이블에 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into customer values  ( &amp;#39;kimkc&amp;#39;, 41),  ( &amp;#39;devkuma&amp;#39;, 20),  ( &amp;#39;yunho&amp;#39;, 32),  ( &amp;#39;yongtea&amp;#39;, 34),  ( &amp;#39;jiwoo&amp;#39;, 12);
INSERT 0 5
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러고 SELECT 명령을 사용하여 old 컬럼의 값이 20보다 크거나 작거나, 아니면 같은지에 대해 알아 보겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select name, old,
mydb-#   old &amp;lt;20 as &amp;#34;20보다 작다&amp;#34;,
mydb-#   old &amp;gt; 20 as &amp;#34;20보다 크다&amp;#34;,
mydb-#   old = 20 as &amp;#34;20와 같다.&amp;#34;
mydb-# from customer;
  name   | old | 20보다 작다 | 20보다 크다 | 20와 같다.
---------+-----+-------------+-------------+------------
 kimkc   |  41 | f           | t           | f
 devkuma |  20 | f           | f           | t
 yunho   |  32 | f           | t           | f
 yongtea |  34 | f           | t           | f
 jiwoo   |  12 | t           | f           | f
(5개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비교 연산자를 사용하여 컬럼에 저장되는 값을 평가한 결과를 가져 왔다.&lt;/p&gt;
&lt;h3 id=&#34;범위-내에-있는지-비교-between&#34;&gt;범위 내에 있는지 비교 (BETWEEN)&lt;/h3&gt;
&lt;p&gt;between 조건은 비교 대상의 값이 지정된 범위 내에 있는지 여부를 비교하고 결과로서 boolean 형의 값을 반환한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a BETWEEN x AND y       x 이상 y 이하의 범위에 있다
a NOT BETWEEN x AND y   x 이상 y 이하의 범위에 없다
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비교 대상 값 a가 x 이상이고  y 이하이면 TRUE이다. NOT이 있다면  x 이상이고 y 이하가 아닌 경우 TRUE이다.&lt;/p&gt;
&lt;p&gt;between 조건은 비교 연산자와 논리 연산자를 사용하여 다음과 같이 작성할 수 있다. 아래 2개 식는 같은 의미이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a &amp;gt;= x AND a &amp;lt;= y
a BETWEEN x AND y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한 not between 조건도 비교 연산자와 논리 연산자를 사용하여 다음과 같이 작성할 수 있다. 아래 2개 식는 같은 의미이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a &amp;lt;x OR a&amp;gt; y
a NOT BETWEEN x AND y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;a BETWEEN x AND y&lt;/code&gt;와 같이 지정한 경우에 x가 y보다 큰 값이 지정되면,  x 이상 y 이하의 값은 존재하지 않기 때문에 항상 FALSE이다. SYMMETRIC을 지정하면 x와 y의 값을 정렬하여, 작은 값에서 큰 값의 범위 내에 있는지를 판단한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a BETWEEN SYMMETRIC x AND y
a NOT BETWEEN SYMMETRIC x AND y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비교 대상 값인 a가 x 또는 y의 작은 값에서 큰 값의 범위 내에 있으면 TRUE이다. NOT을 가진 경우는 반대가 된다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 앞에서 작성한 customer 테이블에 대해 old 컬럼의 값이 15에서 25의 범위 내에 있는지 확인한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select name, old,
mydb-#   old between 15 and 33 as &amp;#34;15 이상 33 이하&amp;#34;
mydb-# from customer;
  name   | old | 15 이상 33 이하
---------+-----+-----------------
 kimkc   |  41 | f
 devkuma |  20 | t
 yunho   |  32 | t
 yongtea |  34 | f
 jiwoo   |  12 | f
(5개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;지정한 범위 내에 있는 경우는 TRUE, 그렇지 같은 경우는 FALSE가 되었다.&lt;/p&gt;
&lt;p&gt;다음 between 조건의 범위를 나타내는 숫자를 바꿔보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select name, old,
mydb-#   old between 33 and 15 as &amp;#34;33 이상 15 이하&amp;#34;
mydb-# from customer;
  name   | old | 33 이상 15 이하
---------+-----+-----------------
 kimkc   |  41 | f
 devkuma |  20 | f
 yunho   |  32 | f
 yongtea |  34 | f
 jiwoo   |  12 | f
(5개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;33 이상 15 이하의 범위는 존재하지 않기 때문에 모두 FALSE가 되었다.&lt;/p&gt;
&lt;p&gt;여기에 SYMMETRIC을 지정하면 범위를 지정한 두 값을 정렬 범위 지정이 제대로 된 결과가 나온다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select name, old,
mydb-#   old between symmetric 33 and 15 as &amp;#34;15 이상 33 이하&amp;#34;
mydb-# from customer;
  name   | old | 15 이상 33 이하
---------+-----+-----------------
 kimkc   |  41 | f
 devkuma |  20 | t
 yunho   |  32 | t
 yongtea |  34 | f
 jiwoo   |  12 | f
(5개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;15과 33의 작은 값에서 큰 값까지의 범위 내에 있으면 TRUE, 그렇지 않으면 FALSE가 된다.&lt;/p&gt;
&lt;h2 id=&#34;값이-null인지-비교-is-null-is-not-null&#34;&gt;값이 NULL인지 비교 (IS NULL, IS NOT NULL)&lt;/h2&gt;
&lt;p&gt;IS NULL는 비교 대상의 값이 NULL인지 비교하고 결과로 boolean 형의 값을 돌려준다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;expression IS NULL       expression이 NULL이다.
expression IS NOT NULL   expression이 NULL이 아니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비교 대상의 값이 NULL이면 TRUE이다. NOT이 있다면 NULL이면 TRUE이다. 값을 NULL인지 확인 때 비교 연산자 &lt;code&gt;=&lt;/code&gt; 로 비교하면 맞는 결과가 나오지 않는다.&lt;/p&gt;
&lt;p&gt;또한 비표준 구문으로 다음과 같은 결과가 되는 다음의 조건도 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;expression ISNULL       expression이 NULL이다.
expression NOTNULL      expression이 NULL이 아니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음과 같은 테스트 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table friends(name varchar(10), old integer);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 데이터를 테이블에 추가했습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into friends values (&amp;#39;kimkc&amp;#39;, 39), (&amp;#39;devkuma&amp;#39;, NULL), (NULL, 19);
INSERT 0 3
mydb=# \pset null &amp;#39;NULL&amp;#39;
Null 값은 &amp;#34;NULL&amp;#34; 문자로 보여짐.
mydb=# select * from friends;
  name   | old
---------+------
 kimkc   |   39
 devkuma | NULL
 NULL    |   19
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ 기본적으로 NULL을 검색하여 표시하면 아무것도 표시되지 않기 때문에, NULL 인 경우 &amp;lsquo;NULL&amp;rsquo;로 표시되도록 설정되어 있다.&lt;/p&gt;
&lt;p&gt;그러면 SELECT 명령을 사용하여 name 컬럼 및 old 컬럼에 저장되는 값이 NULL인지 판별해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select name, name is null as &amp;#34;NULL?&amp;#34;, old, old is null as &amp;#34;NULL?&amp;#34; from friends;
  name   | NULL? | old  | NULL?
---------+-------+------+-------
 kimkc   | f     |   39 | f
 devkuma | f     | NULL | t
 NULL    | t     |   19 | f
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;컬럼에 저장되는 값이 NULL이면 TRUE, 그렇지 않으면 FALSE가 되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL에서 제공되는 비교 연산자의 사용법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | PostgreSQL 기본 구성 | 산술 연산자 사용</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9/</guid>
      <description>
        
        
        &lt;p&gt;산술 연산자는 사칙 연산 등의 계산 외, 제곱근과 계승 등을 위해 이용한다. 여기에서는 산술 연산자의 사용법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;산술-연산자의-종류와-사용법&#34;&gt;산술 연산자의 종류와 사용법&lt;/h2&gt;
&lt;p&gt;PostgreSQL로 이용할 수 있는 산술 연산자는 다음과 같다다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+   더하기   2 + 3    -&amp;gt;  5
-   빼기　   2 - 3    -&amp;gt;  -1
*   곱하기   2 * 3    -&amp;gt;  6
/   나누기   4 / 2    -&amp;gt;  2  ※ 정수의 나눗셈에서는 나머지를 버린다.
%   나머지   5 % 4    -&amp;gt;  1
^   제곱     2.0^3.0  -&amp;gt;  8  ※ 左から右に適用
|/  제곱근   |/25.0   -&amp;gt;  5
||/ 세제곱근  ||/27.0  -&amp;gt;  3
!   계승　   5!       -&amp;gt;  120
!!  계승　   !!5      -&amp;gt;  120  ※ 전치 연산자
@   절대치   @-5.0    -&amp;gt;  5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 산술 연산자는 모든 수치 데이터 형으로 사용 할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 다음과 같은 테스트 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table test( num1 real,  num2 real);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같은 데이터를 테이블에 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into test values (15.4, 7.25), (-5.9, 9.0), (18.225, -7.3);
INSERT 0 3
mydb=# select * from test;
  num1  | num2
--------+------
   15.4 | 7.25
   -5.9 |    9
 18.225 | -7.3
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러고 SELECT 명령을 사용하여 num1 컬럼과 num2 컬럼에 대해 연산을 수행한 결과를 가져본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select num1, num2,
mydb-#   num1 + num2 as &amp;#34;num1 + num2&amp;#34;,
mydb-#   num1 * num2 as &amp;#34;num1 * num2&amp;#34;,
mydb-#   num1 / num2 as &amp;#34;num1 / num2&amp;#34;
mydb-# from test;
  num1  | num2 | num1 + num2 | num1 * num2 | num1 / num2
--------+------+-------------+-------------+-------------
   15.4 | 7.25 |       22.65 |  111.649994 |   2.1241379
   -5.9 |    9 |         3.1 |  -53.100002 | -0.65555555
 18.225 | -7.3 |      10.925 |  -133.04251 |  -2.4965754
(3개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;산술 연산자를 사용하여 컬럼에 저장되는 값에 대한 연산한 결과를 얻을 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;비트-연산자-사용&#34;&gt;비트 연산자 사용&lt;/h2&gt;
&lt;p&gt;산술 연산자는 다른 비트 연산을 할 연산자도 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;   비트 AND          91 &amp;amp; 15  -&amp;gt;  11
|   비트 OR            32 | 3  -&amp;gt;  35
#   비트 XOR           17 # 5  -&amp;gt;  20
~   비트 NOT           ~1      -&amp;gt;  -2
&amp;lt;&amp;lt;  비트 왼쪽 시프트    1 &amp;lt;&amp;lt; 4  -&amp;gt;  16
&amp;gt;&amp;gt;  비트 오른쪽 시프트  8 &amp;gt;&amp;gt; 2  -&amp;gt;  2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 연산자는 정수 데이터 형식 또는 비트 문자열로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;비트 AND 연산자의 왼쪽과 오른쪽의 같은 위치에 있는 비트를 비교하여 두 비트가 모두 1인 경우에만 1로 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;85 &amp;amp; 15

0000000001010101 = 85
0000000000001111 = 15
------------------------
0000000000000101 = 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 OR 연산자의 왼쪽과 오른쪽의 같은 위치에 있는 비트를 비교하여 어느 하나라도 비트 1의 경우에 1로 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;85 | 15

0000000001010101 = 85
0000000000001111 = 15
------------------------
0000000001011111 = 95
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 XOR 연산자의 왼쪽과 오른쪽의 같은 위치에 있는 비트를 비교하여 어느 하나가 비트 1의 경우에 1한다. 모두 1이거나 모두 0이면 0으로한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;85 # 15

0000000001010101 = 85
0000000000001111 = 15
------------------------
0000000001011010 = 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 NOT 연산자 오른쪽의 값의 각 비트를 반전 (0이라면 1, 1이면 0으로 한다)시킨다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~ 85

0000000001010101 = 85
------------------------
1111111110101010 = -86
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 왼쪽 시프트는 대상의 값을 지정한 수 만큼 왼쪽으로 이동한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;85 &amp;lt;&amp;lt; 2

0000000001010101 = 85
------------------------
0000000101010100 = 340
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 오른쪽 시프트는 대상의 값을 지정된 수 만큼 오른쪽으로 이동한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;85 &amp;gt;&amp;gt; 2

0000000001010101 = 85
------------------------
0000000000010101 = 21
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SELECT 명령을 사용하여 간단히 해본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select 85 &amp;amp; 15 as &amp;#34;85 &amp;amp; 15&amp;#34;,
mydb-#   85 | 15 as &amp;#34;85 | 15&amp;#34;,
mydb-#   85 # 15 as &amp;#34;85 # 15&amp;#34;,
mydb-#   ~ 85 as &amp;#34;~ 85&amp;#34;,
mydb-#   85 &amp;lt;&amp;lt; 2 as &amp;#34;85 &amp;lt;&amp;lt; 2&amp;#34;,
mydb-#   85 &amp;gt;&amp;gt; 2 as &amp;#34;85 &amp;gt;&amp;gt; 2&amp;#34;;
 85 &amp;amp; 15 | 85 | 15 | 85 # 15 | ~ 85 | 85 &amp;lt;&amp;lt; 2 | 85 &amp;gt;&amp;gt; 2
---------+---------+---------+------+---------+---------
       5 |      95 |      90 |  -86 |     340 |      21
(1개 행)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;비트 연산자를 사용하여 연산한 결과를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL에서 제공되는 산술 연산자의 사용법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EC%8B%9D-data-type/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EC%8B%9D-data-type/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL로 이용할 수있는 데이터 형식 및 사용 방법에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 숫자 형식(integer, decimal, double precision 등)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%88%AB%EC%9E%90-%ED%98%95%EC%8B%9D-integer-decimal-double-precision-%EB%93%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%88%AB%EC%9E%90-%ED%98%95%EC%8B%9D-integer-decimal-double-precision-%EB%93%B1/</guid>
      <description>
        
        
        &lt;p&gt;PosgtreSQL에서 사용할 수있는 데이터 타입에서 숫자 형식의 사용법에 대해 설명하도록 하겠다. 숫자는 정수 데이터 타입 (smallint, integer, bigint), 정밀한 숫자 (numeric, decimal), 부동 소수점 데이터 형 (real, double precision)이 포함되어 있다. 자동 증가 타입은 다음 페이지에서 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;정수-형식-smallint-integer-bigint&#34;&gt;정수 형식 (smallint, integer, bigint)&lt;/h2&gt;
&lt;p&gt;먼저 정수 데이터 형식이다. 취급 숫자의 범위가 다른 3 가지 데이터 타입이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;범위&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td&gt;2 바이트&lt;/td&gt;
&lt;td&gt;-32768에서 +32767&lt;/td&gt;
&lt;td&gt;int2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;4 바이트&lt;/td&gt;
&lt;td&gt;-2147483648에서 +2147483647&lt;/td&gt;
&lt;td&gt;int, int4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;-9223372036854775808에서 +9223372036854775807&lt;/td&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;정수이므로 소수점이 있는 숫자는 처리 할 수 없다. 소수점이 있는 숫자를 저장하게 되면 정수로 변환되어 저장된다. 또한 각 데이터 타입에 저장할 수 있는 값의 범위가 정해져 있어 범위를 초과 한 값을 저장하려고 하면 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같은 테이블을 만들었다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table numtest1 (num1 smallint, num2 integer, num3 bigint);
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각각의 컬럼에 설정되어 있는 데이터 형의 범위 내의 값이면 저장할 수 있다. 예를 들어, 다음과 같은 데이터를 저장한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest1 values (8000, 350000, 4000000000);
INSERT 0 1
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;범위를 초과하는 값을 저장하려고하면 오류가 발생한다. 예를 들어 num1 컬럼은 smallint 형이므로 저장할 수있는 값의 범위는 -32768에서 +32767까지이다. 이 값을 초과하여 50000을 값으로 저장하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest1 values (50000, 50000, 50000);
오류:  smallint1의 범위를 벗어났습니다.
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;num1 컬럼에 저장할 수있는 값의 범위를 초과 한 값을 저장하려고 하였기에 &amp;ldquo;오류:  smallint의 범위를 벗어났습니다.&amp;ldquo;라는 오류가 발생하였다.&lt;/p&gt;
&lt;h2 id=&#34;정밀한-숫자-numeric-decimal&#34;&gt;정밀한 숫자 (numeric, decimal)&lt;/h2&gt;
&lt;p&gt;다음은 정밀한 숫자이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;범위&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td&gt;가변&lt;/td&gt;
&lt;td&gt;사용자 지정, 정확&lt;/td&gt;
&lt;td&gt;소수점 위 131072 자리까지 소수점 아래는 16,383 자리까지&lt;/td&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;numeric 및 decimal 타입은 매우 큰 숫자를 저장할 수 있으며 연산을 해도 오차가 발생하고 정확하게 할 수 있는 데이터 타입이다. 그러나 처리는 정수와 부동 소수점 데이터 형과 비교해 매우 늦어 지므로 주의가 필요하다.&lt;/p&gt;
&lt;p&gt;numeric 형을 지정하려면 다음 유형으로 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NUMERIC(precision, scale) NUMERIC(precision) NUMERIC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;precision는 숫자 전체의 최대 정확도, scale은 소수점 이하 자릿수를 지정한다. 예를 들어 numeric (5, 2)하면 소수점 이하 2자리, 전체 5자리 정확도의 값을 저장할 수 있기 때문에 저장할 수 있는 값의 범위는 -999.99에서 999.99가 된다.&lt;/p&gt;
&lt;p&gt;scale을 생략하면 0이 지정된 것으로 간주된다. 또한 precision과 scale이 모두 생략된 경우는 가능한 최대의 정확도 및 소수점 이하의 자리수가 설정된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같은 테이블을 만들었다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table numtest2 (num numeric(5, 2));
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;컬럼에 설정되어 있는 데이터 형의 범위 내의 값이면 저장할 수 있다. 예를 들어 다음과 같은 3개의 데이터를 저장한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest2 values (45), (34.25), (-752.4);
INSERT 0 3
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;정수 부분의 범위를 넘는 값을 저장하려고하면 오류가 발생한다. 예를 들어 num 컬럼은 numeric(5, 2) 형이므로 저장할 수 있는 값의 범위는 -999.99에서 +999.99까지이다. 이 값을 초과하는 1500.2 을 저장하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest2 values (1500.2);
오류:  수치 필드 오버플로우
상세정보:  전체 자릿수 5, 소수 자릿수 2의 필드는 10^3보다 작은 절대 값으로 반올림해야 합니다.
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;num 컬럼에 저장할 수있는 값의 범위를 초과 한 값을 저장하였기에 &amp;ldquo;오류:  수치 필드 오버플로우&amp;rdquo; 오류가 발생한다.&lt;/p&gt;
&lt;p&gt;소수점 이하의 자리수가 지정한 범위를 초과하면 오류가 되지 않고 지정된 자릿수로 변환되어 저장된다. 예를 들어 다음과 같은 값을 2개 포함 해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest2 values (32.245),(-8.5224);
INSERT 0 2
mydb=# select * from numtest2;
   num
---------
   45.00
   34.25
 -752.40
   32.25
   -8.52
(5개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;32.245는 32.5로, -8.5224는 -8.52으로 저장되었다.&lt;/p&gt;
&lt;h2 id=&#34;부동-소수점-데이터-타입-real-double-precision&#34;&gt;부동 소수점 데이터 타입 (real, double precision)&lt;/h2&gt;
&lt;p&gt;마지막으로 부동 소수점 데이터 형식이다. 취급 숫자의 범위가 서로 다른 두 가지 데이터 타입이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;범위&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;4 바이트&lt;/td&gt;
&lt;td&gt;가변 정밀도, 부정확&lt;/td&gt;
&lt;td&gt;최소 6 자리의 정밀도 (적어도 1E-37에서 1E + 37)&lt;/td&gt;
&lt;td&gt;float4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double precision&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;가변 정밀도, 부정확&lt;/td&gt;
&lt;td&gt;최소 15 자리의 정밀도 (약 1E-307에서 1E + 308)&lt;/td&gt;
&lt;td&gt;float8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;부동 소수점에서 저장하고 검색 할 때 오차가 발생할 수 있으므로 정확한 연산 등에는 적합하지 않다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같은 테이블을 만들었다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table numtest3 (num1 real, num2 double precision);
CREATE TABLE
mydb=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;컬럼에 설정되어 있는 데이터 형의 범위 내의 값이면 저장할 수 있다. 예를 들어, 다음과 같은 데이터를 저장한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest3 values (15.775, 812.5532245);
INSERT 0 1
mydb=# select * from numtest3;
   num1   |        num2
----------+--------------------
   15.775 |        812.5532245
(1개 행)


mydb=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각각의 데이터 형 이상의 자릿수의 값을 저장하려고하면 반올림 저장 될 수 있습니다. 예를 들어 다음과 같은 데이터를 저장한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest3 values (9.4475658, 52.75120024568652456);
INSERT 0 1
mydb=# select * from numtest3;
   num1   |        num2
----------+--------------------
   15.775 |        812.5532245
 9.447566 | 52.751200245686526
(2개 행)


mydb=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9.4475658는 9.44757으로 52.75120024568652456는 52.7512002456865으로 반올림되어 저장되었다.&lt;/p&gt;
&lt;p&gt;범위를 초과하는 값을 저장하려고 하면 오류가 발생한다. 예를 들어 다음과 같은 값을 저장하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into numtest3 values (4.8e50, 4.8e50);
오류:  &amp;#34;480000000000000000000000000000000000000000000000000&amp;#34;는 real 자료형의 범위를 벗어납니다.
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;저장할 수 있는 값의 범위를 초과 한 값을 저장하려고했기에 범위에 벗어났다는 오류가 발생되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;PosgtreSQL에서 사용할 수있는 데이터 형식에서 숫자 형식의 사용법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 자동 증가 형식 (serial 등)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%9E%90%EB%8F%99-%EC%A6%9D%EA%B0%80-%ED%98%95%EC%8B%9D-serial-%EB%93%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%9E%90%EB%8F%99-%EC%A6%9D%EA%B0%80-%ED%98%95%EC%8B%9D-serial-%EB%93%B1/</guid>
      <description>
        
        
        &lt;p&gt;PosgtreSQL에서 사용할 수 있는 데이터 형에서 자동 증가 타입의 사용법에 대해 설명하겠다. 자동 증가 타입으로 설정한 컬럼은 자동으로 연속 값이 저장된다. 자동 증가 타입은 smallserial, serial, bigserial의 3 가지 유형의 데이터가 존재한다.&lt;/p&gt;
&lt;h2 id=&#34;자동-증가-형식&#34;&gt;자동 증가 형식&lt;/h2&gt;
&lt;p&gt;연번 형은 취급 숫자의 범위가 다른 3 가지 데이터 유형이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;범위&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smallserial&lt;/td&gt;
&lt;td&gt;2 바이트&lt;/td&gt;
&lt;td&gt;1~32767&lt;/td&gt;
&lt;td&gt;serial2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serial&lt;/td&gt;
&lt;td&gt;4 바이트&lt;/td&gt;
&lt;td&gt;1~2147483647&lt;/td&gt;
&lt;td&gt;serial4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigserial&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;1~9223372036854775807&lt;/td&gt;
&lt;td&gt;serial8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;자동 증가 타입이 설정된 컬럼이 포함된 테이블에 데이터를 추가를 하면, 자동 증가 타입의 컬럼에 직접 값을 지정하는 것이 아니라 기본값이 포함되도록 한다. 그러면 자동으로 지금까지 등록된 값보다 큰 값(일반적으로 1 큰 값)이 자동으로 저장된다. (MySQL에서 말하는 컬럼에 AUTO_INCREMENT를 설정 한 것과 비슷하다)&lt;/p&gt;
&lt;p&gt;※ 자동 증가 형식은 내부적으로 시퀀스를 이용하여 구현되어 있다.&lt;/p&gt;
&lt;p&gt;실습으로 다음과 같은 테이블을 생성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# create table myfriends (id serial, name varchar(10), address varchar(10));
CREATE TABLE
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러고, 테이블에 데이터를 추가한다. id 컬럼의 데이터 유형은 자동 증가 타입 serial이므로 id에 값을 지정하지 않고 데이터를 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into myfriends (name, address) values (&amp;#39;Yunho&amp;#39;, &amp;#39;Goyang&amp;#39;);
INSERT 0 1
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 myfriends 테이블의 데이터를 검색하여 확인본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select * from myfriends;
 id | name  | address
----+-------+---------
  1 | Yunho | Goyang
(1개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;id 컬럼은 첫 번째 값인 1이 포함되어 있다. 그럼 또 3개의 데이터를 추가보도록 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into myfriends (name, address) values (&amp;#39;Seonah&amp;#39;, &amp;#39;Bucheon&amp;#39;), (&amp;#39;Yongtae&amp;#39;, &amp;#39;Seoul&amp;#39;), (&amp;#39;Dongeog&amp;#39;, &amp;#39;Gangnam&amp;#39;);
INSERT 0 3
mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다시 myfriends 테이블의 데이터를 검색하여 확인본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# select * from myfriends;
 id |  name   | address
----+---------+---------
  1 | Yunho   | Goyang
  2 | Seonah  | Bucheon
  3 | Yongtae | Seoul
  4 | Dongeog | Gangnam
(4개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;id 컬럼은 자동으로 연속된 값이 포함되어 있으며, 2, 3, 4의 값이 포함되어 있다. 이와 같이 자동 증가 데이터 형식을 컬럼으로 설정하면, 값이 지정되지 않으면 디폴트 값으로 연속적인 값이 자동으로 저장된다. (좀 더 덧붙이자면, 어디까지나 마지막 저장된 보다 큰 값이 저장되는 것이지 반드시 연속적인 값으로 되는 것은 아니다)&lt;/p&gt;
&lt;h2 id=&#34;자동-증가-타입이-설정된-컬럼에-값을-지정하여-데이터를-추가&#34;&gt;자동 증가 타입이 설정된 컬럼에 값을 지정하여 데이터를 추가&lt;/h2&gt;
&lt;p&gt;자동 증가 타입이 설정된 컬럼에 따로 지정하지 않으면 디폴트 값으로 자동으로 연속적인 값이 저장되지만, 임의의 값을 지정하여 데이터를 추가 할 수도 있다.&lt;/p&gt;
&lt;p&gt;현재 4개의 데이터를 추가한 상태에 다음 데이터를 추가하게 되면, 자동 증가 타입이 설정된 id 컬럼에 다음 디폴트 값인 5가 저장된다.&lt;/p&gt;
&lt;p&gt;여기서 id 컬럼에 값을 지정하여 데이터를 추가 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into myfriends values (7, &amp;#39;Yunjo&amp;#39;, &amp;#39;Paris&amp;#39;);
INSERT 0 1
mydb=# select * from myfriends;
 id |  name   | address
----+---------+---------
  1 | Yunho   | Goyang
  2 | Seonah  | Bucheon
  3 | Yongtae | Seoul
  4 | Dongeog | Gangnam
  7 | Younjo  | Paris
(5개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터를 추가한 후 테이블에서 데이터를 검색해 보면 지정한 값이 그대로 저장되어 있다. 이와 같이 자동 증가 타입이 설정된 컬럼에도 값을 지정하여 데이터를 추가 할 수 있다.&lt;/p&gt;
&lt;p&gt;여기에서 다시 id 컬럼에 지정하지 않고 디폴트값으로 데이터를 추가하면, id 컬럼에 무슨 값이 들어가는지 확인하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into myfriends (name, address) values (&amp;#39;Sueun&amp;#39;, &amp;#39;Yongin&amp;#39;);
INSERT 0 1
mydb=# select * from myfriends;
 id |  name   | address
----+---------+---------
  1 | Yunho   | Goyang
  2 | Seonah  | Bucheon
  3 | Yongtae | Seoul
  4 | Dongeog | Gangnam
  7 | Younjo  | Paris
  5 | Sueun   | Yongin
(6개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터를 추가한 후에 테이블에서 데이터를 검색해 보면, id 컬럼은 원래 다음으로 들어가려던 5가 저장된다.&lt;/p&gt;
&lt;p&gt;그럼, id 컬럼에 디폴트 값이 포함되도록 2개의 데이터를 더 추가해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mydb=# insert into myfriends (name, address) values (&amp;#39;Hansol&amp;#39;, &amp;#39;Seocho&amp;#39;), (&amp;#39;Yujin&amp;#39;, &amp;#39;Unknown&amp;#39;);
INSERT 0 2
mydb=# select * from myfriends;
 id |  name   | address
----+---------+---------
  1 | Yunho   | Goyang
  2 | Seonah  | Bucheon
  3 | Yongtae | Seoul
  4 | Dongeog | Gangnam
  7 | Younjo  | Paris
  5 | Sueun   | Yongin
  6 | Hansol  | Seocho
  7 | Yujin   | Unknown
(8개 행)


mydb=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;id 컬럼에는 이전 저장된 값 5 다음으로 6과 7이 저장되어 있다. 이미 id 컬럼에 7이라는 값이 저장된 데이터를 수동으로 추가되었지만, 중복된 값이 있는지와는 상관없이 연속적인 값이 저장이 되었다.&lt;/p&gt;
&lt;p&gt;이와 같이 자동 증가 타입이 설정된 컬럼에 값을 지정하여 데이터를 추가 할 수도 있지만, 그 데이터는 자동으로 저장되는 값으로 반영되지 않는다는 점을 주의가 필요하다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;PosgtreSQL에서 사용할 수있는 데이터 형에서 자동 증가 타입의 사용법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 문자열 형식(varchar, char, text)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%98%95%EC%8B%9D-varchar-char-text/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%98%95%EC%8B%9D-varchar-char-text/</guid>
      <description>
        
        
        &lt;p&gt;PosgtreSQL에서 사용할 수 있는 데이터 형식 중 문자 사용에 대해 설명한다. 문자는 가변 길이 문자형(character varying, varchar), 고정 길이 문자형(character, char) 제한없이 가변 문자형(text)이 있다.&lt;/p&gt;
&lt;h2 id=&#34;문자열-형식&#34;&gt;문자열 형식&lt;/h2&gt;
&lt;p&gt;문자는 다음과 같은 데이터 형이 준비되어 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;character varying(n)&lt;/td&gt;
&lt;td&gt;가변 길이 문자열&lt;/td&gt;
&lt;td&gt;varchar(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;character(n)&lt;/td&gt;
&lt;td&gt;고정 길이 문자열&lt;/td&gt;
&lt;td&gt;char(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;제한없이 가변 길이&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;character varying(n)은 가변 길이의 문자형이다. 최대 길이(n)까지의 문자를 저장할 수 있다.
character(n)은 고정 길이 문자형이다. 저장할 문자가 n개가 되지 않는 경우에는 나머지는 공백으로 채워진다.&lt;/p&gt;
&lt;p&gt;두 문자형 모두 n개의 문자보다 긴 문자열을 저장하려고 하면 에러가 발생하게 되지만, n개의 문자보다 짧으면 n개의 문자만 저장된다.&lt;/p&gt;
&lt;p&gt;길이를 지정하지 않고 character varying라고만 지정하면 문자 제한이 없는 것으로 간주된다. 이에 반해 길이를 지정하지 않고 character라고만지정하면 character(1)로 간주된다.&lt;/p&gt;
&lt;p&gt;text 형식은 길이에 제한이 없는 가변 길이 문자형이다. 매우 긴 문자열을 포함하는 경우에 사용한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같은 테이블을 생성한다&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create table strtest (str1 varchar(10), str2 char(10));
CREATE TABLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성한 테이블에 다음과 같은 데이터를 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# insert into strtest values(&amp;#39;kuma&amp;#39;, &amp;#39;kuma&amp;#39;);
INSERT 0 1
devkuma=# insert into strtest values(&amp;#39;  kuma  &amp;#39;, &amp;#39;  kuma  &amp;#39;);
INSERT 0 1
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;첫 번째 데이터는 &amp;lsquo;kuma&amp;rsquo;라는 문자열을 각각 포함되어 있고, 두 번째 데이터는 문자열 앞뒤에 공백이 각각 두 개의 &amp;rsquo;  kuma  &amp;lsquo;라는 문자열을 포함되어 있다. 그러면 테이블에서 데이터를 조회해 보자. 값을 얻을 때 char_length 함수도 사용하여 문자 수도 함께 표시해 보도록 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select str1, char_length(str1), str2, char_length(str2) from strtest;
   str1   | char_length |    str2    | char_length
----------+-------------+------------+-------------
 kuma     |           4 | kuma       |           4
   kuma   |           8 |   kuma     |           6
(2개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;가변 길이 문자열(str1)은 SELECT으로 조회하면 저장된 문자열 앞뒤의 공백을 포함하여 그대로 조회가 되고 있다. 그에 비해 고정 길이 문자열(str2)은 SELECT으로 조회된 문자열의 앞에 공백은 그대로이지만 문자열 뒤에 있는 공백은 모두 제거된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;
PosgtreSQL에서 사용할 수 있는 데이터 형식 중 문자 사용에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 날짜/시간 형식(timestamp, interval, data 등)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%82%A0%EC%A7%9C/%EC%8B%9C%EA%B0%84-%ED%98%95%EC%8B%9D-timestamp-interval-data-%EB%93%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%82%A0%EC%A7%9C/%EC%8B%9C%EA%B0%84-%ED%98%95%EC%8B%9D-timestamp-interval-data-%EB%93%B1/</guid>
      <description>
        
        
        &lt;p&gt;여기에서는 날짜 / 시간 데이터 형식에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;날짜시간-형식&#34;&gt;날짜/시간 형식&lt;/h2&gt;
&lt;p&gt;사용 가능한 형식은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;timestamp [(p)] [without time zone]&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;날짜와 시간 모두&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp [(p)] [with time zone]&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;날짜와 시간 모두 시간대 포함&lt;/td&gt;
&lt;td&gt;timestamptz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;interval [(p)]&lt;/td&gt;
&lt;td&gt;12 바이트&lt;/td&gt;
&lt;td&gt;시간 간격&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;4 바이트&lt;/td&gt;
&lt;td&gt;날짜&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time [(p)] [without time zone]&lt;/td&gt;
&lt;td&gt;8 바이트&lt;/td&gt;
&lt;td&gt;시간&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time [(p)] with time zone&lt;/td&gt;
&lt;td&gt;12 바이트&lt;/td&gt;
&lt;td&gt;시간, 시간대 첨부&lt;/td&gt;
&lt;td&gt;timetz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;time 형이나 timestamp 데이터 형식의 선택적 인수(p)는 초의 소수점 이하의 정밀도를 지정이다. 허용되는 p범위는 타임 스탬프 및 간격 유형에 대해 0에서 6까지이다.&lt;/p&gt;
&lt;p&gt;날짜와 시간 입력은 다양한 포멧으로 가능하지만, 판단할지 애매한 경우는 DateStyle 따라 달라진다. DateStyle는 예를 들어 날짜가 &amp;ldquo;년 월 일&amp;rdquo; 순서으로 작성되어 있는지 &amp;ldquo;월 일 년&amp;rdquo; 순서로 기술되어 있는지 등을 지정하는 것이다. 아래에서는 어떤 DataStyle도 제대로 해석되는 포맷만을 일단 보도록 한다.&lt;/p&gt;
&lt;p&gt;날짜 입력 방법은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;January 8, 1999
1999-01-08
1999-Jan-08
Jan-08-1999
08-Jan-1999
19990108
990108
1999.008      ※ 연도와 그 일까지의 합계
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;시간 입력 방법은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;04:05:06.789
04:05:06
04:05
040506
04:05 AM     ※ = 04:05
04:05 PM     ※ = 16:05
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;시간도 포함한 시간 입력 방법은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;04:05:06 PST
04:05:06+09:00
04:05:06+0900
04:05:06+09
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ 한국 표준 시간의 경우 &amp;ldquo;+09:00&amp;quot;이다.&lt;/p&gt;
&lt;p&gt;날짜 입력시 월명으로 사용할 수있는 값은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;January     Jan         ※ 1월
February    Feb         ※ 2월
March       Mar         ※ 3월
April       Apr         ※ 4월
May                     ※ 5월
June        Jun         ※ 6월
July        Jul         ※ 7월
August      Aug         ※ 8월
September   Sep、Sept   ※ 9월
October     Oct         ※10월
November    Nov         ※11월
December    Dec         ※12월
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;날짜와 시간은 작은 따옴표로 묶어 작성한다. 각 유형의 경우 입력 예는 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;timestamp                     &amp;#39;2004-10-19 10:23:54&amp;#39;
timestamp with time zone      &amp;#39;2004-10-19 10:23:54+09&amp;#39;
date                          &amp;#39;2004-10-19&amp;#39;
time                          &amp;#39;10:23:54&amp;#39;
time with time zone           &amp;#39;10:23:54+09&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;시간 간격 형 interval 형은 시간 지정한 시간만큼을 연산을 할 경우에 사용한다.&lt;/p&gt;
&lt;p&gt;예를 들면, 현재 시간보다 30분 전 시간을 구하려면 아래와 같이 구하면 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select now(), now() - interval&amp;#39;30 minute&amp;#39;;
              now              |           ?column?
-------------------------------+-------------------------------
 2020-10-24 00:51:55.780337+09 | 2020-10-24 00:21:55.780337+09
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 시간보다 하루 전 날짜 구하는 방법은 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select now(), now()::date - &amp;#39;1 day&amp;#39;::interval;
              now              |      ?column?
-------------------------------+---------------------
 2020-10-24 00:52:48.932335+09 | 2020-10-23 00:00:00
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;그밖에-사용법&#34;&gt;그밖에 사용법&lt;/h2&gt;
&lt;p&gt;현재 시간 조회하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;014282&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;현재 타임존 조회하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timezone&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TimeZone&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Asia&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Seoul&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;타임존 변경 방법하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TIME&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ZONE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Asia/Seoul&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시스템 일자를 조회하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_date&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timeofday&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_date&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_time&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timeofday&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;--------------+--------------------+-------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;757997&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Sat&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Oct&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;765987&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;KST&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-------------------------------+-------------------------------+----------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;990667&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;990667&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;990667&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;날짜에서 년도를 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;isoyear&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2006-01-01&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2005&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;isoyear&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;09&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;월을 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current_timestamp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;interval&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2 years 3 months&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;interval&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2 years 13 months&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;날짜에서 일을 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시간에서 시를 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2013-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;interval&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;4 hours 3 minutes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시간에서 분을 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;minute&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;minute&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2013&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시간에서 초를 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2013-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;17:12:28.5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2013-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2013&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;세기(century) 추출를 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;century&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2000-12-16 12:21:13&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;century&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;century&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_trunc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2001&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;00&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;요일/일차 추출를 추출하는 방법은 아래와 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;isodow&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2013-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 일요일(0), 토요일(6)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;         &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;doy&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2013-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-- 월요일(1), 일요일(7)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;211&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;extract&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;doy&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;2020-07-30 20:38:40&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;date_part&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;       &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;212&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 논리 값 데이터 형식(boolean)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%85%BC%EB%A6%AC-%EA%B0%92-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EC%8B%9D-boolean/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%85%BC%EB%A6%AC-%EA%B0%92-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%95%EC%8B%9D-boolean/</guid>
      <description>
        
        
        &lt;p&gt;PosgtreSQL에서 사용할 수 있는 데이터 형에서 논리 값 데이터 형의 사용법에 대해 설명한다. 논리 데이터 형식는 boolean 형만 존재한다.&lt;/p&gt;
&lt;p&gt;논리 데이터 형식 사용
논리  데이터 형식으로 준비되어있는 데이터 형은 하나입니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;범위&lt;/th&gt;
&lt;th&gt;별칭&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;1 바이트&lt;/td&gt;
&lt;td&gt;참 또는 거짓 상태&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;boolean 형은 참 또는 거짓을 나타내는 값 중 하나를 포함한다. PostgreSQL에서는 참 또는 거짓을 나타내는 값으로 다음 값을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;참을 나타내는 값 :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TRUE
&amp;#39;t&amp;#39;
&amp;#39;true&amp;#39;
&amp;#39;y&amp;#39;
&amp;#39;yes&amp;#39;
&amp;#39;on&amp;#39;
&amp;#39;1&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;거짓를 나타내는 값 :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FALSE
&amp;#39;f&amp;#39;
&amp;#39;false&amp;#39;
&amp;#39;n&amp;#39;
&amp;#39;no&amp;#39;
&amp;#39;off&amp;#39;
&amp;#39;0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;boolean 형의 컬럼에 값을 저장하는 데 어떤 값을 사용하여도 상관 없지만, 될 수 있으면 알아보기 쉽게 TRUE와 FALSE를 사용하면 좋을거 같다.&lt;/p&gt;
&lt;p&gt;실습으로 다음과 같은 테이블을 생성해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create table booltest (flag boolean);
CREATE TABLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러고 테이블에 데이터를 추가한다. 참과 거짓을 나타내는 다양한 값을 넣어 보도록 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# insert into booltest values (TRUE), (&amp;#39;no&amp;#39;), (&amp;#39;0&amp;#39;), (&amp;#39;yes&amp;#39;), (FALSE);
INSERT 0 5
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;booltest 테이블의 데이터를 검색하여 확인해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select * from booltest;
 flag
------
 t
 f
 f
 t
 f
(5개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;boolean 형의 값을 조회해 보면 기본적으로 t 또는 f가 표시되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;PosgtreSQL에서 사용할 수 있는 데이터 형에서 논리 값 데이터 형의 사용법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터 형식(Data type) | 네트워크 주소 형식(cidr, inet, macaddr)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%A3%BC%EC%86%8C-%ED%98%95%EC%8B%9D-cidr-inet-macaddr/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%A3%BC%EC%86%8C-%ED%98%95%EC%8B%9D-cidr-inet-macaddr/</guid>
      <description>
        
        
        &lt;p&gt;여기에서는 네트워크 주소 형식에 대해 알아보자. 사용 가능한 형식은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;형식&lt;/th&gt;
&lt;th&gt;크기&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cidr&lt;/td&gt;
&lt;td&gt;12 혹은 24 바이트&lt;/td&gt;
&lt;td&gt;IPv4 및 IPv6 네트워크&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inet&lt;/td&gt;
&lt;td&gt;12 혹은 24 바이트&lt;/td&gt;
&lt;td&gt;IPv4 또는 IPv6 호스트 및 네트워크&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macaddr&lt;/td&gt;
&lt;td&gt;6 바이트&lt;/td&gt;
&lt;td&gt;MAC 주소&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;inet 형, cidr 형 둘 다 인터넷 주소의 표기 방법이다. 예를 들어 &amp;ldquo;192.168.128.0/24&amp;quot;와 같이 &amp;ldquo;주소 / 넷 마스크의 비트 수&amp;quot;의 형식으로 작성한다. IPv4에서도 IPv6를 모두 작성 가능하다.&lt;/p&gt;
&lt;p&gt;macaddr 형은 하드웨어 고유의 MAC 주소를 저장하는 형식이다. 예로는 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#39;08002b:010203&amp;#39;
&amp;#39;08002b-010203&amp;#39;
&amp;#39;0800.2b01.0203&amp;#39;
&amp;#39;08-00-2b-01-02-03&amp;#39;
&amp;#39;08:00:2b:01:02:03&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-database/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-database/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서는 목적에 따라 여러 데이터베이스를 만들고 관리 할 수 있다. 여기에서는 데이터베이스를 만들거나 삭제하며 만든 데이터베이스에 연결하는 방법에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database) | 데이터베이스 생성(CREATE DATABASE)</title>
      <link>https://www.devkuma.com/docs/postgresql/create-database/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/create-database/</guid>
      <description>
        
        
        &lt;p&gt;CREATE DATABASE 명령을 사용하여 PostgreSQL 데이터베이스를 새로 만드는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;새-데이터베이스-생성하기&#34;&gt;새 데이터베이스 생성하기&lt;/h2&gt;
&lt;p&gt;데이터베이스를 작성하려면 CREATE DATABASE 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE DATABASE name
    [ [ WITH ] [ OWNER [=] user_name ]
           [ TEMPLATE [=] template ]
           [ ENCODING [=] encoding ]
           [ LC_COLLATE [=] lc_collate ]
           [ LC_CTYPE [=] lc_ctype ]
           [ TABLESPACE [=] tablespace_name ]
           [ ALLOW_CONNECTIONS [=] allowconn ]
           [ CONNECTION LIMIT [=] connlimit ]
           [ IS_TEMPLATE [=] istemplate ] ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;옵션이 여러가기가 준비되고, 기본이 되는 구문은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE DATABASE name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스 이름 (name)을 지정하여 새 데이터베이스를 생성한다. 명시적으로 지정하지 않으면 작성된 템플릿 데이터베이스 template1를 복사하여 데이터베이스가 만들어 진다.&lt;/p&gt;
&lt;p&gt;데이터베이스를 만들려면 명령을 수행하는 역할이 수퍼 유저이거나 CREATEDB 권한을 가지고 있어야 한다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. psql에서 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# create database devkuma;
CREATE DATABASE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스가 생성 되었다.&lt;/p&gt;
&lt;p&gt;그러면 생성된 데이터베이스 조회해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \l
                                      데이터베이스 목록
   이름    |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
-----------+----------+--------+------------------+------------------+-----------------------
 devkuma   | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |                        &amp;lt;&amp;lt;&amp;lt;&amp;lt; 신규 생성됨
 postgres  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 sample    | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 template0 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
 template1 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
(5개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;문자-셋-및-데이터-정렬을-지정하여-데이터베이스를-만들기&#34;&gt;문자 셋 및 데이터 정렬을 지정하여 데이터베이스를 만들기&lt;/h2&gt;
&lt;p&gt;데이터베이스를 만들 때 데이터베이스에서 사용하는 문자 셋 (ENCODING) 및 문자열 정렬 순서(LC_COLLATE)와 문자 분류(LC_CTYPE)는 명시적으로 지정하지 않은 경우에는 기본값이 사용되지만, 이 설정들은 한 번 데이터베이스를 만들면 변경할 수 없으므로 주의해야 한다.&lt;/p&gt;
&lt;p&gt;만약 명시적으로 문자 셋을 지정하여 데이터베이스를 만들려면 다음 형식을 사용한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE DATABASE name
  ENCODING encoding
  LC_COLLATE lc_collate
  LC_CTYPE lc_ctype
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한 로케일 설정 (LC_COLLATE와 LC_CTYPE)이 기본적으로 사용되는 템플릿 template1의 로케일 설정과 다른 경우에는 명시적으로 템플릿으로 template0를 사용해야 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE DATABASE name
  TEMPLATE template0
  ENCODING encoding
  LC_COLLATE lc_collate
  LC_CTYPE lc_ctype
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 이번에는 문자 셋으로 UTF8 하고 문자열 정렬 순서과 문자 분류로 &amp;lsquo;Korean_Korea.949&amp;rsquo;을 설정하여 데이터베이스를 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create database devkuma2
postgres-#   template template0
postgres-#   encoding UTF8
postgres-#   lc_collate &amp;#39;Korean_Korea.949&amp;#39;
postgres-#   lc_ctype &amp;#39;Korean_Korea.949&amp;#39;;
CREATE DATABASE
postgres=#	
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;문자 셋,  문자열 정렬 순서, 그리고 문자 분류를 지정하여 새 데이터베이스를 생성하였다.&lt;/p&gt;
&lt;p&gt;그러면, 생성 된 데이터베이스 나열 해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \l
                                      데이터베이스 목록
   이름    |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
-----------+----------+--------+------------------+------------------+-----------------------
 devkuma   | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 devkuma2  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |                        &amp;lt;&amp;lt;&amp;lt; 신규 생성
 postgres  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 sample    | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 template0 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
 template1 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
(6개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;방금 만든 devkuma2 데이터베이스가 존재하고, 문자 셋와 문자열 정렬 순서, 문자 분류가 지정된 것으로 되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 CREATE DATABASE 명령을 사용하여 데이터베이스를 만드는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database) | 생성된 데이터베이스 목록 조회</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL로 생성된 데이터베이스 목록을 조회하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;l-명령을-사용하기&#34;&gt;\l 명령을 사용하기&lt;/h2&gt;
&lt;p&gt;먼저 psql의 메타 명령을 사용하는 방법이다. 생성된 데이터베이스 목록을 검색하려면 다음과 같이 수행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \l
                                      데이터베이스 목록
   이름    |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
-----------+----------+--------+------------------+------------------+-----------------------
 devkuma   | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 devkuma2  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 postgres  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 sample    | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 template0 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
 template1 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
(6개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성된 데이터베이스 목록을 조회할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;시스템-카탈로그-pg_database에서-조회하기&#34;&gt;시스템 카탈로그 pg_database에서 조회하기&lt;/h2&gt;
&lt;p&gt;이어서 PostgreSQL 시스템 카탈로그의 하나인 pg_database에서 얻을 수 있는 방법에 대해서 알아보자. 시스템 카탈로그는 PostgreSQL의 관리 시스템이 사용하는 테이블에서 데이터베이스 및 테이블 등의 정보를 관리하는데 사용하는 pg_database에는 다음과 같은 열이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;형&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;식별자 (명시적으로 지정하지 않으면 얻을 수 없다)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datname&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;데이터베이스 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datdba&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;데이터베이스 소유자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;encoding&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;데이터베이스 문자 집합의 식별 번호&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datcollate&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;데이터베이스 문자열 정렬 순서&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datctype&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;데이터베이스 문자 유형&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datistemplate&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;모든 사용자가 복제할 수 있는지 여부 (false의 경우는 수퍼 유저 또는 데이터베이스 소유자 만이 복제 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datallowconn&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;데이터베이스에 연결할 수 있는지 여부 (template0의 데이터 변경을 방지하기 위해 사용)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datconnlimit&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;동시 연결의 최대 수 (-1은 무제한)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datlastsysoid&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;데이터베이스 최종 시스템 OID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datfrozenxid&lt;/td&gt;
&lt;td&gt;xid&lt;/td&gt;
&lt;td&gt;이 데이터베이스에서 이 값보다 이전 트랜잭션 ID는 영속적인(동결 된) 트랜잭션 ID를 갖도록 변경되어 있다. 이는 이 데이터베이스에 대해 트랜잭션 ID 순환(wraparound) 문제를 방지하고, pg_xact을 축소시키는 것을 목적으로 한진공 작업을 수행할 것인지 여부를 추적하기 위해 사용된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datminmxid&lt;/td&gt;
&lt;td&gt;xid&lt;/td&gt;
&lt;td&gt;이 데이터베이스 내에 트랜잭션 ID로 대체되기 전에 모든 멀티 트랜잭션 ID이다. 이는 트랜잭션 ID 순환(wraparound) 문제를 방지하거나 pg_multixact을 축소시키기 위해 데이터베이스를 진공해야하는지 여부를 추적하는 데 사용된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dattablespace&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;데이터베이스의 기본 테이블 공간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;datacl&lt;/td&gt;
&lt;td&gt;aclitem []&lt;/td&gt;
&lt;td&gt;액세스 권한 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이번에는 pg_database에서 다음 컬럼에 대한 데이터를 조회해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# select datname, datdba, encoding, datcollate, datctype from pg_database;
  datname  | datdba | encoding |    datcollate    |     datctype
-----------+--------+----------+------------------+------------------
 postgres  |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
 template1 |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
 template0 |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
 sample    |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
 devkuma   |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
 devkuma2  |     10 |        6 | Korean_Korea.949 | Korean_Korea.949
(6개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성 된 데이터베이스 목록이 조회해 된 것을 볼수 있다.&lt;/p&gt;
&lt;p&gt;여기서 데이터베이스의 소유자를 나타내는 &lt;strong&gt;datdba&lt;/strong&gt;은 역할에 대한 데이터를 관리하는 시스템 카탈로그 pg_authid의 oid 값이 표시되어 있기 때문에 실제 역할 이름을 얻으려면 pg_authid의 rolname를 참조해야 한다. 그리고 문자 셋을 나타내는 &lt;strong&gt;encoding&lt;/strong&gt;은 pg_encoding_to_char 함수를 사용하면 실제 문자 셋 이름을 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# select datname,
postgres-#     pg_authid.rolname as dbrollname,
postgres-#     pg_encoding_to_char(encoding) as dbencoding,
postgres-#     datcollate,
postgres-#     datctype
postgres-#   from pg_database
postgres-#   join pg_authid on pg_authid.oid = pg_database.datdba;
  datname  | dbrollname | dbencoding |    datcollate    |     datctype
-----------+------------+------------+------------------+------------------
 devkuma2  | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
 devkuma   | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
 sample    | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
 template0 | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
 template1 | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
 postgres  | postgres   | UTF8       | Korean_Korea.949 | Korean_Korea.949
(6개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스 소유자 또는 문자 셋을 사용하여 데이터베이스의 목록을 죄회 할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;생성 된 데이터베이스 목록을 가져 오는 방법에 대해 설명했습니다.&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/12/catalog-pg-database.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.org/docs/12/catalog-pg-database.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database) | 지정된 데이터베이스에 연결</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%A7%80%EC%A0%95%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%A7%80%EC%A0%95%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-%EC%97%B0%EA%B2%B0/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에 연결할 때 모든 데이터베이스에 연결하는 방법과 psql에서 현재 연결된 데이터베이스와 다른 데이터베이스에 연결하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h1 id=&#34;psql-옵션을-사용하여-연결하는-데이터베이스-지정&#34;&gt;psql 옵션을 사용하여 연결하는 데이터베이스 지정&lt;/h1&gt;
&lt;p&gt;psql을 사용하여 PostgreSQL에 연결할 때 연결하는 데이터베이스를 지정하지 않으면 연결하는 역할과 동일한 이름의 데이터베이스에 연결한다.&lt;/p&gt;
&lt;p&gt;예를 들어, 다음과 같이 역할로 postgres를 사용하여 연결하는 경우 역할 이름과 같은 postgres 데이터베이스에 연결한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=#   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 프롬프트에 현재 접속중인 데이터베이스명이 표시된다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결된 데이터베이스 이름은 프롬프트에 표시된다.&lt;/p&gt;
&lt;h1 id=&#34;c-명령을-사용하여-데이터베이스에-연결&#34;&gt;\c 명령을 사용하여 데이터베이스에 연결&lt;/h1&gt;
&lt;p&gt;psql을 사용하여 PostgreSQL에 접속한 뒤 현재 연결된 데이터베이스와 다른 데이터베이스에 연결하려면 psql의 메타 명령 중 하나인 &lt;code&gt;\c&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;그럼 devkum 데이터베이스에 연결을 시도한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# \c devkuma
접속정보: 데이터베이스=&amp;#34;devkuma&amp;#34;, 사용자=&amp;#34;postgres&amp;#34;.
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;devkuma 데이터베이스에 연결되었다. 프롬프트에 표시되는 데이터베이스 이름도 devkuma로 변경 되었다. (&lt;code&gt;\c&lt;/code&gt; 대신 &lt;code&gt;\connect&lt;/code&gt;를 사용할 수도 있다)&lt;/p&gt;
&lt;h2 id=&#34;현재-연결된-데이터베이스-이름-조회&#34;&gt;현재 연결된 데이터베이스 이름 조회&lt;/h2&gt;
&lt;p&gt;PostgreSQL에서 제공되는 current_database 함수를 사용하면 현재 연결된 데이터베이스 이름을 조회할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select current_database();
 current_database
------------------
 devkuma
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결된 데이터베이스인 devkuma가 조회되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 지정된 데이터베이스에 연결하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database) | 데이터베이스 변경 (ALTER DATABASE)</title>
      <link>https://www.devkuma.com/docs/postgresql/alter-database/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/alter-database/</guid>
      <description>
        
        
        &lt;p&gt;ALTER DATABASE 명령을 사용하여 생성된 데이터베이스를 변경하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;데이터베이스-설정-변경&#34;&gt;데이터베이스 설정 변경&lt;/h2&gt;
&lt;p&gt;먼저 데이터베이스마다 설정을 변경하는 방법에 대해 알아보자. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER DATABASE name [ [ WITH ] option [ ... ] ]

option : 
    ALLOW_CONNECTIONS allowconn
    CONNECTION LIMIT connlimit
    IS_TEMPLATE istemplate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스(name)의 설정을 변경한다. 변경할 수 있는 설정은 데이터베이스를 만들 때 설정 할 수있는 ALLOW_CONNECTIONS, CONNECTION LIMIT, IS_TEMPLATE 3가지 이다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 설정을 변경하려면, 명령을 수행하는 역할이 수퍼 유저이거나 데이터베이스 소유자이어야  한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 먼저 수퍼 유저의 역할 hamster 데이터베이스를 만든다. 이때 동시 연결 수를 설정하는 CONNECTION LIMIT를 5로 설정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create database hamster connection limit 5;
CREATE DATABASE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스가 작성되었다. 확인을 위해 시스템 카탈로그의 하나 인 pg_database에서 데이터베이스 목록과 동시 연결 수를 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select datname, datconnlimit from pg_database;
  datname  | datconnlimit
-----------+--------------
 postgres  |           -1
 template1 |           -1
 template0 |           -1
 sample    |           -1
 devkuma   |           -1
 devkuma2  |           -1
 hamster   |            5
(7개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hamster 데이터베이스가 작성되고 있고, 동시 연결 수가 5로 되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면 ALTER DATABASE 명령을 사용하여 hamster 데이터베이스의 동시 연결 수를 3으로 변경하려고 한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter database hamster connection limit 3;
ALTER DATABASE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;동시 연결 수가 3으로 변경되었다. 확인을 위해 다시 pg_database에서 데이터베이스 목록과 동시 연결 수를 조회한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select datname, datconnlimit from pg_database;
  datname  | datconnlimit
-----------+--------------
 postgres  |           -1
 template1 |           -1
 template0 |           -1
 sample    |           -1
 devkuma   |           -1
 devkuma2  |           -1
 hamster   |            3
(7개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hamster 데이터베이스의 동시 연결 수가 3으로 되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;데이터베이스-이름-변경&#34;&gt;데이터베이스 이름 변경&lt;/h2&gt;
&lt;p&gt;다음 데이터베이스의 이름을 변경하는 방법에 대해 알아보자. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER DATABASE name RENAME TO new_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스(name) 이름을 다른 이름(new_name)으로 변경한다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 이름을 변경하려면, 명령을 수행하는 역할이 수퍼 유저 또는 데이터베이스 소유자이면서 CREATEDB 권한을 가지고 있어야 한다. 연결된 데이터베이스의 이름을 변경할 수 없다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 방금 만든 hamster 데이터베이스의 이름을 rabbit로 변경한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter database hamster rename to rabbit;
ALTER DATABASE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스의 이름을 변경 할 수 있었다. 확인을 위해 pg_database에서 데이터베이스 목록을 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select datname, pg_authid.rolname as dbrollname
devkuma-#   from pg_database
devkuma-#   join pg_authid on pg_authid.oid = pg_database.datdba;
  datname  | dbrollname
-----------+------------
 rabbit    | postgres   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; hamster에서 rabbit으로 변경
 devkuma2  | postgres
 devkuma   | postgres
 sample    | postgres
 template0 | postgres
 template1 | postgres
 postgres  | postgres
(7개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hamster 데이터베이스의 이름이 rabbit으로 바뀌어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;데이터베이스-소유자를-변경&#34;&gt;데이터베이스 소유자를 변경&lt;/h2&gt;
&lt;p&gt;다음 데이터베이스의 소유자를 변경하는 방법이다. 다음 형식을 사용한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER DATABASE name OWNER TO {new_owner | CURRENT_USER | SESSION_USER}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스(name)의 소유자를 다른 역할(new_owner)로 변경한다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 이름을 변경하려면, 명령을 수행하는 역할이 수퍼 유저이거나 데이터베이스 소유자이면서 새로운 소유자의 직접 또는 간접적으로 멤버이며, CREATEDB 권한을 가지고 있어야 한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 한다. 생성된 rabbit 데이터베이스의 소유자는 현재 postgres 역할이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \l rabbit
                               데이터베이스 목록
  이름  |  소유주  | 인코딩 |     Collate      |      Ctype       | 액세스 권한
--------+----------+--------+------------------+------------------+-------------
 rabbit | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;rabbit 데이터베이스의 소유자를 orange 역할로 변경하려고 한다.
먼저, orange 역할을 만들고, 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create role orange with login password &amp;#39;apple&amp;#39;;
CREATE ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스의 소유자가 변경되었다. 확인을 위해 다시 &lt;code&gt;\l&lt;/code&gt; 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter database rabbit owner to orange;
ALTER DATABASE
devkuma=# \l rabbit
                              데이터베이스 목록
  이름  | 소유주 | 인코딩 |     Collate      |      Ctype       | 액세스 권한
--------+--------+--------+------------------+------------------+-------------
 rabbit | orange | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;rabbit 데이터베이스의 소유자가 orange 역할로 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;그-밖에&#34;&gt;그 밖에&lt;/h2&gt;
&lt;p&gt;ALTER DATABASE 명령에는 그 밖에 다음과 같은 형식이 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER DATABASE name SET TABLESPACE new_tablespace

ALTER DATABASE name SET configuration_parameter { TO | = } { value | DEFAULT }
ALTER DATABASE name SET configuration_parameter FROM CURRENT
ALTER DATABASE name RESET configuration_parameter
ALTER DATABASE name RESET ALL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 ALTER DATABASE 명령을 사용하여 데이터베이스를 변경하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 데이터베이스(Database) | 데이터베이스 삭제 (DROP DATABASE)</title>
      <link>https://www.devkuma.com/docs/postgresql/drop-database/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/drop-database/</guid>
      <description>
        
        
        &lt;p&gt;DROP DATABASE 명령을 사용하여 생성 된 데이터베이스를 삭제하는 방법에 대해 설명합니다.&lt;/p&gt;
&lt;h2 id=&#34;데이터베이스-삭제&#34;&gt;데이터베이스 삭제&lt;/h2&gt;
&lt;p&gt;생성된 데이터베이스를 삭제하려면 DROP DATABASE 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;DROP&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;DATABASE&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;EXISTS&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;삭제할 데이터베이스 이름(name)을 지정하여 데이터베이스를 삭제한다.&lt;/p&gt;
&lt;p&gt;데이터베이스를 삭제하려면 명령을 수행하는 역할이 수퍼 유저이거나 데이터베이스 소유자여야 한다. 또한 명령을 실행하려는 역할이나 다른 역할이 삭제하려는 데이터베이스에 연결되어 있는 동안은 제거할 수 없다. 삭제하려는 데이터베이스와 다른 데이터베이스에 연결하여 제거해야 한다. (다른 데이터베이스에 연결하는 방법은 &amp;ldquo;&lt;a href=&#34;https://www.devkuma.com/books/pages/1458&#34;&gt;지정된 데이터베이스에 연결&lt;/a&gt;&amp;ldquo;를 참조하도록 한다)&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 실제로 해보도록 하자. 생성된 devkuma2 데이터베이스를 제거한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# drop database devkuma2;
DROP DATABASE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터베이스가 삭제되었다.&lt;/p&gt;
&lt;p&gt;그러고 데이터베이스 목록을 표시하여 확인해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \l
                                      데이터베이스 목록
   이름    |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
-----------+----------+--------+------------------+------------------+-----------------------
 devkuma   | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 postgres  | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 rabbit    | orange   | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 sample    | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
 template0 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
 template1 | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =c/postgres          +
           |          |        |                  |                  | postgres=CTc/postgres
(6개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;방금 삭제한 devkuma2는 데이터베이스 목록에 표시되지 않는 것으로 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;연결된 데이터베이스를 삭제하려고 하면 어떻게되는지 확인해 보도록 하다.  devkuma 데이터베이스에 연결한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \c devkuma
접속정보: 데이터베이스=&amp;#34;devkuma&amp;#34;, 사용자=&amp;#34;postgres&amp;#34;.
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mydb 데이터베이스에 연결되어 있는 상태에서 devkuma 데이터베이스를 삭제해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# drop database devkuma;
오류:  현재 열려 있는 데이터베이스는 삭제할 수 없습니다
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같이 &amp;ldquo;&lt;strong&gt;오류:  현재 열려 있는 데이터베이스는 삭제할 수 없습니다&lt;/strong&gt;&amp;ldquo;라고 오류가 표시되고 데이터베이스 삭제에 실패한다.&lt;/p&gt;
&lt;p&gt;이처럼 현재 연결되어있는 데이터베이스를 삭제할 수 없다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 DROP DATABASE 명령을 사용하여 데이터베이스를 삭제하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-schema/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-schema/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서는 동일한 데이터베이스에 여러 스키마라는 것을 만들 수 있다. 테이블이나 함수는 스키마에 작성된 동일한 데이터베이스라도 다른 스키마하면 같은 이름의 테이블을 만들 수 있다. 여기에서는 스키마 생성 및 삭제 등 스키마의 사용 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;스키마-생성&#34;&gt;스키마 생성&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE SCHEMA schema_name AUTHORIZATION username;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;스키마-이름-변경&#34;&gt;스키마 이름 변경&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER SCHEMA schema_name RENAME TO new_schema_name;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;스키마-소유자-변경&#34;&gt;스키마 소유자 변경&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER SCHEMA username OWNER TO new_username;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;스키마-삭제&#34;&gt;스키마 삭제&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DROP SCHEMA schema_name CASCADE;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/10/static/sql-createschema.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.postgresql.org/docs/10/static/sql-createschema.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 데이터베이스, 스키마, 테이블의 관계</title>
      <link>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B4%80%EA%B3%84/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B4%80%EA%B3%84/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서는 데이터베이스와 테이블과는 다른 스키마라는 것이 존재한다. 여기에서는 PostgreSQL의 데이터베이스 스키마 및 테이블의 관계에 대해 간략하게 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;postgresql의-데이터베이스-스키마-테이블의-관계&#34;&gt;PostgreSQL의 데이터베이스 스키마, 테이블의 관계&lt;/h2&gt;
&lt;p&gt;PostgreSQL의 데이터베이스 스키마 및 테이블의 관계에 대해 간략하게 설명한다.&lt;/p&gt;
&lt;h3 id=&#34;데이터베이스&#34;&gt;데이터베이스&lt;/h3&gt;
&lt;p&gt;PostgreSQL에서는 여러 데이터베이스를 관리할 수 있다. 설치한 직후는 템플릿 데이터베이스인 template0와 template1, 그리고 postgres라는 데이터베이스가 만들어진다. (이러한 데이터베이스가 모와서 데이터베이스 클러스터라고 부른다).&lt;/p&gt;
&lt;p&gt;데이터베이스는 작성 권한이 있으면 신규로 추가 할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;스키마&#34;&gt;스키마&lt;/h3&gt;
&lt;p&gt;PostgreSQL에서 실제 데이터는 테이블에 저장된다. 테이블은 목적에 따라 여러 개 만들 수 있고 그것을 정리된 것이 데이터베이스이며,  거기에 PostgreSQL에서는 데이터베이스에 스키마라는 것이 있다.&lt;/p&gt;
&lt;p&gt;스키마는 데이터베이스에 작성되는 테이블이나 함수 등의 개체를 그룹화하는 것이다. 스키마가 다르면 동일한 데이터베이스에도 동일한 테이블 이름으로 테이블을 만들 수 있다. 데이터베이스를 작성하면 자동으로 public라는 특별한 스키마가 작성된다.&lt;/p&gt;
&lt;p&gt;public 스키마는 기본적으로 모든 역할에 권한과 CREATE 권한이 부여되며, public 스키마에 어떤 역할도 테이블을 만들 수 있다.&lt;/p&gt;
&lt;p&gt;public 스키마와는 별도로 스키마를 데이터베이스에 만들 수 있다. 다른 데이터베이스 시스템에서는 사용자 이름과 동일한 이름의 스키마 이름을 가진 스키마만 작성할 수 없는 것도 있지만, PostgreSQL에서는 모든 이름의 스키마를 만들 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;테이블&#34;&gt;테이블&lt;/h3&gt;
&lt;p&gt;테이블은 스키마에 작성한다. 스키마가 다르면 같은 테이블 이름의 테이블도 만들 수 있다. 또한 스키마마다 테이블 등의 오브젝트를 작성할 수있는 권한을 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;CREATE TABLE 명령으로 테이블을 만들 경우 테이블 이름에 스키마를 생략하면 기본적으로 public 스키마에 테이블이 만들어 진다. (역할 이름과 같은 스키마가 생성 된 경우는 제외)&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL의 데이터베이스와 테이블 및 스키마와의 관계에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 스키마 생성(CREATE SCHEMA)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%83%9D%EC%84%B1-create-schema/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%83%9D%EC%84%B1-create-schema/</guid>
      <description>
        
        
        &lt;p&gt;CREATE SCHEMA 명령을 사용하여 PostgreSQL로 스키마를 새로 만드는 방법을 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;새로운-스키마-생성&#34;&gt;새로운 스키마 생성&lt;/h2&gt;
&lt;p&gt;스키마를 만들려면 CREATE SCHEMA 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE SCHEMA schema_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 이름(schema_name)를 지정하여 현재 연결된 데이터베이스에 새 스키마를 만든다. 스키마 이름은 임의의 이름을 지정할 수 있지만, &lt;code&gt;pg_&lt;/code&gt;로 시작하는 이름은 특별한 의미를 가지므로 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;스키마를 생성하려면 명령을 실행하는 역할이 수퍼 유저이거나 스키마를 만들 데이터베이스에서 CREATE 권한을 가지고 있어야한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 스키마를 생성할 데이터베이스에 연결한다. 이번에는 devkuma 데이터베이스에 스키마를 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \c devkuma
접속정보: 데이터베이스=&amp;#34;devkuma&amp;#34;, 사용자=&amp;#34;postgres&amp;#34;.
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;devkuma 데이터베이스에 현재 생성된 스키마를 확인하기 위해 psql 메타 명령 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
스키마(schema) 목록
  이름  |  소유주
--------+----------
 public | postgres
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;기본적으로 생성되는 public 스키마가 생성되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면 새로운 스키마를 만든다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create schema myschema;
CREATE SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;새로운 스키마가 작성되었다. 확인을 위해 다시 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 myschema | postgres
 public   | postgres
(2개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;myschema 스키마가 생성되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;생성할-스키마의-소유자-지정&#34;&gt;생성할 스키마의 소유자 지정&lt;/h2&gt;
&lt;p&gt;스키마를 작성한 경우 작성된 스키마의 소유자는 스키마를 만든 역할되지만 소유자로 다른 역할을 지정하여 스키마를 만들 수 있다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE SCHEMA schema_name AUTHORIZATION role_specification
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 이름 (schema_name)과 스키마의 소유자(role_specification)를 지정해 새로운 스키마를 만든다. 이 형식으로 스키마를 만들려면 명령을 수행하는 역할이 소유하는 롤의 직접 또는 간접적인 구성원이거나 수퍼 유저이여야 한다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보록 하자. 스키마를 만들 데이터베이스에 연결한 후 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create schema orange_schema authorization orange;
CREATE SCHEMA
devkuma=# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;moorangemo 역할을 소유자로 orange_schema 스키마를 작성하였다. 확인을 위해 \dn 명령을 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
   스키마(schema) 목록
     이름      |  소유주
---------------+----------
 myschema      | postgres
 orange_schema | orange
 public        | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이미 생성된 스키마 이외에 orange 역할이 소유자인 orange_schema가 새로 생성되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;새로운-스키마를-생성할때-스키마에-테이블과-같은-개체를-생성하기&#34;&gt;새로운 스키마를 생성할때 스키마에 테이블과 같은 개체를 생성하기&lt;/h2&gt;
&lt;p&gt;새로운 스키마를 만들 때, 스키마에 테이블이나 인덱스와 같은 개체를 동시에 만들 수 있다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE SCHEMA schema_name
  [ AUTHORIZATION role_specification ] 
  schema_element [ ... ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;schema_element에 동시에 작성하는 SQL 명령을 작성한다. 작성할 수 있는 명령은 CREATE TABLE, CREATE VIEW, CREATE INDEX, CREATE SEQUENCE, CREATE TRIGGER, GRANT 중 하나이다. 여러 명령을 하는 경우에는 SQL 명령의 마지막에 세미콜론 (;)을 하지 말아야 한다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보록 하자. 스키마를 생성할 때 데이터베이스에 연결한 후 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create schema testschema create table testtbl (id integer);
CREATE SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;testschema 스키마를 생성하고 생성된 스키마에 testtbl 테이블을 만들었다. 확인을 위해 &lt;code&gt;\dt&lt;/code&gt; 명령을 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dt testschema.*
         릴레이션(relation) 목록
   스키마   |  이름   |  종류  |  소유주
------------+---------+--------+----------
 testschema | testtbl | 테이블 | postgres
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;만든 testschema에 testtbl 테이블이 생성되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 CREATE SCHEMA 명령을 사용하여 새 스키마를 만드는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 생성된 스키마 목록 조회</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL에서 이미 생성된 스키마 목록을 조회하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;dn-명령을-사용하여&#34;&gt;\dn 명령을 사용하여&lt;/h2&gt;
&lt;p&gt;먼저 psql의 메타 명령을 사용하는 방법에 대해 알아보자. 이미 생성된 스키마 목록을 조회하려면 대상 데이터베이스에 연결하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
   스키마(schema) 목록
     이름      |  소유주
---------------+----------
 myschema      | postgres
 orange_schema | orange
 public        | postgres
 testschema    | postgres
(4개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결되어 있는 devkuma 데이터베이스에는 기본적으로 생성되는 public 스키마 외에 postgres 역할 소유자의 myschema 스키마와 orange 역할 소유자 orange_schema 스키마가 생성되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\dn&lt;/code&gt; 명령에 &lt;code&gt;+&lt;/code&gt;를 추가하여실행하면 스키마의 기본 정보에 추가된 액세스 권한을 포함하여 조회할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn+
                           스키마(schema) 목록
     이름      |  소유주  |     액세스 권한      |          설명
---------------+----------+----------------------+------------------------
 myschema      | postgres |                      |
 orange_schema | orange   |                      |
 public        | postgres | postgres=UC/postgres+| standard public schema
               |          | =UC/postgres         |
 testschema    | postgres |                      |
(4개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다른 데이터베이스에 연결하여 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행하게 되면,  새로 연결된 데이터베이스에서 생성된 스키마 목록을 조회된다.  아래와 같이 postgres 데이터베이스에 연결하여 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \c postgres
접속정보: 데이터베이스=&amp;#34;postgres&amp;#34;, 사용자=&amp;#34;postgres&amp;#34;.
postgres=# \dn
스키마(schema) 목록
  이름  |  소유주
--------+----------
 public | postgres
(1개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결된 ostgres 데이터베이스는 기본적으로 생성되는 public 스키마만 생성되어 있었습니다.&lt;/p&gt;
&lt;h2 id=&#34;시스템-카탈로그-pg_namespace-조회&#34;&gt;시스템 카탈로그 pg_namespace 조회&lt;/h2&gt;
&lt;p&gt;이어서 PostgreSQL 시스템 카탈로그의 하나인 pg_namespace에서 얻을 수있는 방법에 대해 알아보자. 시스템 카탈로그는 PostgreSQL의 관리 시스템이 사용하는 테이블에서 데이터베이스 및 테이블 등의 정보를 관리하는 데 사용한다. pg_namespace에는 다음과 같은 열이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;데이터 형식&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;식별자 (명시적으로 지정하지 않으면 얻을 수 없다)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nspname&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;네임스페이스의 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nspowner&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;이름 공간의 소유자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nspacl&lt;/td&gt;
&lt;td&gt;aclitem[]&lt;/td&gt;
&lt;td&gt;액세스 권한 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;그러면 대상 데이터베이스에 연결하여 이번에는 pg_namespace에서 다음 컬럼에 대한 데이터를 조회해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select nspname, nspowner, nspacl from pg_namespace;
      nspname       | nspowner |               nspacl
--------------------+----------+-------------------------------------
 pg_toast           |       10 |
 pg_temp_1          |       10 |
 pg_toast_temp_1    |       10 |
 pg_catalog         |       10 | {postgres=UC/postgres,=U/postgres}
 public             |       10 | {postgres=UC/postgres,=UC/postgres}
 information_schema |       10 | {postgres=UC/postgres,=U/postgres}
 myschema           |       10 |
 orange_schema      |    24635 |
 testschema         |       10 |
(9개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결된 데이터베이스에 포함된 스키마 목록을 조회하였다. (&lt;code&gt;pg_&lt;/code&gt;으로 시작되는 스키마는 PostgreSQL 시스템에서 사용한다. 또 information_schema도 시스템에서 사용하는 것이다.)&lt;/p&gt;
&lt;p&gt;또한 스키마의 소유자를 나타내는 nspowner은 역할에 대한 데이터를 관리하는 시스템 카탈로그 pg_authid의 oid 값이 표시되어 있기 때문에 실제 역할 이름을 얻으려면 pg_authid의 rolname를 참조한다. 예를 들어, 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select nspname, pg_authid.rolname as schemaowner, nspacl
devkuma-#   from pg_namespace
devkuma-#   join pg_authid on pg_authid.oid = pg_namespace.nspowner;
      nspname       | schemaowner |               nspacl
--------------------+-------------+-------------------------------------
 pg_toast           | postgres    |
 pg_temp_1          | postgres    |
 pg_toast_temp_1    | postgres    |
 pg_catalog         | postgres    | {postgres=UC/postgres,=U/postgres}
 public             | postgres    | {postgres=UC/postgres,=UC/postgres}
 information_schema | postgres    | {postgres=UC/postgres,=U/postgres}
 myschema           | postgres    |
 orange_schema      | orange      |
 testschema         | postgres    |
(9개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마의 소유자 역할 이름을 포함하여 스키마의 목록을 조회가 되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 생성된 스키마 목록을 검색하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 스키마 검색 경로를 설정하기</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EA%B2%80%EC%83%89-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EA%B2%80%EC%83%89-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
      <description>
        
        
        &lt;p&gt;스키마 이름을 생략하여 테이블 등의 객체를 지정하는 경우에 실제로는 어떤 스키마 안의 객체인지 찾기 위해서 사용되는 스키마 검색 경로 설정 방법과 사용법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;스키마-검색-경로란&#34;&gt;스키마 검색 경로란?&lt;/h2&gt;
&lt;p&gt;테이블 등의 객체는 스키마에 생성된 스키마마다 같은 이름의 테이블을 만들 수 있기에, 어떤 테이블을 명확히 하려면 &amp;ldquo;스키마명.테이블명&amp;quot;과 같이지정해야 한다.&lt;/p&gt;
&lt;p&gt;예를 들어, schemaA 스키마에 staff 테이블이 있고, schemaB 스키마에 같은 이름의 staff 테이블이 있는 경우에 단순히 staff 테이블을 지정하면 두 스키마 중 staff 테이블인지 모르게 된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from staff;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;테이블을 명확히 지정하려면 schemaA.staff과 schemaB.staff 등과 같이 &amp;ldquo;스키마명.테이블명&amp;quot;으로 지정해야 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from schemaA.staff;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;매번 스키마명을 넣어야 한다면 귀찮아 지기에 스키마명을 생략하기 위해 어떤 스키마인지를 설정할 수 있다. 이 설정이 스키마 검색 경로이다. 스키마 검색 경로에는 여러 스키마를 설정해 둘 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;스키마명1, 스키마명2 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어, 스키마가 생략하고 테이블명만 작성되면, 스키마 검색 경로의 시작부터 스키마에 테이블명이 존재하는지 여부를 확인하고 있다. 일치하는 테이블을 찾게 되면 그 스키마에 테이블명으로 판단하게 된다.&lt;/p&gt;
&lt;p&gt;그럼 구체적으로 스키마 검색 경로의 사용법과 설정 방법에 대해 알아 보자.&lt;/p&gt;
&lt;h2 id=&#34;스키마-검색-경로의-현재-설정-값을-확인하기&#34;&gt;스키마 검색 경로의 현재 설정 값을 확인하기&lt;/h2&gt;
&lt;p&gt;스키마 검색 경로에 설정되어 있는 값을 확인하려면 다음과 같이 수행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# show search_path;
   search_path
-----------------
 &amp;#34;$user&amp;#34;, public
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음과 같이 조회하였다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; &amp;#34;$user&amp;#34;, public
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로는 스키마를 쉼표(,)로 구분하고 있다. 앞에 언급되어 있는 &lt;code&gt;&amp;quot;$user&amp;quot;&lt;/code&gt;는 현재의 역할과 동일한 이름의 스키마를 나타낸다. 현재는 postgres 역할로 연결되어 있어서 다음과 같이 기술되어 있던 것과 동일하다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres, public
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;스키마-검색-경로가-사용되는-방법&#34;&gt;스키마 검색 경로가 사용되는 방법&lt;/h2&gt;
&lt;p&gt;스키마 검색 경로는 SELECT 등의 기존의 테이블을 찾는 경우와 CREATE 등의 새로운 테이블을 생성하는 경우에 사용되는 방법이 조금 다르다.&lt;/p&gt;
&lt;p&gt;먼저 테이블을 찾는 경우이다. 테이블에서 데이터를 검색하는 경우에 스키마명을 생략하고 테이블명만을 작성하면 스키마 검색 경로에 나열된 스키마를 처음부터 순서대로 테이블이 존재하는지 여부를 확인하게 된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 스키마 검색 경로는 다음과 같이 되어 있다고 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schemaA, schemaB, schemaC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기에서 예를 들어 다음과 같이 스키마를 생략하고 테이블 이름을 지정하고 데이터를 검색하게 되면&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from mytbl;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;먼저 schemaA 스키마에 mytbl이 있는지 여부를 확인한다. 발견되면 schemaA.mytbl로 데이터를 가져온다. 발견되지 않으면 schemaB 스키마에 mytbl이 있는지 여부를 확인하게 된다. 이 과정을 이 스키마 검색 경로에 설정되어 있는 스키마의 수 만큼 반복하게 된다.&lt;/p&gt;
&lt;p&gt;마지막까지 발견되지 않았던 경우는 에러가 발생하게 된다. 스키마 검색 경로에 기재되지 않은 스키마가 따로있더라도 체크되지 않는다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;다음은 테이블을 생성할 경우이다. 스키마명을 생략하고 테이블명을 작성하게 되면 스키마 검색 경로에 나열된 스키마가 존재하는지 여부를 확인할 것이다. 실재하는 스키마가 발견된 경우 그 스키마에서 테이블을 만든다.&lt;/p&gt;
&lt;p&gt;예를 들어, 스키마 검색 경로는 다음과 같이 되어 있다고 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schemaA, schemaB, schemaC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;먼저 schemaA부터 확인하고 있고, 실제로 존재하는 스키마가 발견되면 경우에는 그 스키마가 현재 스키마되 된다.&lt;/p&gt;
&lt;p&gt;여기에서 다음과 같이 스키마명을 생략하여 테이블을 작성하게 되면, 현재의 스키마에 테이블이 만들어 진다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create table mytbl (...);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 테이블을 만들어 보도록 하자. 현재 수퍼 유저 postgres 역할로 devkuma 데이터베이스에 연결되어 있다. 스키마 검색 경로는 기본 상태이므로 다음과 같이 되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;$user&amp;#34;, public
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;devkuma 데이터베이스에는 역할 이름과 같은 postgres 스키마가 생성되지 않으므로 스키마 검색 경로에서 최초로 실재하는 스키마는 public이다. 따라서 스키마를 생략하여 테이블을 만들게 되면 public 스키마에 테이블이 만들어 진다.&lt;/p&gt;
&lt;p&gt;는 다음과 같이 실행하여 테이블을 작성하십시오.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create table memo (id integer, memo text);
CREATE TABLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;테이블이 생성되었다. 확인을 위해 psql 메타 명령인 &lt;code&gt;\dt&lt;/code&gt;를 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dt
      릴레이션(relation) 목록
 스키마 | 이름 |  종류  |  소유주
--------+------+--------+----------
 public | memo | 테이블 | postgres
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;public 스키마에 방금 만든 memo 테이블이 생성되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;스키마-검색-경로를-변경하기&#34;&gt;스키마 검색 경로를 변경하기&lt;/h2&gt;
&lt;p&gt;스키마 검색 경로를 현재 세션 동안만 일시적으로 변경하려면 SET 명령을 사용하여 변경한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SET search_path TO 스키마명1, 스키마명2, ...;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어 스키마 검색 경로를 myschema, public으로 설정하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# set search_path to myschema, public;
SET
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로가 변경되었다. 확인을 위해 &lt;code&gt;show search_path&lt;/code&gt;을 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# show search_path;
   search_path
------------------
 myschema, public
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로를 지정한 값으로 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;다음은 스키마 검색 경로를 영구적으로 변경하려는 경우에는 ALTER ROLE 명령을 사용하여 변경한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER ROLE user SET search_path = 스키마명1, 스키마명2 ...;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어, 스키마 검색 경로를 myschema, public으로 설정하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role postgres set search_path to myschema, public;
ALTER ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로를 변경하였다. 확인을 위해 한번 PostgreSQL과의 연결을 종료하고 다시 접속을 실시 show search_path을 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role postgres set search_path to myschema, public;
ALTER ROLE
devkuma=# \q

C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# show search_path;
   search_path
------------------
 myschema, public
(1개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로를 지정한 값으로 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;기본 값으로 되돌리려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;p&gt;alter role postgres set search_path to default;&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;모든 사용자의 기본 스키마 검색 경로를 변경하려면, PostgreSQL 설정 파일인 postgresql.conf 파일을 수정한다. (postgresql.conf 파일의 위치 등에 대해서는 &lt;a href=&#34;https://www.devkuma.com/books/pages/1439&#34;&gt;postgresql.conf 파일 설정 방법&lt;/a&gt;&amp;ldquo;을 참조하도록 하자)&lt;/p&gt;
&lt;p&gt;postgresql.conf 파일을 텍스트 편집기에서 연 후 다음과 같은 위치를 찾는다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#------------------------------------------------------------------------------
# CLIENT CONNECTION DEFAULTS
#------------------------------------------------------------------------------

# - Statement Behavior -

#client_min_messages = notice		# values in order of decreasing detail:
					#   debug5
					#   debug4
					#   debug3
					#   debug2
					#   debug1
					#   log
					#   notice
					#   warning
					#   error
#search_path = &amp;#39;&amp;#34;$user&amp;#34;, public&amp;#39;	# schema names
#row_security = on
#default_tablespace = &amp;#39;&amp;#39;		# a tablespace name, &amp;#39;&amp;#39; uses the default
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#search_path = &amp;#39;&amp;#34;$user&amp;#34;, public&amp;#39;	# schema names
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 search_path에 대한 설정은 주석으로 되어 있기에 첫 번째 &lt;code&gt;#&lt;/code&gt;을 제거한다. 그러고 기본 스키마 검색 경로를 설정하고자 하는 값을 설정한다. 여기서는 다음과 같이 설정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;search_path = &amp;#39;myschema, clientschema&amp;#39;    # schema names
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;변경했으면 postgresql.conf 파일을 저장한다. 그러고 PostgreSQL을 다시 시작한다.&lt;/p&gt;
&lt;p&gt;그런 다음 PostgreSQL에 연결하여 &lt;code&gt;show search_path&lt;/code&gt;을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=# show search_path;
   search_path
------------------
 myschema, clientschema
(1개 행)


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마 검색 경로의 기본 값이 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기까지 스키마 검색 경로의 설정과 사용법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 스키마 변경(ALTER SCHEMA)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%B3%80%EA%B2%BD-alter-schema/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%B3%80%EA%B2%BD-alter-schema/</guid>
      <description>
        
        
        &lt;p&gt;ALTER SCHEMA 명령을 사용하여 생성된 스키마를 변경하는 방법에 대해 설명한다. 변경이 가능한 것은 스키마의 이름과 소유자의 변경이다.&lt;/p&gt;
&lt;h2 id=&#34;스키마명-변경&#34;&gt;스키마명 변경&lt;/h2&gt;
&lt;p&gt;먼저 ALTER SCHEMA 명령을 사용하여 스키마명을 변경하는 방법이다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER SCHEMA name RENAME TO new_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 스키마의 이름(name)을 새 스키마 이름(new_name)으로 변경한다.&lt;/p&gt;
&lt;p&gt;스키마의 이름을 변경하려면 명령을 수행하는 역할이 수퍼 유저 또는 스키마의 소유자이고, 스키마가 작성되는 데이터베이스에서 CREATE 권한을 가지고 있어야 한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. psql 메타 명령인 &lt;code&gt;\dn&lt;/code&gt;을 실행하여 확인해 보면 현재 devkuma 데이터베이스는 기본적으로 생성되는 public 이외에 2 개의 스키마가 작성되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
   스키마(schema) 목록
     이름      |  소유주
---------------+----------
 myschema      | postgres
 orange_schema | orange
 public        | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 중 orange_schema 스키마의 이름을 fruit로 변경한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter schema orange_schema rename to fruit;
ALTER SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마의 이름이 변경되었다. 확인을 위해 다시&lt;code&gt;\dn&lt;/code&gt; 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 fruit    | orange
 myschema | postgres
 public   | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;orange_schema 스키마의 이름이 fruit 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;스키마의-소유자-변경&#34;&gt;스키마의 소유자 변경&lt;/h2&gt;
&lt;p&gt;다음으로 ALTER SCHEMA 명령을 사용하여 스키마의 소유자를 변경하는 방법이다. 방법은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER SCHEMA name OWNER TO new_owner
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마(name)을 새 스키마의 소유자(new_name)로 변경한다.&lt;/p&gt;
&lt;p&gt;스키마의 소유자를 변경하려면, 명령을 수행하는 역할이 수퍼 유저 또는 스키마의 소유자이면서 새로운 소유자의 직접 또는 간접적으로 구성원이고 스키마가 작성되는 데이터베이스에서 CREATE 권한을 가지고 있어야 한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. psql 메타 명령 &lt;code&gt;\dn&lt;/code&gt;을 실행하여 확인해 보면, 현재 devkuma 데이터베이스는 기본적으로 생성되는 public 이외에 2개의 스키마가 작성되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 fruit    | orange
 myschema | postgres
 public   | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 중에 fruit 스키마의 소유자를 kimkc 역할로 변경한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter schema fruit owner to kimkc;
오류:  &amp;#34;kimkc&amp;#34; 롤(role) 없음
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위와 같이 역할(role)이 없다면, 에러가 발생하기에 아래와 같이 역할을 하나 생성한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create role kimkc with superuser login password &amp;#39;1234&amp;#39;;
CREATE ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그럼 다음과 같이 다시 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter schema fruit owner to kimkc;
ALTER SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마의 소유자가 변경되었다. 확인을 위해 다시 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 fruit    | kimkc
 myschema | postgres
 public   | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fruit 스키마의 소유자가 kimkc 역할로 변경되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 ALTER SCHEMA 명령을 사용하여 생성된 스키마를 변경하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 스키마(Schema) | 스키마 삭제(DROP SCHEMA)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%82%AD%EC%A0%9C-drop-schema/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%82%AD%EC%A0%9C-drop-schema/</guid>
      <description>
        
        
        &lt;p&gt;DROP SCHEMA 명령을 사용하여 생성된 스키마를 삭제하는 방법에 대해 알아보자.&lt;/p&gt;
&lt;h2 id=&#34;스키마-삭제&#34;&gt;스키마 삭제&lt;/h2&gt;
&lt;p&gt;DROP SCHEMA 명령을 사용하여 스키마를 삭제하는 방법에 대해 알아보자. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DROP SCHEMA [ IF EXISTS ] name [, ...] [ CASCADE | RESTRICT ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;지정된 스키마 (name)을 제거한다. 스키마에 테이블과 같은 객체가 포함된 경우 CASCADE를 지정하면 객체를 포함하여 삭제한다. RESTRICT를 지정하면 삭제를 취소하게 된다. 기본값은 RESTRICT 이다.&lt;/p&gt;
&lt;p&gt;스키마를 삭제하려면 명령을 수행하는 역할이 수퍼 유저 또는 스키마의 소유자여야 한다. 그리고 CASCADE를 지정하게 되면 한번에 삭제되는 객체의 소유자가 따로 있어도 객체는 삭제된다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 일반 사용자 kimkc 역할 PostgreSQL의 devkuma 데이터베이스에 연결한다. psql 메타 명령 &lt;code&gt;\dn&lt;/code&gt;을 실행하여 확인 해 보면 현재이 데이터베이스에는 kimkc 역할 소유자인 fruit 스키마가 작성되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 fruit    | kimkc
 myschema | postgres
 public   | postgres
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fruit 스키마를 삭제한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# drop schema fruit;
DROP SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;스키마가 삭제되었다. 확인을 위해 다시 &lt;code&gt;\dn&lt;/code&gt; 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn
 스키마(schema) 목록
   이름   |  소유주
----------+----------
 myschema | postgres
 public   | postgres
(2개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fruit 스키마가 삭제된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그럼 다시 kimkc 롤을 사용하여 apple 스키마를 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U kimkc -d devkuma
kimkc 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

devkuma=# create schema apple;
CREATE SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kimkc 역할과 다른 수퍼 유저의 롤을 사용하여 apple 스키마에 테이블을 만든다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U postgres -d devkuma
postgres 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

devkuma=# create table apple.blog (id integer);
CREATE TABLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이제 apple 스키마에는 kimkc 역할과 다른 역할이 소유자의 테이블이 생성하였다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dt apple.*;
      릴레이션(relation) 목록
 스키마 | 이름 |  종류  |  소유주
--------+------+--------+----------
 apple  | blog | 테이블 | postgres
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 kimkc 역할을 사용하여 fruit 스키마를 제거하기 위해 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U kimkc -d devkuma
kimkc 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

devkuma=# drop schema apple;
오류:  기타 다른 개체들이 이 개체에 의존하고 있어, apple 스키마 삭제할 수 없음
상세정보:  apple.blog 테이블 의존대상: apple 스키마
힌트:  이 개체와 관계된 모든 개체들을 함께 삭제하려면 DROP ... CASCADE 명령을 사용하십시오
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러자 &amp;ldquo;&lt;strong&gt;오류:  기타 다른 개체들이 이 개체에 의존하고 있어, apple 스키마 삭제할 수 없음&lt;/strong&gt;&amp;ldquo;라는 오류 메시지가 표시되고 스키마를 삭제 할 수 없다.&lt;/p&gt;
&lt;p&gt;명시적으로 CASCADE를 지정하지 않으면 RESTRICT를 지정된 것과 같기에 스키마에서의 객체의 존재하기에 삭제가 되지 않는다.&lt;/p&gt;
&lt;p&gt;이번에는 CASCADE를 지정하여 apple 스키마를 삭제한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# drop schema apple cascade;
알림:  apple.blog 테이블 개체가 덩달아 삭제됨
DROP SCHEMA
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;apple 스키마가 삭제되었다. apple 스키마에 다른 소유자가 만든 테이블이 포함되어 있었지만 동시에 삭제되었다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 DROP SCHEMA 명령을 사용하여 생성된 스키마를 제거하는 방법을 알아 보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%82%AC%EC%9A%A9%EC%9E%90-role-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%82%AC%EC%9A%A9%EC%9E%90-role-%EC%83%9D%EC%84%B1/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL의 역할은 일반적으로 사용자와 그룹을 분류된다. 여기에서 역할 생성 및 삭제, 또한 역할에 대한 권한을 부여 절차 등에 대해 설명한다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 생성(CREATE ROLE)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%83%9D%EC%84%B1-create-role/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%83%9D%EC%84%B1-create-role/</guid>
      <description>
        
        
        &lt;p&gt;CREATE ROLE 명령을 사용하여 PostgreSQL에서 역할을 새로 만드는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;새-역할-만들기&#34;&gt;새 역할 만들기&lt;/h2&gt;
&lt;p&gt;새 역할을 만들려면 CREATE ROLE 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name [ [ WITH ] option [ ... ] ]

option:
      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | REPLICATION | NOREPLICATION
    | BYPASSRLS | NOBYPASSRLS
    | CONNECTION LIMIT connlimit
    | [ ENCRYPTED ] PASSWORD &amp;#39;password&amp;#39;
    | VALID UNTIL &amp;#39;timestamp&amp;#39;
    | IN ROLE role_name [, ...]
    | IN GROUP role_name [, ...]
    | ROLE role_name [, ...]
    | ADMIN role_name [, ...]
    | USER role_name [, ...]
    | SYSID uid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;옵션이 많지만, 역할을 사용하여 사용자 인증을 위한 목적이라면기본 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name [ WITH ] LOGIN PASSWORD &amp;#39;password&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;역할 이름(name)을 지정하고 클라이언트에서 PostgreSQL에 연결할 때 사용자 인증의 대상으로 사용 가능한 역할을 암호 인증 할 때 사용하는 비밀번호를 &lt;code&gt;(&#39;password&#39;)&lt;/code&gt;으로 만든다.&lt;/p&gt;
&lt;p&gt;역할을 만들려면 명령을 수행하는 역할이 수퍼 유저 또는 CREATEROLE 권한을 가지고 있어야 한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. psql에서 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# create role kuma with login password &amp;#39;bear&amp;#39;;
CREATE ROLE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이름이 kuma 이고, 인증 비밀번호가 bear의 새로운 역할이 생성되었다.&lt;/p&gt;
&lt;p&gt;그러면 생성된 역할을 조회해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \du
                                롤 목록
 롤 이름  |                      속성                      | 소속 그룹:
----------+------------------------------------------------+------------
 kimkc    | 슈퍼유저                                       | {}
 kuma     |                                                | {}
 orange   |                                                | {}
 postgres | 슈퍼유저, 롤 만들기, DB 만들기, 복제, RLS 통과 | {}


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PostgreSQL 설치시 자동으로 생성된 postgres 이외에 방금 만든 kuma가 추가되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;생성한-역할에-postgresql에-연결하기&#34;&gt;생성한 역할에 PostgreSQL에 연결하기&lt;/h2&gt;
&lt;p&gt;방금 만든 역할에서 PostgreSQL에 연결를 해보자. 명령 프롬프트에서 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psql -U kuma -d devkuma
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;psql을 사용하는 경우 연결하는 데이터베이스를 생략하면 역할 이름과 동일한 데이터베이스에 연결하기 때문에, kuma라는 데이터베이스를 만들지 않기도 해서 여기에서는 생성된 데이터베이스 이름을 명시적으로 지정하였다.&lt;/p&gt;
&lt;p&gt;다음과 같이 kuma 암호 입력 대기하므로 롤 만들 때 지정한 암호를 입력한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U kuma -d devkuma
kuma 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;saru 역할 PostgreSQL에 연결할 수있었습니다.&lt;/p&gt;
&lt;h2 id=&#34;create-role-명령-권한-옵션&#34;&gt;CREATE ROLE 명령 권한 옵션&lt;/h2&gt;
&lt;p&gt;CREATE ROLE 명령에서 지정 가능한 옵션에서 권한과 관련된 옵션에 대해 설명한다. 기타 옵션에 대해서는 필요할 때마다 설명하겠다.&lt;/p&gt;
&lt;h3 id=&#34;superuser-or-nosuperuser&#34;&gt;SUPERUSER or NOSUPERUSER&lt;/h3&gt;
&lt;p&gt;SUPERUSER를 지정하게 되면 작성하는 역할은 수퍼 유저가 된다. 수퍼 유저는 대부분의 권한을 가지게 되므로 만들 때주의가 필요하다. 최초에 PostgreSQL 설치할 때 자동으로 생성되는 postgres 역할은 슈퍼 유저이다. NOSUPERUSER을 지정하게 되면 수퍼 유저가 아닌 역할이 만들어진다.&lt;/p&gt;
&lt;p&gt;SUPERUSER를 지정하려면 다음과 같다. 이 옵션을 지정하지 않으면 기본적으로 NOSUPERUSER가 지정된 것으로 간주된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name WITH SUPERUSER
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;createdb-or-nocreatedb&#34;&gt;CREATEDB or NOCREATEDB&lt;/h3&gt;
&lt;p&gt;CREATEDB를 지정하게 되면 역할은 데이터베이스를 만들 수있는 권한을 가진다. NOCREATEDB을 지정한 경우 데이터베이스를 만들 수 없다.&lt;/p&gt;
&lt;p&gt;CREATEDB를 지정하려면 다음과 같다. 이 옵션을 지정하지 않으면 기본적으로 NOCREATEDB가 지정된 것으로 간주된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name WITH CREATEDB
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;createrole-or-nocreaterole&#34;&gt;CREATEROLE or NOCREATEROLE&lt;/h3&gt;
&lt;p&gt;CREATEROLE을 지정하게 되면 역할을 만들 권한을 갖는다. NOCREATEROLE를 지정하면 롤을 만들 수 없다.&lt;/p&gt;
&lt;p&gt;※ CREATEROLE 권한을 부여할 경우 주의가 필요하다. CREATEROLE 권한이 있는 역할은 자신이 가지고 있지 않은 권한을 가진 같은 역할을 새로 만들 수 있다. 따라서 CREATEROLE를 지정하게 되면 결과적으로 거의 모든 권한을 주는 것과 같은 의미를 가진다.&lt;/p&gt;
&lt;p&gt;CREATEROLE을 지정하려면 다음과 같다. 이 옵션을 지정하지 않으면 기본적으로 NOCREATEROLE가 지정된 것으로 간주된다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name WITH CREATEROLE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. CREATEDB 및 CREATEROLE을 지정된 새 역할  superkuma 을 만들려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# create role superkuma with createdb createrole login password &amp;#39;bear&amp;#39;;
CREATE ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이름이 superkuma의 새로운 역할이 만들어 졌다.&lt;/p&gt;
&lt;p&gt;그러면 생성 된 역할을 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du
                                 롤 목록
  롤 이름  |                      속성                      | 소속 그룹:
-----------+------------------------------------------------+------------
 kimkc     | 슈퍼유저                                       | {}
 kuma      |                                                | {}
 orange    |                                                | {}
 postgres  | 슈퍼유저, 롤 만들기, DB 만들기, 복제, RLS 통과 | {}
 superkuma | 롤 만들기, DB 만들기                           | {}


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;새로 만든 역할의 속성 부분을 보면 &amp;ldquo;롤 만들기, DB 만들기&amp;quot;라고 표시되어 있으며, CREATE ROLE 명령을 실행했을 때 지정한 CREATEDB 및 CREATEROLE 설정이 반영되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 CREATE ROLE 명령을 사용하여 새 역할을 만드는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 생성된 역할 조회</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EC%97%AD%ED%95%A0-%EC%A1%B0%ED%9A%8C/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%83%9D%EC%84%B1%EB%90%9C-%EC%97%AD%ED%95%A0-%EC%A1%B0%ED%9A%8C/</guid>
      <description>
        
        
        &lt;p&gt;PostgreSQL로 생성된 역할 목록을 검색하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;du-명령-사용&#34;&gt;\du 명령 사용&lt;/h2&gt;
&lt;p&gt;먼저 psql의 메타 명령을 사용하여 역할 목록을 조회하는 방법을 설명하겠다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du
                                 롤 목록
  롤 이름  |                      속성                      | 소속 그룹:
-----------+------------------------------------------------+------------
 kimkc     | 슈퍼유저                                       | {}
 kuma      |                                                | {}
 orange    |                                                | {}
 postgres  | 슈퍼유저, 롤 만들기, DB 만들기, 복제, RLS 통과 | {}
 superkuma | 롤 만들기, DB 만들기                           | {}


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;생성된 역할 목록이 조회 되었다. 역할마다 &amp;ldquo;롤 이름, 속성, 소속 그룹&amp;quot;의 정보가 표시된다.&lt;/p&gt;
&lt;h2 id=&#34;시스템-카탈로그-pg_roles으로-조회하기&#34;&gt;시스템 카탈로그 pg_roles으로 조회하기&lt;/h2&gt;
&lt;p&gt;이어 PostgreSQL 시스템 카탈로그의 하나인 pg_roles에서 역할 목록을 얻는 방법이다. pg_roles에는 다음과 같은 열이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;형&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rolname&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;역할 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolsuper&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;슈퍼 유저 권한의 유무&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolinherit&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;멤버 인 롤의 권한을 상속할지 여부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolcreaterole&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;역할 만들기 권한의 유무&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolcreatedb&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;데이터베이스 생성 권한이 있는지&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolcanlogin&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;로그인을 할 수있는 역할 여부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolreplication&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;복제에 대한 역할 여부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolconnlimit&lt;/td&gt;
&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;최대 동시 연결 수 (-1은 무제한)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolpassword&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;비밀번호 (다만, ********와 같이 표시)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolvaliduntil&lt;/td&gt;
&lt;td&gt;timestamptz&lt;/td&gt;
&lt;td&gt;암호 만료 (만료되지 않으면 NULL)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolbypassrls&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;모든 행 단위 보안 정책을 무시할지 여부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rolconfig&lt;/td&gt;
&lt;td&gt;text[]&lt;/td&gt;
&lt;td&gt;런타임 구성 변수에 대한 역할 별 기본&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;oid&lt;/td&gt;
&lt;td&gt;롤의 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;컬럼의 수가 많기에, 예를 들면 pg_roles에서 rolname과 rolsuper과 rolcanlogin 값을 조회해 본다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# select rolname, rolsuper, rolcanlogin from pg_roles;
          rolname          | rolsuper | rolcanlogin
---------------------------+----------+-------------
 pg_monitor                | f        | f
 pg_read_all_settings      | f        | f
 pg_read_all_stats         | f        | f
 pg_stat_scan_tables       | f        | f
 pg_read_server_files      | f        | f
 pg_write_server_files     | f        | f
 pg_execute_server_program | f        | f
 pg_signal_backend         | f        | f
 postgres                  | t        | t
 kuma                      | f        | t
 superkuma                 | f        | t
(11개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;역할 목록이 표시되었다. 이번에는 PostgreSQL 설치시 생성되는 postgres 역할과 나중에 만든 kuma 및 superkuma 역할 외에 &lt;code&gt;pg_&lt;/code&gt;가 붙는 역할이 많이 표시되었다. 이 역할들은 기본 역할들로써 스스로 만든 역할에 일시적으로 권한을 부여하는 경우 등에 이용된다.&lt;/p&gt;
&lt;p&gt;기본 역할 이외의 역할 목록을 표시할 경우에는 예를 들어 다음과 같이 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolname&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolsuper&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolcanlogin&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pg_roles&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;where&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolname&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;like&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;pg_%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolname&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolsuper&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rolcanlogin&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;-----------+----------+-------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kuma&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;superkuma&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;개&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;행&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;devkuma&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=#&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 PostgreSQL로 생성된 역할 목록을 검색하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 속성, 이름 변경(ALTER ROLE)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%86%8D%EC%84%B1-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-alter-role/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%86%8D%EC%84%B1-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-alter-role/</guid>
      <description>
        
        
        &lt;p&gt;ALTER ROLE 명령을 사용하여 생성된 역할에 속성을 변경할 수 있다. 역할의 속성에는 역할을 만들 때 설정한 수퍼 유저 여부와 데이터베이스 및 역할 생성 권한이 있는지 등이 있다. 여기에서 역할의 속성을 변경하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;역할의-속성-변경하기&#34;&gt;역할의 속성 변경하기&lt;/h2&gt;
&lt;p&gt;역할의 속성을 변경하려면 ALTER ROLE 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER ROLE role_name [ WITH ] option [ ... ]

option:
      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | REPLICATION | NOREPLICATION
    | BYPASSRLS | NOBYPASSRLS
    | CONNECTION LIMIT connlimit
    | [ ENCRYPTED ] PASSWORD &amp;#39;password&amp;#39;
    | VALID UNTIL &amp;#39;timestamp&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;변경 대상의 역할(role_name)의 속성을 변경한다. 변경하려는 속성에 대해 값을 설정하면 된다. 설정되지 않은 속성은 그대로 유지된다. 역할 이름을 지정하는 대신 현재 사용자를 나타내는 CURRENT_USER와 현재 세션 사용자를 나타내는 SESSION_USER를 지정할 수도 있다.&lt;/p&gt;
&lt;p&gt;역할을 만들 때 사용한 CREATE ROLE 명령에서 설정 가능한 항목은 ALTER ROLE 명령으로 변경할 수 있다. 그러나 역할을 그룹으로 사용하는 경우의 설정 항목에 대해서는 별도의 명령을 사용해야 한다.&lt;/p&gt;
&lt;p&gt;수퍼 유저는 모든 롤의 속성을 변경할 수 있다. CREATEROLE 권한을 가진 역할은 슈퍼 사용자 및 복제 이외의 역할의 속성을 변경할 수 있다. 다른 역할은 자신의 비밀번호를 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 수퍼 유저 postgres에서 PostgreSQL에 접속하여 생성된 역할 superkuma의 속성을 변경한다. superkuma 속성은 현재 다음과 같이 되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du superkuma
                    롤 목록
  롤 이름  |         속성         | 소속 그룹:
-----------+----------------------+------------
 superkuma | 롤 만들기, DB 만들기 | {}


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CREATEDB 및 CREATEROLE 권한이 설정되어 있다.&lt;/p&gt;
&lt;p&gt;그러면 CREATEROLE 권한을 제거하고 CONNECTION LIMIT에 3을 설정하려고 한다. 다음과 같이 실행하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role superkuma with nocreaterole connection limit 3;
ALTER ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;superkuma 역할의 속성이 변경되었다. 그럼 다시 superkuma의 속성을 확인하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du superkuma
              롤 목록
  롤 이름  |   속성    | 소속 그룹:
-----------+-----------+------------
 superkuma | DB 만들기+| {}
           | 3개 연결  |


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CREATEROLE 권한이 삭제되고, 최대 동시 연결 수가 3으로 설정되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;일반-역할이-자신의-연결-암호를-변경하기&#34;&gt;일반 역할이 자신의 연결 암호를 변경하기&lt;/h2&gt;
&lt;p&gt;다음 수퍼 유저 또는 CREATEROLE 권한이 없는 일반 롤이 자신의 암호를 변경하려고 한다.&lt;/p&gt;
&lt;p&gt;암호를 변경하는 역할은 kuma으로 하려고 한다. 명령 프롬프트에서 kuma로 데이터베이스에 연결한다. (연결 데이터베이스는 postgres로 하였다.)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U kuma -d postgres
kuma 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ALTER ROLE 명령을 사용하여 암호를 변경하려고 한다. 이번에는 역할 이름을 지정하는 대신에 현재의 연결을 역할을 나타내는 SESSION_USER를 대신 사용해 보겠다. 다음과 같이 실행하도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=&amp;gt; alter role session_user with password &amp;#39;mybear&amp;#39;;
ALTER ROLE
postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 연결을 시작했을 때의 역할인 kuma 연결 암호를 새로운 값으로 변경하였다.&lt;/p&gt;
&lt;h2 id=&#34;변경-권한이-없이-속성을-변경하려는-경우&#34;&gt;변경 권한이 없이 속성을 변경하려는 경우&lt;/h2&gt;
&lt;p&gt;암호 변경 이외의 속성의 변경은 수퍼 유저 또는 CREATEROLE 권한을 가진 역할 밖에 할 수 없다. 권한이 없이 속성을 변경하면 어떻게 되는지를 확인하려고 한다.&lt;/p&gt;
&lt;p&gt;그러면 일반 역할 kuma로 데이터베이스에 연결한다. 연결 데이터베이스는 postgres로 하였다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U kuma -d postgres
kuma 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kuma으로 연결한 상태에서 kuma 역할의 속성을 변경하려고 한다. 다음과 같이 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=&amp;gt; alter role kuma with createrole;
오류:  권한 없음
postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;시도해 보면 &amp;ldquo;&lt;strong&gt;오류:  권한 없음&lt;/strong&gt;&amp;rdquo; 표시되었다. 이처럼 역할의 속성을 변경하려면 필요한 권한이 갖은 역할 밖에 할 수 없다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 ALTER ROLE 명령을 사용하여 생성 된 역할의 속성을 변경하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 이름 변경(ALTER ROLE)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-alter-role/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD-alter-role/</guid>
      <description>
        
        
        &lt;p&gt;ALTER ROLE 명령을 사용하여 생성 된 역할의 이름을 변경 할 수 있다. 여기에서 역할의 이름을 변경하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;역할의-이름-변경하기&#34;&gt;역할의 이름 변경하기&lt;/h2&gt;
&lt;p&gt;역할의 이름을 변경하려면 ALTER ROLE 명령을 사용한다. 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER ROLE name RENAME TO new_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;변경 대상의 역할(role_name)의 이름을 새 이름(new_name)으로 변경한다. 현재 세션 사용자(연결할 때 사용된 역할)의 이름은 변경할 수는 없다. 즉, 자신의 이름을 변경할 수 없다는 것을 뜻한다.&lt;/p&gt;
&lt;p&gt;수퍼 유저는 모든 역할의 이름을 변경할 수 있다. CREATEROLE 권한을 가진 역할은 슈퍼 유저가 아닌 역할의 이름을 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;그리고 클라이언트의 인증 방법으로 md5를 사용하는 경우에는 역할 이름을 변경하면 접속 암호가 지워지게 되므로  새로 설정해야 한다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 수퍼 유저 postgres에서 PostgreSQL에 접속하여 생성된 역할 kuma의 이름을 변경한다.&lt;/p&gt;
&lt;p&gt;먼저 현재 생성된 역할 목록을 확인해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=&amp;gt; \du
                                 롤 목록
  롤 이름  |                      속성                      | 소속 그룹:
-----------+------------------------------------------------+------------
 kuma      |                                                | {}
 postgres  | 슈퍼유저, 롤 만들기, DB 만들기, 복제, RLS 통과 | {}
 superkuma | DB 만들기                                     +| {}
           | 3개 연결                                       |


postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 3개의 역할이 생성되어 있다.&lt;/p&gt;
&lt;p&gt;그러면 kuma 역할의 이름을 mykuma로 변경한다. 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role kuma rename to mykuma;
알림:  롤 이름이 변경 되어 MD5 암호를 지웠습니다
ALTER ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mykuma 역할 이름이 변경되었다. 그리고 이 역할은 인증 방법으로 md5를 사용하고 있었기 때문에, &amp;ldquo;&lt;strong&gt;알림:  롤 이름이 변경 되어 MD5 암호를 지웠습니다&lt;/strong&gt;&amp;rdquo; 라고 표시되었듯이 암호가 지워졌다.&lt;/p&gt;
&lt;p&gt;그래서 ALTER ROLE 명령을 사용하여 접속 암호를 다시 설정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role mykuma with password &amp;#39;mybear&amp;#39;;
ALTER ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mykuma 역할 접속 암호가 설정되었다.&lt;/p&gt;
&lt;p&gt;그러면 확인을 위해 다시 생성된 역할 목록을 확인해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du
                                 롤 목록
  롤 이름  |                      속성                      | 소속 그룹:
-----------+------------------------------------------------+------------
 mykuma    |                                                | {}
 postgres  | 슈퍼유저, 롤 만들기, DB 만들기, 복제, RLS 통과 | {}
 superkuma | DB 만들기                                     +| {}
           | 3개 연결                                       |


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kuma 역할이 mykuma 역할로 이름이 변경되는 것을 확인할 수 있다. 여기서 역할에 설정되어 속성은 그대로 되어 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 ALTER ROLE 명령을 사용하여 생성 된 역할의 이름을 변경하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 암호 만료 설정(ALTER ROLE)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%95%94%ED%98%B8-%EB%A7%8C%EB%A3%8C-%EC%84%A4%EC%A0%95-alter-role/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EC%95%94%ED%98%B8-%EB%A7%8C%EB%A3%8C-%EC%84%A4%EC%A0%95-alter-role/</guid>
      <description>
        
        
        &lt;p&gt;PortgreSQL에 연결된 역할의 인증에 사용할 비밀번호에 대해서 역할을 만들 때와 역할을 생성한 후에도 속성을 변경하여 비밀번호 만료를 설정할 수 있다. 여기에서는 역할의 비밀번호 만료를 설정하는 방법과 비밀번호가 비활성화 된 역할을 다시 암호 인증을 할 수 있도록 설정하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;비밀번호-만료-설정&#34;&gt;비밀번호 만료 설정&lt;/h2&gt;
&lt;p&gt;역할 만들 때 비밀번호 만료를 설정하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE ROLE name
  WITH LOGIN PASSWORD &amp;#39;password&amp;#39; VALID UNTIL &amp;#39;timestamp&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LOGIN 및 PASSWORD &amp;lsquo;password&amp;rsquo;속성을 설정하여 만드는 역할은 PostgreSQL의 연결 역할로 사용할 수 있지만, &lt;code&gt;VALID UNTIL &#39;timestamp&#39;&lt;/code&gt;를 설정하여 사용하는 암호 만료를 &amp;rsquo;timestamp&amp;rsquo;까지 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;또한 생성된 역할에 대해 비밀번호 만료 특성만을 설정한 경우 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER ROLE name WITH VALID UNTIL &amp;#39;timestamp&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 설정되어 있는 비밀번호 만료를 &amp;rsquo;timestamp&amp;rsquo;까지 설정한다.&lt;/p&gt;
&lt;p&gt;유효 기간은 &amp;lsquo;2020-10-31 20:33:10&amp;rsquo;과 같이 지정한다. 지정된 날짜와 시간이 되었을 때부터 비밀번호가 비활성화된다. 만약 &amp;lsquo;2020-10-31&amp;rsquo;처럼 날짜만 지정하면 &amp;lsquo;2020-10-31 00:00:00&amp;rsquo;와 같다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 현재 생성된 mykuma 롤의 유효 기간을 &amp;lsquo;2020-10-10 06:00:00&amp;rsquo;로 설정한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# alter role mykuma with valid until &amp;#39;2020-10-10 06:00:00&amp;#39;;
ALTER ROLE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mykuma 역할의 비밀번호 만료가 설정되었다.&lt;/p&gt;
&lt;p&gt;비밀번호 만료를 설정한 후에 psql 메타 명령 &lt;code&gt;\du&lt;/code&gt;를 사용하여 mykuma 역할의 속성을 표시하여 보면, 암호 만료가 설정되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \du mykuma
                             롤 목록
 롤 이름 |                   속성                    | 소속 그룹:
---------+-------------------------------------------+------------
 mykuma  | 비밀번호 만료기한: 2020-10-10 06:00:00+09 | {}


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;암호 만료가 설정 역할은 비밀번호가 만료되기 전에 PostgreSQL에 연결되어 있지 않으면 비밀번호가 만료되는 날짜와 시간이 되어도 연결은 그대로 사용할 수 있다. 그러나 연결을 끊기면 비밀번호 인증 실패한다.&lt;/p&gt;
&lt;p&gt;암호가 비활성화 된 상태에서 연결을 시도하면 &amp;ldquo;&lt;strong&gt;psql: 오류: 서버 접속 실패: 치명적오류:  사용자 &amp;ldquo;mykuma&amp;quot;의 password 인증을 실패했습니다&lt;/strong&gt;&amp;ldquo;고 표시되어 연결에 실패한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U mykuma -d postgres
mykuma 사용자의 암호:
psql: 오류: 서버 접속 실패: 치명적오류:  사용자 &amp;#34;mykuma&amp;#34;의 password 인증을 실패했습니다

C:\Users\kimkc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;암호-만료-설정을-취소하기&#34;&gt;암호 만료 설정을 취소하기&lt;/h2&gt;
&lt;p&gt;비밀번호가 만료되어 비활성화 된 경우에는 새로운 비밀번호를 설정해도 인증할 수 없다. 다시 해당 역할이 비밀번호 인증을 할 수 있게하려면 비밀번호 만료 설정을 ALTER ROLE 명령을 사용하여 취소해야 한다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 시도한다. 암호가 현재 사용할 수있는 momo 역할에 대해 암호 만료 설정을 취소하려면 만료로 현재보다 먼저 날짜와 시간을 다시 지정하거나 무기한을 의미하는 &amp;lsquo;infinity&amp;rsquo;를 설정하여라.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# alter role mykuma with valid until &amp;#39;infinity&amp;#39;;
ALTER ROLE
postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mykuma 역할의 암호 만료 설정이 취소되었다. 정확하게는 비밀번호 만료 무기한 설정되었다.&lt;/p&gt;
&lt;p&gt;다시 psql 메타 명령 &lt;code&gt;\du&lt;/code&gt;를 사용하여 momo 역할의 속성을 표시해 보면, 암호 만료가 &amp;lsquo;infinity&amp;rsquo;로 설정되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \du mykuma
                      롤 목록
 롤 이름 |            속성             | 소속 그룹:
---------+-----------------------------+------------
 mykuma  | 비밀번호 만료기한: infinity | {}


postgres=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;유효 기간 설정 변경 후에 해당 역할로 PostgreSQL에 접속을 보면 문제없이 암호 인증이 통해서 연결을 할 수 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U mykuma -d postgres
mykuma 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 역할의 암호 만료를 설정하는 방법과 암호가 비활성화 된 역할을 다시 암호 인증을 실시 할 수 있도록 설정하는 방법에 대해 알아보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 테이블, 뷰 등에 대한 권한을 추가(GRANT)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B7%B0-%EB%93%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B6%8C%ED%95%9C%EC%9D%84-%EC%B6%94%EA%B0%80-grant/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%ED%85%8C%EC%9D%B4%EB%B8%94-%EB%B7%B0-%EB%93%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B6%8C%ED%95%9C%EC%9D%84-%EC%B6%94%EA%B0%80-grant/</guid>
      <description>
        
        
        &lt;p&gt;GRANT 명령을 사용하여 역할에 권한을 추가할 수 있다. 권한은 테이블이나 스키마 작성 권한이나 테이블과 컬럼에서 데이터를 검색하거나 데이터를 추가할 수 있는 권한 등이다. 여기에서는 GRANT 명령을 사용하여 권한을 추가하는 방법에 대해 설명한다.&lt;/p&gt;
&lt;h2 id=&#34;grant-명령을-사용하여-권한-추가하기&#34;&gt;GRANT 명령을 사용하여 권한 추가하기&lt;/h2&gt;
&lt;p&gt;GRANT 명령을 사용하여 역할에 권한을 추가할 수 있다. 목적에 따라 여러 형식이 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }
    ON [ TABLE ] table_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE sequence_name [, ...]
         | ALL SEQUENCES IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE database_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN domain_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER fdw_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER server_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE }
       routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]
       | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE lang_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT loid [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA schema_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE tablespace_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE type_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여러 형식이 있지만, 기본은 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT 권한 ON 대상 TO 누구
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;&lt;strong&gt;권한&lt;/strong&gt;&amp;ldquo;은 대상에 따라 다른데 정리하자면  다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;권한&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;테이블이나 뷰에 데이터를 조회할 수 있다. UPDATE와 DELETE를하기 위해서도 필요하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INSERT&lt;/td&gt;
&lt;td&gt;테이블에 새로운 데이터를 추가할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UPDATE&lt;/td&gt;
&lt;td&gt;테이블의 데이터를 업데이트 할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;테이블에서 데이터를 삭제할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRUNCATE&lt;/td&gt;
&lt;td&gt;테이블의 데이터를 비울 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFERENCES&lt;/td&gt;
&lt;td&gt;테이블과 컬럼에 외래 키 제약 조건을 만들 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRIGGER&lt;/td&gt;
&lt;td&gt;테이블에 트리거를 만들 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CREATE&lt;/td&gt;
&lt;td&gt;대상이 데이터베이스의 경우 스키마를 만들 수 있다. 대상 스키마의 경우, 테이블 등의 개체를 만들 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONNECT&lt;/td&gt;
&lt;td&gt;지정된 데이터베이스에 연결할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEMPORARY&lt;/td&gt;
&lt;td&gt;데이터베이스에 임시 테이블을 만들 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXECUTE&lt;/td&gt;
&lt;td&gt;함수 또는 프로 시저 연산자의 사용을 허용한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USAGE&lt;/td&gt;
&lt;td&gt;대상이 스키마의 경우는 객체에 대한 액세스를 허용한다. 대상이 스키가 아니면, 대상에 따라 권한이 부여 된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALL PRIVILEGES&lt;/td&gt;
&lt;td&gt;사용할 수 있는 권한을 정리해 허용한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;대상&lt;/strong&gt;&amp;ldquo;은 테이블, 테이블의 컬럼 데이터베이스 스키마 등이다.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;누구&lt;/strong&gt;&amp;ldquo;는 역할 이름을 지정한다. 현재 사용자를 나타내는 CURRENT_USER와 현재 세션 사용자를 나타내는 SESSION_USER도 지정할 수 있다. 또한 PUBLIC으로 지정한 경우에는 모든 역할(현재 그리고 향후 추가되는 역할의 전부)에 대한 권한이 추가된다.&lt;/p&gt;
&lt;p&gt;권한을 다른 역할에 추가는 대상의 객체의 소유자 및 수퍼 유저가 할수 있다. 또한 GRANT 명령을 실행할 때에는 WITH GRANT OPTION을 지정하면 권한이 부여된 역할은 동일한 권한을 다른 역할에 추가할 수 있게 한다. (단, PUBLIC을 지정한 경우는 넣을 수 없다).&lt;/p&gt;
&lt;p&gt;그러면 보다 구체적으로 살펴 보도록 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;테이블에-대한-권한-추가&#34;&gt;테이블에 대한 권한 추가&lt;/h2&gt;
&lt;p&gt;먼저 테이블에 대한 권한을 추가하는 방법에 대해서 설명하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    TO role_specification [, ...] [ WITH GRANT OPTION ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어, role_name 역할에 테이블 table_name을 대상으로 SELECT와 INSERT 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT SELECT, INSERT ON table_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한, role_name 역할에 테이블 table_name을 대상으로 모든 권한을 추가하려면 다음과 같이 실행한다. (모든 권한이라는 것은 이 형식으로 지정할 수 있는 SELECT, INSERT, UPDATE, DELETE TRUNCATE, REFERENCES, TRIGGER이다).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON table_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;role_name 역할에 지정된 스키마 schema_name에 포함된 모든 테이블을 대상으로 SELECT 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT SELECT ON ALL TABLES IN SCHEMA schema_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;role_name 역할에 테이블 table_name을 대상으로 SELECT와 INSERT 권한을 추가하고 또한 다른 사용자에게 동일한 권한을 부여할 수 있도록하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT SELECT, INSERT ON table_name To role_name WITH GRANT OPTION;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 현재 devkuma 데이터베이스에는 public 스키마에 memo 테이블과 myschema 스키마 book 테이블이 작성되어 있다. 테이블과 컬럼에 대한 권한 정보를 얻으려면 psql 메타 명령 &lt;code&gt;\dp&lt;/code&gt;를 사용한다. (&lt;code&gt;\dp&lt;/code&gt;는 테이블, 뷰, 시퀀스 목록을 액세스 권한과 함께 표시하는 명령이다.)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                         액세스 권한
 스키마 | 이름 |  종류  | 액세스 권한 | 칼럼 접근권한 | 정책
--------+------+--------+-------------+---------------+------
 public | memo | 테이블 |             |               |
(1개 행)


devkuma=# \dp myschema.*
                          액세스 권한
  스키마  | 이름 |  종류  | 액세스 권한 | 칼럼 접근권한 | 정책
----------+------+--------+-------------+---------------+------
 myschema | book | 테이블 |             |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기서 수퍼 유저가 아닌 mykuma 역할에 SELECT 권한을 추가 할 수 있다. 권한을 추가하기 전에 데이터를 취득하면 어떻게되는지를 확인하기 위해 mykuma에서 PostgreSQL에 접속 후 memo 테이블에서 데이터를 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select * from memo;
오류:  memo 테이블에 대한 접근 권한 없음
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;memo 테이블에 대한 SELECT 권한이 없기에 &amp;ldquo;&lt;strong&gt;오류:  memo 테이블에 대한 접근 권한 없음&lt;/strong&gt;&amp;ldquo;라고 표시되어 데이터를 가져 오는데 실패한다.&lt;/p&gt;
&lt;p&gt;그러면 mykuma 역할에 memo 테이블 및 myshema.book 테이블에 SELECT 권한을 추가한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant select on memo to mykuma;
GRANT
devkuma=# grant select on myschema.book to mykuma;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;권한이 추가되었다. 그러면 확인을 위해 다시 &lt;code&gt;\dp&lt;/code&gt;를 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres+|               |
        |      |        | mykuma=r/postgres         |               |
(1개 행)


devkuma=# \dp myschema.*
                                 액세스 권한
  스키마  | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
----------+------+--------+---------------------------+---------------+------
 myschema | book | 테이블 | postgres=arwdDxt/postgres+|               |
          |      |        | mykuma=r/postgres         |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각 테이블의 액세스 권한 곳에 다음과 같은 값이 설정되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=arwdDxt/postgres+
 mykuma=r/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값은 다음과 같다. mykuma 역할에 대해서는 postgres 역할이 &lt;code&gt;r(SELECT)&lt;/code&gt;의 권한이 추가되어 있다는 의미이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rolename=xxxx -- 역할에 부여된 권한
=xxxx -- PUBLIC에 부여 된 권한

            r -- SELECT (읽기 (read))
            w -- UPDATE (쓰기 (write))
            a -- INSERT (추가 (append))
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- 모든 권한 (테이블용. 다른 객체는 다르다.)
            * -- 직전의 권한에 관한 그랜트 옵션

        /yyyy -- 이 권한을 부여한 역할
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그럼 다시 일반 역할인 mykuma에서 PostgreSQL에 접속 후 memo 테이블에서 데이터를 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select * from memo;
 id | memo
----+------
(0개 행)


devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;memo 테이블에서 데이터를 검색할 수 있게 되었다.&lt;/p&gt;
&lt;p&gt;마찬가지로 mysheme.book 테이블에 데이터를 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select * from myschema.book;
오류:  myschema 스키마(schema) 접근 권한 없음
줄 1: select * from myschema.book;
                    ^
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는&amp;rdquo;&lt;strong&gt;오류:  myschema 스키마(schema) 접근 권한 없음&lt;/strong&gt;&amp;ldquo;라고 표시되어 데이터를 조회할 수 없다. 이것은 public 스키마이면 기본적으로 스키마의 테이블 등의 객체에 대한 액세스가 허용되지만만, public 이외의 스키마의 경우 명시적으로 USAGE 권한을 추가하지 않으면 스키마의 객체에 액세스 할 수 없다.&lt;/p&gt;
&lt;p&gt;스키마 객체에 대한 권한을 추가하는 방법에 대한 자세한 내용은 나중에 설명하기로 하고, 우선 수퍼 유저로 접속한 뒤 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant usage on schema myschema to mykuma;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;myshema 스키마의 개체에 대한 액세스가 허용되었다.&lt;/p&gt;
&lt;p&gt;그럼 다시 mysheme.book 테이블에서 데이터를 조회해 보겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select * from myschema.book;
 id
----
(0개 행)


devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;myschema.book 테이블에서 데이터를 조회할 수 있게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;테이블의-컬럼에-대한-권한-추가&#34;&gt;테이블의 컬럼에 대한 권한 추가&lt;/h2&gt;
&lt;p&gt;다음 테이블의 컬럼에 대한 권한을 추가하는 방법에 대해서 설명하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }
    ON [ TABLE ] table_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어 role_name 역할에 테이블 table_name의 column_name 컬럼을 대상으로 SELECT 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT SELECT (column_name) ON table_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 실제로 해보도록 하자. psql 메타 명령 &lt;code&gt;\dp&lt;/code&gt;를 사용하여 테이블과 컬럼에 대한 권한을 확인 해 보면, mykuma 아무것도 권한이 추가되지 않은 상태이다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 mykuma 역할에 memo 테이블의 memo 컬럼에 대한 SELECT 권한을 추가한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant select (memo) on memo to mykuma;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;권한이 추가되었다. 그러면 확인을 위해 재차 &lt;code&gt;\dp&lt;/code&gt;를 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                   액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        |    칼럼 접근권한    | 정책
--------+------+--------+---------------------------+---------------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres | memo:              +|
        |      |        |                           |   mykuma=r/postgres |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;열 권한 곳에 다음과 같은 값이 설정되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;memo:              +
 mykuma=r/postgres 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설정되어 있는 값은 접근 권한의 경우와 동일한다. mykuma 역할에 대해 postgres 역할에 의해 r(SELECT)의 권한이 추가되었다는 의미이다.&lt;/p&gt;
&lt;p&gt;그럼 다시 일반 역할인 momo에서 PostgreSQL에 접속하여 memo 테이블에서 데이터를 조회한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select * from memo;
오류:  memo 테이블에 대한 접근 권한 없음
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;&lt;strong&gt;오류:  memo 테이블에 대한 접근 권한 없음&lt;/strong&gt;&amp;ldquo;라고 표시되면서 데이터 조회에 실패한다. 이는 memo 테이블에는 id 열과 memo 컬럼의 두 컬럼이 있고 mykuma 역할은 name 컬럼의 SELECT 권한 한 추가되지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;그러면 memo 테이블의 memo 컬럼 만 데이터를 조회해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; select memo from memo;
 memo
------
(0개 행)


devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 데이터의 조회에 성공하였다.&lt;/p&gt;
&lt;p&gt;또한 public 스키마 이외의 스키마에 작성되는 테이블의 컬럼에서 데이터를 검색하거나하려면 대상 스키마의 USAGE 권한이 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;스키마를-만들-수-있는-권한-추가하기&#34;&gt;스키마를 만들 수 있는 권한 추가하기&lt;/h2&gt;
&lt;p&gt;다음 지정된 데이터베이스에 스키마를 만들 수있는 권한을 추가하는 방법에 대해서 설명하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT {{CREATE | CONNECT | TEMPORARY | TEMP} [...] | ALL [PRIVILEGES]}
    ON DATABASE database_name [...]
    TO role_specification [...] [WITH GRANT OPTION]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어 role_name 역할에 데이터베이스 database_name에서 스키마를 만들 수있는 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT CREATE ON DATABASE database_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 실제로 해보도록 하자. psql 메타 명령 &lt;code&gt;\l&lt;/code&gt;을 사용하여 devkuma 데이터베이스에 대한 권한을 확인해 보면, memo는 devkuma 데이터베이스에 대해 아무런 권한이 없다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \l devkuma
                                데이터베이스 목록
  이름   |  소유주  | 인코딩 |     Collate      |      Ctype       | 액세스 권한
---------+----------+--------+------------------+------------------+-------------
 devkuma | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 momo 역할에 devkuma 데이터베이스에 스키마를 만들 수 있는 권한을 추가한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant create on database devkuma to mykuma;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;권한이 추가되었다. 그러면 확인을 위해 다시 &lt;code&gt;\l&lt;/code&gt;을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \l devkuma
                                     데이터베이스 목록
  이름   |  소유주  | 인코딩 |     Collate      |      Ctype       |      액세스 권한
---------+----------+--------+------------------+------------------+-----------------------
 devkuma | postgres | UTF8   | Korean_Korea.949 | Korean_Korea.949 | =Tc/postgres         +
         |          |        |                  |                  | postgres=CTc/postgres+
         |          |        |                  |                  | mykuma=C/postgres
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;액세스 권한 있는 곳에 다음과 같은 값이 설정되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;=Tc/postgres         +
postgres=CTc/postgres+
mykuma=C/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설정되어 있는 값은 접근 권한의 경우와 동일한다. mykuma 역할에 대해서는 postgres 역할에 의해 C(CREATE)의 권한이 추가되었다라는 의미이다.&lt;/p&gt;
&lt;p&gt;그러면 일반 역할인 mykuma에서 PostgreSQL에 접속 후 devkuma 데이터베이스에 mykuma 스키마를 만들려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; create schema mykuma;
CREATE SCHEMA
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mydb 데이터베이스에 devkuma 스키마를 만들 수 있게 되었다. 확인을 위해 psql 메타 명령 &lt;code&gt;\dn&lt;/code&gt;을 실행해 본다.
``
devkuma=&amp;gt; \dn
스키마(schema) 목록
이름   |  소유주
&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;-
mykuma   | mykuma
myschema | postgres
public   | postgres
(3개 행)&lt;/p&gt;
&lt;p&gt;devkuma=&amp;gt;
``&lt;/p&gt;
&lt;p&gt;mykuma 스키마가 생성되어있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;스키마에-테이블-같은-객체를-만들-수-있는-권한-추가하기&#34;&gt;스키마에 테이블 같은 객체를 만들 수 있는 권한 추가하기&lt;/h2&gt;
&lt;p&gt;마지막으로 지정된 스키마에 테이블 같은 개체를 만들 수 있는 권한을 추가하는 방법에 대해서 설명하겠다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA schema_name [, ...]
    TO role_specification [, ...] [ WITH GRANT OPTION ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예를 들어 role_name 역할에 schema_name 스키마에서 테이블 등을 만들 수있는 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT CREATE ON SCHEMA schema_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;또한 role_name 역할에 schema_name 스키마에서 테이블 등에 대한 액세스 권한을 추가하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GRANT USAGE ON SCHEMA schema_name To role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 실제로 해보록 하자. psql 메타 명령 &lt;code&gt;\dn+&lt;/code&gt;를 사용하여 myschema 스키마에 대한 권한을 확인 해 보면, momo는 myschema 스키마에 대한 권한이 아무것도 없습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn+
                         스키마(schema) 목록
   이름   |  소유주  |     액세스 권한      |          설명
----------+----------+----------------------+------------------------
 mykuma   | mykuma   |                      |
 myschema | postgres | postgres=UC/postgres+|
          |          | mykuma=UC/postgres   |
 public   | postgres | postgres=UC/postgres+| standard public schema
          |          | =UC/postgres         |
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 mykuma 역할에 myschema 스키마에 개체를 만들 수 있는 권한을 추가한다.  수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant create on schema myschema to mykuma;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;권한이 추가되었다. 그러면 확인을 위해 다시 &lt;code&gt;\dn+&lt;/code&gt;를 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dn+
                         스키마(schema) 목록
   이름   |  소유주  |     액세스 권한      |          설명
----------+----------+----------------------+------------------------
 mykuma   | mykuma   |                      |
 myschema | postgres | postgres=UC/postgres+|
          |          | mykuma=UC/postgres   |
 public   | postgres | postgres=UC/postgres+| standard public schema
          |          | =UC/postgres         |
(3개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;액세스 권한 곳에 다음과 같은 값이 설정되어 있습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=UC/postgres+
mykuma=C/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;설정되어 있는 값은 접근 권한의 경우와 동일한다. mykuma 역할에 대해서는 postgres 역할에 의해 C(CREATE)의 권한이 추가되었다는 의미이다.&lt;/p&gt;
&lt;p&gt;그러면 일반 역할인 mykuma으로 PostgreSQL에 접속하여, devkuma 데이터베이스의 myschema 스키마에 product 테이블을 만들려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; create table myschema.product (id integer, name varchar (10));
CREATE TABLE
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;myschema 스키마에 product 테이블을 만들었다. 확인을 위해 psql 메타 명령 &lt;code&gt;\dp&lt;/code&gt;를 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; \dp myschema.*
                                  액세스 권한
  스키마  |  이름   |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
----------+---------+--------+---------------------------+---------------+------
 myschema | book    | 테이블 | postgres=arwdDxt/postgres+|               |
          |         |        | mykuma=r/postgres         |               |
 myschema | product | 테이블 |                           |               |
(2개 행)


devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;myschema.product 테이블이 생성되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 GRANT 명령을 사용하여 권한을 추가하는 방법에 대해 설명하였다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
    <item>
      <title>PostgreSQL | 역할(사용자) ROLE 생성 | 역할 권한 삭제 (REVOKE)</title>
      <link>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EA%B6%8C%ED%95%9C-%EC%82%AD%EC%A0%9C-revoke/</link>
      <pubDate>Thu, 17 Aug 2017 10:31:25 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/postgresql/%EC%97%AD%ED%95%A0-%EA%B6%8C%ED%95%9C-%EC%82%AD%EC%A0%9C-revoke/</guid>
      <description>
        
        
        &lt;p&gt;GRANT 명령을 사용하여 역할에 추가된 권한은 REVOKE 명령으로 제거 할 수 있다. 여기에서는 REVOKE 명령을 사용하여 권한을 삭제하는 방법에 대해 설명하겠다.&lt;/p&gt;
&lt;h2 id=&#34;revoke-명령을-사용하여-권한-제거&#34;&gt;REVOKE 명령을 사용하여 권한 제거&lt;/h2&gt;
&lt;p&gt;REVOKE 명령을 사용하여 역할에 추가된 권한을 제거 할 수 있다. 목적에 따라 여러 형식이 준비되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }
    ON [ TABLE ] table_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE sequence_name [, ...]
         | ALL SEQUENCES IN SCHEMA schema_name [, ...] }
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE database_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN domain_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER fdw_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER server_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE }
       function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE lang_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT loid [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA schema_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE tablespace_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]

REVOKE [ GRANT OPTION FOR ]
    { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE type_name [, ...]
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여러 형식이 있지만, 기본은 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE 권한 ON 대상 FROM 누구
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;여기서 &amp;ldquo;권한, 대상, 누구&amp;rdquo; GRANT 명령과 동일하다. 자세한 내용은 &amp;ldquo;&lt;a href=&#34;https://www.devkuma.com/books/pages/1472&#34;&gt;역할 테이블, 뷰 등에 대한 권한을 추가(GRANT)&lt;/a&gt;&amp;ldquo;를 참조하도록 하자.&lt;/p&gt;
&lt;p&gt;GRANT OPTION FOR를 넣어 REVOKE 명령을 실행하게 되면 , 권한을 다른 역할에 부여 소유권만 삭제된다. (GRANT 명령에서 WITH GRANT OPTION에 의해 추가 된 권한). 지정하지 않으면 권한 자체와 권한을 다른 역할에 부여한 내용도 모두 삭제된다.&lt;/p&gt;
&lt;p&gt;REVOKE 명령은 마지막에 CASCADE 또는 RESTRICT를 지정할 수 있다. 자신에 추가된 것과 동일한 권한을 다른 역할에 추가한 경우에 기본 설정(RESTRICT)으로 자신에 추가된 권한의 삭제를 시도하면 실패하게 된다. 이에 반해 CASCADE를 지정하게 되면 자신의 권한과 동시에 자신이 다른 역할에 추가한 동일한 권한도 함께 삭제된다.&lt;/p&gt;
&lt;p&gt;권한을 다른 역할에서 제거는 개체의 소유자 및 수퍼 유저만 가능하다. 그 외에 역할의 경우는 GRANT 명령의 WITH GRANT OPTION으로 다른 역할에 추가한 권한만 삭제할 수 있다.&lt;/p&gt;
&lt;p&gt;그러면보다 구체적으로 방법을 살펴 보도록 하겠다.&lt;/p&gt;
&lt;h2 id=&#34;테이블에-대한-권한을-제거&#34;&gt;테이블에 대한 권한을 제거&lt;/h2&gt;
&lt;p&gt;테이블에 대한 권한을 삭제하는 경우를 예로 REVOKE 명령의 사용법을 확인하려고 한다. 사용하는 형식은 다음과 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE [ GRANT OPTION FOR ]
    { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] table_name [, ...]
         | ALL TABLES IN SCHEMA schema_name [, ...] }
    FROM { [ GROUP ] role_name | PUBLIC } [, ...]
    [ CASCADE | RESTRICT ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예제로 role_name 역할에 테이블 table_name을 대상으로 SELECT와 INSERT 권한을 제거하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE SELECT, INSERT ON table_name FROM role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;role_name 역할에 테이블 table_name을 대상으로 SELECT 권한을 다른 역할에 추가할 권한만 제거하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE GRANT OPTION FOR SELECT ON table_name FROM role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;role_name 역할에 테이블 table_name을 대상으로 SELECT 권한을 삭제하고 role_name 역할이 다른 역할에 추가 한 SELECT 권한도 동시에 제거하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE SELECT ON table_name FROM role_name CASCADE;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;role_name 역할에 테이블 table_name을 대상으로 모든 권한을 제거하려면 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;REVOKE ALL PRIVILEGES ON table_name FROM role_name;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 현재 public 스키마에 staff 테이블이 생성되고, momo 역할에 대해 SELECT, INSERT, UPDATE 권한이 추가되어 있다. psql 메타 명령 &lt;code&gt;\dp&lt;/code&gt;를 사용하여 확인을 해보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres+|               |
        |      |        | mykuma=arw/postgres       |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;※ 위 액세스 권한은 &lt;code&gt;GRANT SELECT,INSERT,UPDATE ON memo TO mykuma;&lt;/code&gt;으로 추가된 권한이다.&lt;/p&gt;
&lt;p&gt;memo 테이블의 액세스 권한에 다음과 같은 값이 설정되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=arwdDxt/postgres
mykuma=arw/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;값의 의미는 다음과 같다. mykuma 역할에 대해서는 postgres 역할이 a(INSERT), r(SELECT), w(UPDATE)의 권한이 추가되어 있다 것을 의미한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rolename=xxxx -- 롤에 부여 된 권한
=xxxx -- PUBLIC에 부여된 권한

            r -- SELECT (읽기 (read))
            w -- UPDATE (쓰기 (write))
            a -- INSERT (추가 (append))
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- 모든 권한 (테이블 용 다른 객체는 다르다.)
            * -- 직전의 권한에 관한 그랜트 옵션

        / yyyy -이 권한을 부여한 역할
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면, mykuma 역할에서 memo 테이블에 대한 SELECT 권한을 제거한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# revoke select on memo from mykuma;
REVOKE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SELECT 권한이 삭제되었다. 확인을 위해 다시 &lt;code&gt;\dp&lt;/code&gt; 명령을 실행해 보자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres+|               |
        |      |        | mykuma=aw/postgres        |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;액세스 권한의 값이 &lt;code&gt;mykuma=arw/postgres&lt;/code&gt;에서 &lt;code&gt;mykuma=aw/postgres&lt;/code&gt;되어 r(SELECT)가 제거된 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;다음은 mykuma 역할에서 memo 테이블에 대한 모든 권한을 제거해 보자. 수퍼 유저로 접속한 뒤 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# revoke all privileges on memo from mykuma;
REVOKE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;남아 있던 INSERT 및 UPDATE 권한도 삭제되었다. 확인을 위해 다시 &lt;code&gt;\dp&lt;/code&gt; 명령을 실행해 보도록 하자.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;액세스 권한에 mykuma 역할 자체가 모두 삭제되었다.&lt;/p&gt;
&lt;h2 id=&#34;cascade를-지정하고-권한을-모두-삭제하기&#34;&gt;CASCADE를 지정하고 권한을 모두 삭제하기&lt;/h2&gt;
&lt;p&gt;역할 A가 자신에게 추가된 권한을 다른 역할 B에 추가한 경우에 역할 A의 권한을 삭제하려고 하면 실패한다. 이러한 경우 REVOKE 명령을 실행할 때 CASCADE를 지정한다. CASCADE를 지정하면 역할 A의 권한을 제거하는 동시에 역할 A가 역할 B에 추가한 권한도 연쇄적으로 삭제된다.&lt;/p&gt;
&lt;p&gt;그러면 실제로 해보도록 하자. 먼저 수퍼 유저로 PostgreSQL에 접속하여 mykuma 역할에 public 스키마에 memo 테이블을 대상으로 SELECT 권한을 추가한다. 이때 WITH GRANT OPTION을 추가하여 다른 역할에 권한을 추가할 수 있도록 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# grant select on memo to mykuma with grant option;
GRANT
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다음에 mykuma 역할로 PostgreSQL에 접속하여,  superkuma 역할에 public 스키마에 memo 테이블을 대상으로 SELECT 권한을 추가한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\kimkc&amp;gt;psql -U mykuma -d devkuma
mykuma 사용자의 암호:
psql (12.2)
도움말을 보려면 &amp;#34;help&amp;#34;를 입력하십시오.

devkuma=&amp;gt; grant select on memo to superkuma;
GRANT
devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;psql 메타 명령 &lt;code&gt;\dp&lt;/code&gt;를 사용하여 테이블에 추가되는 권한을 확인하려고 한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=&amp;gt; \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres+|               |
        |      |        | mykuma=r*/postgres       +|               |
        |      |        | superkuma=r/mykuma        |               |
(1개 행)


devkuma=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;staff 테이블의 액세스 권한 곳에 다음과 같은 값이 설정되어 있다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=arwdDxt/postgres+
mykuma=r*/postgres       +
superkuma=r/mykuma
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mykuma 역할에 대해서는 postgres 역할이 r(SELECT) *(그랜트 옵션)의 권한이 추가되었으며, superkuma 역할에 대해서는 momo 역할은 r(SELECT)의 권한이 추가되었다.&lt;/p&gt;
&lt;p&gt;이 상태에서 mykuma 역할에서 memo 테이블에 대한 SELECT 권한을 제거하려고 한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# revoke select on memo from mykuma;
오류:  ???의존(적인) 권한이 존재합니다
힌트:  그것들을 취소하려면 &amp;#34;CASCADE&amp;#34;를 사용하세요.
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러자 &amp;ldquo;&lt;strong&gt;오류:  ???의존(적인) 권한이 존재합니다&lt;/strong&gt;&amp;ldquo;라는 오류가 발생하고 권한의 삭제에 실패하였다. mykuma 역할에서 제거하려고 권한 대해 mykuma 역할이 다른 역할에 권한을 추가하였기 때문이다.&lt;/p&gt;
&lt;p&gt;이런 때는 REVOKE 명령에 CASCADE를 지정하여 실행한다. 수퍼 유저로 접속하여 다음과 같이 실행한다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# revoke select on memo from mykuma cascade;
REVOKE
devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이번에는 권한의 삭제에 성공하였다. 확인을 위해 다시 &lt;code&gt;\dp&lt;/code&gt; 명령을 실행해 본다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;devkuma=# \dp
                                액세스 권한
 스키마 | 이름 |  종류  |        액세스 권한        | 칼럼 접근권한 | 정책
--------+------+--------+---------------------------+---------------+------
 public | memo | 테이블 | postgres=arwdDxt/postgres |               |
(1개 행)


devkuma=#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;액세스 권한의 값에 mykuma에 추가한 권한이 삭제되면서 superkuma에 추가한 권한도 삭제되었다. 이렇게 REVOKE 명령을 실행할 때 CASCADE를 지정하면, 제거하려는 권한이 다른 역할에 추가된 경우에도 연쇄 적으로 제거할 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;여기까지 REVOKE 명령을 사용하여 권한을 삭제하는 방법에 대해 알아 보았다.&lt;/p&gt;

      </description>
      
      <category>PostgreSQL</category>
      
      <category>Database</category>
      
    </item>
    
  </channel>
</rss>
