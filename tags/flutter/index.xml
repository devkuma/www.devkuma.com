<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – Flutter</title>
    <link>https://www.devkuma.com/tags/flutter/</link>
    <image>
      <url>https://www.devkuma.com/tags/flutter/logo/180x180.jpg</url>
      <title>Flutter</title>
      <link>https://www.devkuma.com/tags/flutter/</link>
    </image>
    <description>Recent content in Flutter on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>kc@example.com (kc kim)</managingEditor>
    <webMaster>kc@example.com (kc kim)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Flutter</title>
      <link>https://www.devkuma.com/docs/flutter/chapter/overview/</link>
      <pubDate>Wed, 19 Jul 2023 23:16:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/flutter/chapter/overview/</guid>
      <description>
        
        
        
      </description>
      
      <category>Flutter</category>
      
    </item>
    
    <item>
      <title>Flutter 란?</title>
      <link>https://www.devkuma.com/docs/flutter/chapter/intro/</link>
      <pubDate>Wed, 19 Jul 2023 23:16:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/flutter/chapter/intro/</guid>
      <description>
        
        
        &lt;h2 id=&#34;flutter란&#34;&gt;Flutter란?&lt;/h2&gt;
&lt;p&gt;Flutter는 2017년 Google이 발표한 오픈 소스 멀티 플랫폼 개발 프레임워크 입니다.
Flutter는 멀티 플랫폼이므로 Android/iOS/Web/Windows/macOS/Linux의 6개 앱을 정확히 동일한 소스 코드로 개발할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Flutter1에서는, 모바일(Android와 iOS)만이 대상이었습니다만, 2021년의 Flutter2로 웹 앱, 2022년의 Flutter3로 Windows/macOS/Linux의 데스크탑 앱에 정식 대응해, 모바일 이외의 플랫폼의 앱 도 같은 소스 코드로 개발할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;등장 당초부터 Flutter의 인기는 굉장히, 현재도 전세계에서 이용되고 있습니다. 2023년 3월 현재 GitHub의 스타 수는 150k 이상으로, 이것은 GitHub 리포지토리의 스타 수 랭킹에서 상위 20위에 들어갈 정도로 인기입니다.&lt;/p&gt;
&lt;p&gt;2021년에는 모바일 앱의 멀티플랫폼에서 React Native의 점유율을 역전해 Flutter가 42%로 선두에 올랐다는 조사 정보도 있습니다.
참고: &lt;a href=&#34;https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statista의 통계 보고서 &amp;ldquo;Cross-platform mobile frameworks used by software developers worldwide from 2019 to 2021&amp;rdquo;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 문서도 윤택하게 준비되어 있어 필요한 정보가 곧바로 모이기 때문에, 처음으로 모바일 앱을 개발하는 분이라도, 간단하게 Flutter를 시작할 수 있습니다. 또, Flutter는 이용자가 많기 때문에, 공식 이외의 노하우도 인터넷상에 대량으로 존재합니다.&lt;/p&gt;
&lt;p&gt;Flutter의 프로그래밍 언어에는 Dart라는 컴파일형 언어가 채용되고 있습니다.
Dart는 현대적인 프로그래밍 언어의 성질을 갖추고 있으며 (멀티 패러다임 언어) 매우 다루기 쉬운 언어입니다.&lt;/p&gt;
&lt;h2 id=&#34;왜-flutter가-주목받고-있는가&#34;&gt;왜 Flutter가 주목받고 있는가&lt;/h2&gt;
&lt;p&gt;Flutter는 왜 이렇게 전세계에서 주목받고 사용되고 있는가?
Flutter에는 다양한 우위성과 편리한 점이 있습니다만, 여기에서는 크게 5점에 주목해 소개합니다.&lt;/p&gt;
&lt;h3 id=&#34;포인트-1-자유롭고-개방적인-프레임워크&#34;&gt;포인트 1. 자유롭고 개방적인 프레임워크&lt;/h3&gt;
&lt;p&gt;Flutter는 완전히 자유롭고 개방적인 프레임 워크입니다. 소스 코드는 모두 GitHub에서 공개됩니다.&lt;/p&gt;
&lt;p&gt;자유롭고 오픈 소스라는 것은 기술적으로 열려 있으며 모든 엔지니어가 내용을보고, 나름대로 커스터마이징하거나, 개선 요청을 보낼 수 있다는 것입니다.&lt;/p&gt;
&lt;p&gt;이에 따라 Flutter는 특정 국가나 기업에 의존하지 않고, 정치나 이익 등의 엇갈림에 묶이지 않고, 엔지니어끼리의 자유로운 커뮤니케이션에 의해, Flutter 전체의 발전이나 노하우 공유가 가속해, 전세계에 널리 퍼져 갑니다.&lt;/p&gt;
&lt;h3 id=&#34;포인트-2-멀티-플랫폼&#34;&gt;포인트 2. 멀티 플랫폼&lt;/h3&gt;
&lt;p&gt;Flutter는 멀티 플랫폼 개발 프레임워크입니다.
멀티 플랫폼은 Android/iOS/Web/Windows/macOS/Linux의 6개 플랫폼에 한 번에 대응할 수 있다는 의미입니다. Flutter를 사용하면 동일한 소스 코드로 각 플랫폼에 해당하는 앱을 한 번에 만들 수 있습니다.&lt;/p&gt;
&lt;p&gt;그렇다면 멀티 플랫폼이라면 무엇이 기뻐합니까? 이는 플랫폼별로 대응하는 기술을 습득하거나 개별적으로 개발을 하지 않아도 된다는 점에 있습니다.&lt;/p&gt;
&lt;p&gt;구체적으로 각 플랫폼에서는 다음과 같은 기술을 배워야 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android : Java, Kotlin&lt;/li&gt;
&lt;li&gt;iOS : Objective-C, Swift&lt;/li&gt;
&lt;li&gt;웹 : HTML, CSS, JavaScript (React, Vue.js 등의 프레임 워크 포함)&lt;/li&gt;
&lt;li&gt;데스크톱 앱 : Electron&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flutter의 멀티 플랫폼은 이러한 차이를 흡수하고 Flutter만을 습득하면 개별 기술의 습득을 하지 않아도 되므로 학습 비용이 작아지고, 또한 여러 플랫폼의 개발을 한꺼번에 관리할 수 있습니다. .&lt;/p&gt;
&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;&lt;div class=&#34;h4 alert-heading&#34; role=&#34;heading&#34;&gt;Tip&lt;/div&gt;


한편, 플랫폼 별 네이티브 개발에도 이점이 있습니다.
네이티브 개발의 장점은 세부 튜닝을 할 수있는 개별 최적화와 최신 기능을 Flutter보다 빨리 사용할 수있는 점 등입니다.
그러나 Flutter는 네이티브 개발처럼 UI나 세부 튜닝이 가능하며, 최신 기술도 베타 채널에서 선행 릴리스되는 경우가 많기 때문에 거의 네이티브 개발과 같은 개발을 할 수 있습니다.
&lt;/div&gt;

&lt;h3 id=&#34;포인트-3-google의-개발&#34;&gt;포인트 3. Google의 개발&lt;/h3&gt;
&lt;p&gt;Flutter는 Google이 개발하고 있습니다.
따라서 개발 커뮤니티의 모체는 매우 높은 기술과 안정적인 운영을하고 있습니다.
커뮤니티 자체도 매우 활발하며 일상적인 업데이트와 정보 발신은 물론, 년에 몇 번의 세계 수준의 컨퍼런스도 열리고 있습니다.&lt;/p&gt;
&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;&lt;div class=&#34;h4 alert-heading&#34; role=&#34;heading&#34;&gt;Tip&lt;/div&gt;


Google 내에서도 Flutter는 다양한 앱의 구현에 사용되고 있으며, Google Pay를 비롯한 여러 제품이 Flutter로 재작성되었다는 발표가 있었습니다. (2021 년 3 월 Flutter Engage Keynote 에서)
&lt;/div&gt;

&lt;p&gt;공식 사이트나 문서뿐만 아니라 YouTube나 Twitter에서도 매일 정보가 발신되고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCwXdFgeE9KYzlDdR7TG9cMw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/FlutterDev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;트위터&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 이유로 Flutter 자체의 기초가 확고하고 안심하고 이용할 수 있습니다. 따라서 수많은 앱이 Flutter로 개발되어 기업에서도 상용 앱 개발에 Flutter를 채용하는 사례도 많습니다.
노하우의 공유도 활발하고, 수많은 서적이나 인터넷 기사가 집필되거나, 유저 커뮤니티에 의한 연구회 등이 정기적으로 개최되고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;포인트-4-개발-환경이-정비되어-있다&#34;&gt;포인트 4. 개발 환경이 정비되어 있다&lt;/h3&gt;
&lt;p&gt;Flutter는 전세계의 툴과 서비스와 연계할 수 있어 개발 환경도 정비되어 있기 때문에 고품질의 앱을 단기간에 개발할 수 있습니다.
Flutter는 VSCode를 시작해 다양한 IDE(통합 개발 환경)로 플러그인이 준비되어 있어 개발이나 테스트를 간단하게 실시할 수 있습니다. 또한 Firebase 및 Codemagic과 같은 우수한 클라우드 서비스와의 연계도 쉽고 개발 효율성을 더욱 향상시킬 수 있습니다.
또한 IDE와 에뮬레이터를 연계시키는 것만으로 실제기를 사용하지 않고 테스트를 할 수 있습니다. 그 때는 프로그램의 수정을 즉시 반영(핫 리로드)시켜 동작을 확인할 수도 있습니다.
물론 앱 빌드, 외부 패키지 가져오기, 데스크톱 앱 실행 파일 만들기 등도 쉽게 할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;포인트-5-google-제품과-궁합&#34;&gt;포인트 5. Google 제품과 궁합&lt;/h3&gt;
&lt;p&gt;Flutter는 Google이 개발하고 있기 때문에 다른 Google 제품과 매우 호환됩니다. 따라서 Google 제품과 매우 궁합이 좋습니다.&lt;/p&gt;
&lt;p&gt;구체적으로는 머티리얼 디자인이나 Firebase를 표준 탑재 혹은 플러그인 제휴로 간단하게 이용할 수 있습니다. 따라서 우수한 디자인과 클라우드 서비스의 기능을 즉시 사용할 수 있어 설계성과 기능성을 쉽게 향상시킬 수 있습니다.&lt;/p&gt;

      </description>
      
      <category>Flutter</category>
      
    </item>
    
    <item>
      <title>Lua 개요</title>
      <link>https://www.devkuma.com/docs/lua/overview/</link>
      <pubDate>Sun, 21 Apr 2024 20:50:00 +0900</pubDate>
      <author>kc@example.com (kc kim)</author>
      <guid>https://www.devkuma.com/docs/lua/overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;대상-독자&#34;&gt;대상 독자&lt;/h2&gt;
&lt;p&gt;이 글의 대상 독자는 C 언어 프로그래밍(또는 C++, C#, JAVA) 경험자이다. 언어의 기본적인 문법(&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, 함수 만드는 법)을 알고 있는 정도면 충분하다.
하지만 가능한 한 C 언어(또는 C 언어와 유사한 언어)를 모르는 분들도 이해할 수 있도록 설명할 예정이다.&lt;/p&gt;
&lt;h2 id=&#34;lua-언어에-대하여&#34;&gt;Lua 언어에 대하여&lt;/h2&gt;
&lt;p&gt;이 글의 대상 독자를 C(또는 C와 유사한 언어)로 정한 데에는 이유가 있다.
Lua 언어는 C 언어에서 호출되거나 내장되어 사용되는 언어이기 때문에 Lua 언어로만 프로그램을 작성하는 경우는 거의 없을 것으로 생각되기 때문이다.&lt;/p&gt;
&lt;h2 id=&#34;개발-환경-구축하기&#34;&gt;개발 환경 구축하기&lt;/h2&gt;
&lt;h3 id=&#34;windows에서-환경-만들기&#34;&gt;Windows에서 환경 만들기&lt;/h3&gt;
&lt;p&gt;아래 링크에서 History 부근에 최신 버전을 다운 받아서 설치하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://luabinaries.sourceforge.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lua Binaries&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mac에서-환경-만들기&#34;&gt;mac에서 환경 만들기&lt;/h3&gt;
&lt;p&gt;Mac 환경에서 Homebrew으로 아래 명령어로 설치할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/lua&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://formulae.brew.sh/formula/lua&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install lua
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;설치 후에 버전을 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;% lua -v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lua 5.4.6  Copyright &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 1994-2023 Lua.org, PUC-Rio
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;버전이 표시되면, 잘 설치가 된 것이다.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio-code에서-개발-환경-만들기&#34;&gt;Visual Studio Code에서 개발 환경 만들기&lt;/h3&gt;
&lt;h4 id=&#34;확장-기능-설치&#34;&gt;확장 기능 설치&lt;/h4&gt;
&lt;p&gt;Visual Studio Code 실행하고, Lua 와 Lua Debug extension 설치한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/lua/lua-vscode-1.png&#34; alt=&#34;Lua Visual Studio Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;그리고 Code Runner도 설치한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/lua/lua-vscode-2.png&#34; alt=&#34;Lua Visual Studio Code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;lua-실행&#34;&gt;Lua 실행&lt;/h4&gt;
&lt;p&gt;간단히 lua 파일을 생성하고, &lt;code&gt;print(&amp;quot;Hello World!&amp;quot;)&lt;/code&gt; 입력하고, 실행 버튼을 클릭한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.devkuma.com/docs/lua/lua-vscode-3.png&#34; alt=&#34;Lua Visual Studio Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;그러면 위와 같이 출력되는 것을 볼 수 있다.&lt;/p&gt;

      </description>
      
      <category>Flutter</category>
      
    </item>
    
  </channel>
</rss>
