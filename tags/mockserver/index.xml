<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devkuma – MockServer</title>
    <link>https://www.devkuma.com/tags/mockserver/</link>
    <image>
      <url>https://www.devkuma.com/tags/mockserver/logo/180x180.jpg</url>
      <title>MockServer</title>
      <link>https://www.devkuma.com/tags/mockserver/</link>
    </image>
    <description>Recent content in MockServer on devkuma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>redfreek2c@gmail.com (kimkc)</managingEditor>
    <webMaster>redfreek2c@gmail.com (kimkc)</webMaster>
    <copyright>The devkuma</copyright>
    
	  <atom:link href="https://www.devkuma.com/tags/mockserver/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Kotest 모의 서버(MockServer) 확장</title>
      <link>https://www.devkuma.com/docs/kotest/extensions/mockserver/</link>
      <pubDate>Sun, 31 Mar 2024 14:47:00 +0900</pubDate>
      <author>redfreek2c@gmail.com (kimkc)</author>
      <guid>https://www.devkuma.com/docs/kotest/extensions/mockserver/</guid>
      <description>
        
        
        &lt;p&gt;Kotest는 &lt;a href=&#34;https://www.mock-server.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MockServer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; 라이브러리와의 통합을 위한 &lt;a href=&#34;https://github.com/kotest/kotest-extensions-mockserver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;확장 기능&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;을 제공한다.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;NOTE&lt;/h4&gt;

    빌드에 &lt;code&gt;io.kotest.extensions:kotest-extensions-mockserver&lt;/code&gt; 모듈을 추가해야 한다.

&lt;/div&gt;

&lt;h2 id=&#34;mockserver&#34;&gt;MockServer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mock-server.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MockServer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;는 가상의 HTTP 서버를 제공해준다. 이 라이브러리를 사용하면 별도로 Mocking 라이브러리(mockk 등)를 사용하지 않고 실제 서버와 통신하는 것과 같이 테스트를 수행할 수 있다.&lt;/p&gt;
&lt;p&gt;Kotest는 &lt;a href=&#34;https://www.mock-server.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MockServer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; 라이브러리와의 통합을 위한 &lt;a href=&#34;https://github.com/kotest/kotest-extensions-mockserver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;확장 기능&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;을 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;의존성-추가&#34;&gt;의존성 추가&lt;/h3&gt;
&lt;p&gt;MockServer에 사용하려면 &lt;code&gt;io.kotest.extensions:kotest-extensions-mockserver&lt;/code&gt; 모듈을 의존성에 추가해야 한다. 최신 버전은 &lt;a href=&#34;https://central.sonatype.com/artifact/io.kotest.extensions/kotest-extensions-mockserver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;maven central&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;testImplementation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;io.kotest.extensions:kotest-extensions-mockserver:&amp;lt;version&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;모의 서버를 사용하면 테스트하려는 경로에 대해 하드 코딩된 프로세스 중 HTTP 서버를 정의할 수 있다.&lt;/p&gt;
&lt;p&gt;Kotest에서 사용하려면 테스트 중인 사양에 MockServerListener 인스턴스를 첨부하면 Kotest가 자동으로 수명 주기를 제어한다.&lt;/p&gt;
&lt;h2 id=&#34;모의-서버-연결&#34;&gt;모의 서버 연결&lt;/h2&gt;
&lt;p&gt;그런 다음 &lt;code&gt;MockServerClient&lt;/code&gt;를 사용하여 응답을 연결하기만 하면 된다.&lt;/p&gt;
&lt;p&gt;예를 들면, 아래와 같다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MyMockServerTest : FunSpec() {
  init {

      // this attaches the server to the lifeycle of the spec
      listener(MockServerListener(1080))

      // we can use the client to create routes. Here we are setting them up
      // before each test by using the beforeTest callback.
      beforeTest {
         MockServerClient(&amp;#34;localhost&amp;#34;, 1080).`when`(
            HttpRequest.request()
               .withMethod(&amp;#34;POST&amp;#34;)
               .withPath(&amp;#34;/login&amp;#34;)
               .withHeader(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/json&amp;#34;)
               .withBody(&amp;#34;&amp;#34;&amp;#34;{&amp;#34;username&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;bar&amp;#34;}&amp;#34;&amp;#34;&amp;#34;)
         ).respond(
            HttpResponse.response()
               .withStatusCode(202)
               .withHeader(&amp;#34;X-Test&amp;#34;, &amp;#34;foo&amp;#34;)
         )
      }

      // this test will confirm the endpoint works
      test(&amp;#34;login endpoint should accept username and password json&amp;#34;) {

         // using the ktor client to send requests
         val client = HttpClient(CIO)
         val resp = client.post&amp;lt;io.ktor.client.statement.HttpResponse&amp;gt;(&amp;#34;http://localhost:1080/login&amp;#34;) {
            contentType(ContentType.Application.Json)
            body = &amp;#34;&amp;#34;&amp;#34;{&amp;#34;username&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;bar&amp;#34;}&amp;#34;&amp;#34;&amp;#34;
         }

         // these handy matchers come from the kotest-assertions-ktor module
         resp.shouldHaveStatus(HttpStatusCode.Accepted)
         resp.shouldHaveHeader(&amp;#34;X-Test&amp;#34;, &amp;#34;foo&amp;#34;)
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위의 예에서는 물론 모의 테스트 자체만 테스트하고 있지만 실제 테스트가 어떻게 구성될 수 있는지 보여준다. 예를 들어,, 테스트하려는 API 클라이언트가 있는 경우 모의 서버를 사용하여 API 경로를 구성한 다음 API 클라이언트에서 메서드를 호출하여 응답이 올바르게 처리되는지 확인할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kotest.io/docs/extensions/mockserver.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MockServer | Kotest&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      
      <category>Kotlin</category>
      
      <category>Kotest</category>
      
      <category>MockServer</category>
      
    </item>
    
  </channel>
</rss>
